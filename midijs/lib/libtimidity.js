

// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// Include a Promise polyfill for legacy browsers. This is needed either for
// wasm2js, where we polyfill the wasm API which needs Promises, or when using
// modularize which creates a Promise for when the module is ready.
// include: promise_polyfill.js
// Promise polyfill from https://github.com/taylorhakes/promise-polyfill
// License:
//==============================================================================
// Copyright (c) 2014 Taylor Hakes
// Copyright (c) 2014 Forbes Lindesay
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.
//==============================================================================

/** @suppress{duplicate} This is already defined in from Closure's built-in
    externs.zip//es6.js, Closure should not yell when seeing this again. */
var Promise = (function() {
  function noop() {}

  // Polyfill for Function.prototype.bind
  function bind(fn, thisArg) {
    return function() {
      fn.apply(thisArg, arguments);
    };
  }

  /**
   * @constructor
   * @param {Function} fn
   */
  function Promise(fn) {
    if (!(this instanceof Promise))
      throw new TypeError('Promises must be constructed via new');
    if (typeof fn !== 'function') throw new TypeError('not a function');
    /** @type {!number} */
    this._state = 0;
    /** @type {!boolean} */
    this._handled = false;
    /** @type {Promise|undefined} */
    this._value = undefined;
    /** @type {!Array<!Function>} */
    this._deferreds = [];

    doResolve(fn, this);
  }

  function handle(self, deferred) {
    while (self._state === 3) {
      self = self._value;
    }
    if (self._state === 0) {
      self._deferreds.push(deferred);
      return;
    }
    self._handled = true;
    Promise._immediateFn(function() {
      var cb = self._state === 1 ? deferred.onFulfilled : deferred.onRejected;
      if (cb === null) {
        (self._state === 1 ? resolve : reject)(deferred.promise, self._value);
        return;
      }
      var ret;
      try {
        ret = cb(self._value);
      } catch (e) {
        reject(deferred.promise, e);
        return;
      }
      resolve(deferred.promise, ret);
    });
  }

  function resolve(self, newValue) {
    try {
      // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self)
        throw new TypeError('A promise cannot be resolved with itself.');
      if (
        newValue &&
        (typeof newValue === 'object' || typeof newValue === 'function')
      ) {
        var then = newValue.then;
        if (newValue instanceof Promise) {
          self._state = 3;
          self._value = newValue;
          finale(self);
          return;
        } else if (typeof then === 'function') {
          doResolve(bind(then, newValue), self);
          return;
        }
      }
      self._state = 1;
      self._value = newValue;
      finale(self);
    } catch (e) {
      reject(self, e);
    }
  }

  function reject(self, newValue) {
    self._state = 2;
    self._value = newValue;
    finale(self);
  }

  function finale(self) {
    if (self._state === 2 && self._deferreds.length === 0) {
      Promise._immediateFn(function() {
        if (!self._handled) {
          Promise._unhandledRejectionFn(self._value);
        }
      });
    }

    for (var i = 0, len = self._deferreds.length; i < len; i++) {
      handle(self, self._deferreds[i]);
    }
    self._deferreds = null;
  }

  /**
   * @constructor
   */
  function Handler(onFulfilled, onRejected, promise) {
    this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;
    this.onRejected = typeof onRejected === 'function' ? onRejected : null;
    this.promise = promise;
  }

  /**
   * Take a potentially misbehaving resolver function and make sure
   * onFulfilled and onRejected are only called once.
   *
   * Makes no guarantees about asynchrony.
   */
  function doResolve(fn, self) {
    var done = false;
    try {
      fn(
        function(value) {
          if (done) return;
          done = true;
          resolve(self, value);
        },
        function(reason) {
          if (done) return;
          done = true;
          reject(self, reason);
        }
      );
    } catch (ex) {
      if (done) return;
      done = true;
      reject(self, ex);
    }
  }

  Promise.prototype['catch'] = function(onRejected) {
    return this.then(null, onRejected);
  };

  Promise.prototype.then = function(onFulfilled, onRejected) {
    // @ts-ignore
    var prom = new this.constructor(noop);

    handle(this, new Handler(onFulfilled, onRejected, prom));
    return prom;
  };

  Promise.all = function(arr) {
    return new Promise(function(resolve, reject) {
      if (!Array.isArray(arr)) {
        return reject(new TypeError('Promise.all accepts an array'));
      }

      var args = Array.prototype.slice.call(arr);
      if (args.length === 0) return resolve([]);
      var remaining = args.length;

      function res(i, val) {
        try {
          if (val && (typeof val === 'object' || typeof val === 'function')) {
            var then = val.then;
            if (typeof then === 'function') {
              then.call(
                val,
                function(val) {
                  res(i, val);
                },
                reject
              );
              return;
            }
          }
          args[i] = val;
          if (--remaining === 0) {
            resolve(args);
          }
        } catch (ex) {
          reject(ex);
        }
      }

      for (var i = 0; i < args.length; i++) {
        res(i, args[i]);
      }
    });
  };

  Promise.resolve = function(value) {
    if (value && typeof value === 'object' && value.constructor === Promise) {
      return value;
    }

    return new Promise(function(resolve) {
      resolve(value);
    });
  };

  Promise.reject = function(value) {
    return new Promise(function(resolve, reject) {
      reject(value);
    });
  };

  Promise.race = function(arr) {
    return new Promise(function(resolve, reject) {
      if (!Array.isArray(arr)) {
        return reject(new TypeError('Promise.race accepts an array'));
      }

      for (var i = 0, len = arr.length; i < len; i++) {
        Promise.resolve(arr[i]).then(resolve, reject);
      }
    });
  };

  // Use polyfill for setImmediate for performance gains
  Promise._immediateFn =
    // @ts-ignore
    (typeof setImmediate === 'function' &&
      function(fn) {
        // @ts-ignore
        setImmediate(fn);
      }) ||
    function(fn) {
      setTimeout(fn, 0); // XXX EMSCRIPTEN: just use setTimeout
    };

  Promise._unhandledRejectionFn = function _unhandledRejectionFn(err) {
    if (typeof console !== 'undefined' && console) {
      console.warn('Possible Unhandled Promise Rejection:', err); // eslint-disable-line no-console
    }
  };

  return Promise;
})();

// end include: promise_polyfill.js

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)

  if (!Module.expectedDataFileDownloads) {
    Module.expectedDataFileDownloads = 0;
  }
  Module.expectedDataFileDownloads++;
  (function() {
   var loadPackage = function(metadata) {
  
    function runWithFS() {
  
      function assert(check, msg) {
        if (!check) throw msg + new Error().stack;
      }
  Module['FS_createPath']("/", "pat", true, true);
Module['FS_createPath']("/pat", "MT32Drums", true, true);
var fileData0 = 'ZGlyIC4vcGF0CgpkcnVtc2V0IDAKCiAzNQkgTVQzMkRydW1zL210MzJkcnVtLTAucGF0CiAzNgkgTVQzMkRydW1zL210MzJkcnVtLTEucGF0CiAzNwkgTVQzMkRydW1zL210MzJkcnVtLTIucGF0CiAzOAkgTVQzMkRydW1zL210MzJkcnVtLTMucGF0CiAzOQkgTVQzMkRydW1zL210MzJkcnVtLTQucGF0CiA0MAkgTVQzMkRydW1zL210MzJkcnVtLTUucGF0CiA0MQkgTVQzMkRydW1zL210MzJkcnVtLTYucGF0CiA0MgkgTVQzMkRydW1zL210MzJkcnVtLTcucGF0CiA0MwkgTVQzMkRydW1zL210MzJkcnVtLTgucGF0CiA0NAkgTVQzMkRydW1zL210MzJkcnVtLTkucGF0CiA0NQkgTVQzMkRydW1zL210MzJkcnVtLTEwLnBhdAogNDYJIE1UMzJEcnVtcy9tdDMyZHJ1bS0xMS5wYXQKIDQ3CSBNVDMyRHJ1bXMvbXQzMmRydW0tMTIucGF0CiA0OAkgTVQzMkRydW1zL210MzJkcnVtLTEzLnBhdAogNDkJIE1UMzJEcnVtcy9tdDMyZHJ1bS0xNC5wYXQKIDUwCSBNVDMyRHJ1bXMvbXQzMmRydW0tMTUucGF0CiA1MQkgTVQzMkRydW1zL210MzJkcnVtLTE2LnBhdAogNTIJIE1UMzJEcnVtcy9tdDMyZHJ1bS0xNy5wYXQKIDUzCSBNVDMyRHJ1bXMvbXQzMmRydW0tMTgucGF0CiA1NAkgTVQzMkRydW1zL210MzJkcnVtLTE5LnBhdAogNTUJIE1UMzJEcnVtcy9tdDMyZHJ1bS0yMC5wYXQKIDU2CSBNVDMyRHJ1bXMvbXQzMmRydW0tMjEucGF0CiA1NwkgTVQzMkRydW1zL210MzJkcnVtLTIyLnBhdAogNTgJIE1UMzJEcnVtcy9tdDMyZHJ1bS0yMy5wYXQKIDU5CSBNVDMyRHJ1bXMvbXQzMmRydW0tMjQucGF0CiA2MAkgTVQzMkRydW1zL210MzJkcnVtLTI1LnBhdAogNjEJIE1UMzJEcnVtcy9tdDMyZHJ1bS0yNi5wYXQKIDYyCSBNVDMyRHJ1bXMvbXQzMmRydW0tMjcucGF0CiA2MwkgTVQzMkRydW1zL210MzJkcnVtLTI4LnBhdAogNjQJIE1UMzJEcnVtcy9tdDMyZHJ1bS0yOS5wYXQKIDY1CSBNVDMyRHJ1bXMvbXQzMmRydW0tMzAucGF0CiA2NgkgTVQzMkRydW1zL210MzJkcnVtLTMxLnBhdAogNjcJIE1UMzJEcnVtcy9tdDMyZHJ1bS0zMi5wYXQKIDY4CSBNVDMyRHJ1bXMvbXQzMmRydW0tMzMucGF0CiA2OQkgTVQzMkRydW1zL210MzJkcnVtLTM0LnBhdAogNzAJIE1UMzJEcnVtcy9tdDMyZHJ1bS0zNS5wYXQKIDcxCSBNVDMyRHJ1bXMvbXQzMmRydW0tMzYucGF0CiA3MgkgTVQzMkRydW1zL210MzJkcnVtLTM3LnBhdAogNzMJIE1UMzJEcnVtcy9tdDMyZHJ1bS0zOC5wYXQKIDc0CSBNVDMyRHJ1bXMvbXQzMmRydW0tMzkucGF0CiA3NQkgTVQzMkRydW1zL210MzJkcnVtLTQwLnBhdAogNzYJIE1UMzJEcnVtcy9tdDMyZHJ1bS00MS5wYXQKIDc3CSBNVDMyRHJ1bXMvbXQzMmRydW0tNDIucGF0CiA3OAkgTVQzMkRydW1zL210MzJkcnVtLTQzLnBhdAogNzkJIE1UMzJEcnVtcy9tdDMyZHJ1bS00NC5wYXQKIDgwCSBNVDMyRHJ1bXMvbXQzMmRydW0tNDUucGF0CiA4MQkgTVQzMkRydW1zL210MzJkcnVtLTQ2LnBhdAoKYmFuayAwCgogMAkgYXJhY2huby0xMjcucGF0CiAxCSBhcmFjaG5vLTEyNi5wYXQKIDIJIGFyYWNobm8tMTI1LnBhdAogMwkgYXJhY2huby0xMjQucGF0CiA0CSBhcmFjaG5vLTEyMy5wYXQKIDUJIGFyYWNobm8tMTIyLnBhdAogNgkgYXJhY2huby0xMjEucGF0CiA3CSBhcmFjaG5vLTEyMC5wYXQKIDgJIGFyYWNobm8tMTE5LnBhdAogOQkgYXJhY2huby0xMTgucGF0CiAxMAkgYXJhY2huby0xMTcucGF0CiAxMQkgYXJhY2huby0xMTYucGF0CiAxMgkgYXJhY2huby0xMTUucGF0CiAxMwkgYXJhY2huby0xMTQucGF0CiAxNAkgYXJhY2huby0xMTMucGF0CiAxNQkgYXJhY2huby0xMTIucGF0CiAxNgkgYXJhY2huby0xMTEucGF0CiAxNwkgYXJhY2huby0xMTAucGF0CiAxOAkgYXJhY2huby0xMDkucGF0CiAxOQkgYXJhY2huby0xMDgucGF0CiAyMAkgYXJhY2huby0xMDcucGF0CiAyMQkgYXJhY2huby0xMDYucGF0CiAyMgkgYXJhY2huby0xMDUucGF0CiAyMwkgYXJhY2huby0xMDQucGF0CiAyNAkgYXJhY2huby0xMDMucGF0CiAyNQkgYXJhY2huby0xMDIucGF0CiAyNgkgYXJhY2huby0xMDEucGF0CiAyNwkgYXJhY2huby0xMDAucGF0CiAyOAkgYXJhY2huby05OS5wYXQKIDI5CSBhcmFjaG5vLTk4LnBhdAogMzAJIGFyYWNobm8tOTcucGF0CiAzMQkgYXJhY2huby05Ni5wYXQKIDMyCSBhcmFjaG5vLTk1LnBhdAogMzMJIGFyYWNobm8tOTQucGF0CiAzNAkgYXJhY2huby05My5wYXQKIDM1CSBhcmFjaG5vLTkyLnBhdAogMzYJIGFyYWNobm8tOTEucGF0CiAzNwkgYXJhY2huby05MC5wYXQKIDM4CSBhcmFjaG5vLTg5LnBhdAogMzkJIGFyYWNobm8tODgucGF0CiA0MAkgYXJhY2huby04Ny5wYXQKIDQxCSBhcmFjaG5vLTg2LnBhdAogNDIJIGFyYWNobm8tODUucGF0CiA0MwkgYXJhY2huby04NC5wYXQKIDQ0CSBhcmFjaG5vLTgzLnBhdAogNDUJIGFyYWNobm8tODIucGF0CiA0NgkgYXJhY2huby04MS5wYXQKIDQ3CSBhcmFjaG5vLTgwLnBhdAogNDgJIGFyYWNobm8tNzkucGF0CiA0OQkgYXJhY2huby03OC5wYXQKIDUwCSBhcmFjaG5vLTc3LnBhdAogNTEJIGFyYWNobm8tNzYucGF0CiA1MgkgYXJhY2huby03NS5wYXQKIDUzCSBhcmFjaG5vLTc0LnBhdAogNTQJIGFyYWNobm8tNzMucGF0CiA1NQkgYXJhY2huby03Mi5wYXQKIDU2CSBhcmFjaG5vLTcxLnBhdAogNTcJIGFyYWNobm8tNzAucGF0CiA1OAkgYXJhY2huby02OS5wYXQKIDU5CSBhcmFjaG5vLTY4LnBhdAogNjAJIGFyYWNobm8tNjcucGF0CiA2MQkgYXJhY2huby02Ni5wYXQKIDYyCSBhcmFjaG5vLTY1LnBhdAogNjMJIGFyYWNobm8tNjQucGF0CiA2NAkgYXJhY2huby02My5wYXQKIDY1CSBhcmFjaG5vLTYyLnBhdAogNjYJIGFyYWNobm8tNjEucGF0CiA2NwkgYXJhY2huby02MC5wYXQKIDY4CSBhcmFjaG5vLTU5LnBhdAogNjkJIGFyYWNobm8tNTgucGF0CiA3MAkgYXJhY2huby01Ny5wYXQKIDcxCSBhcmFjaG5vLTU2LnBhdAogNzIJIGFyYWNobm8tNTUucGF0CiA3MwkgYXJhY2huby01NC5wYXQKIDc0CSBhcmFjaG5vLTUzLnBhdAogNzUJIGFyYWNobm8tNTIucGF0CiA3NgkgYXJhY2huby01MS5wYXQKIDc3CSBhcmFjaG5vLTUwLnBhdAogNzgJIGFyYWNobm8tNDkucGF0CiA3OQkgYXJhY2huby00OC5wYXQKIDgwCSBhcmFjaG5vLTQ3LnBhdAogODEJIGFyYWNobm8tNDYucGF0CiA4MgkgYXJhY2huby00NS5wYXQKIDgzCSBhcmFjaG5vLTQ0LnBhdAogODQJIGFyYWNobm8tNDMucGF0CiA4NQkgYXJhY2huby00Mi5wYXQKIDg2CSBhcmFjaG5vLTQxLnBhdAogODcJIGFyYWNobm8tNDAucGF0CiA4OAkgYXJhY2huby0zOS5wYXQKIDg5CSBhcmFjaG5vLTM4LnBhdAogOTAJIGFyYWNobm8tMzcucGF0CiA5MQkgYXJhY2huby0zNi5wYXQKIDkyCSBhcmFjaG5vLTM1LnBhdAogOTMJIGFyYWNobm8tMzQucGF0CiA5NAkgYXJhY2huby0zMy5wYXQKIDk1CSBhcmFjaG5vLTMyLnBhdAogOTYJIGFyYWNobm8tMzEucGF0CiA5NwkgYXJhY2huby0zMC5wYXQKIDk4CSBhcmFjaG5vLTI5LnBhdAogOTkJIGFyYWNobm8tMjgucGF0CiAxMDAJIGFyYWNobm8tMjcucGF0CiAxMDEJIGFyYWNobm8tMjYucGF0CiAxMDIJIGFyYWNobm8tMjUucGF0CiAxMDMJIGFyYWNobm8tMjQucGF0CiAxMDQJIGFyYWNobm8tMjMucGF0CiAxMDUJIGFyYWNobm8tMjIucGF0CiAxMDYJIGFyYWNobm8tMjEucGF0CiAxMDcJIGFyYWNobm8tMjAucGF0CiAxMDgJIGFyYWNobm8tMTkucGF0CiAxMDkJIGFyYWNobm8tMTgucGF0CiAxMTAJIGFyYWNobm8tMTcucGF0CiAxMTEJIGFyYWNobm8tMTYucGF0CiAxMTIJIGFyYWNobm8tMTUucGF0CiAxMTMJIGFyYWNobm8tMTQucGF0CiAxMTQJIGFyYWNobm8tMTMucGF0CiAxMTUJIGFyYWNobm8tMTIucGF0CiAxMTYJIGFyYWNobm8tMTEucGF0CiAxMTcJIGFyYWNobm8tMTAucGF0CiAxMTgJIGFyYWNobm8tOS5wYXQKIDExOQkgYXJhY2huby04LnBhdAogMTIwCSBhcmFjaG5vLTcucGF0CiAxMjEJIGFyYWNobm8tNi5wYXQKIDEyMgkgYXJhY2huby01LnBhdAogMTIzCSBhcmFjaG5vLTQucGF0CiAxMjQJIGFyYWNobm8tMy5wYXQKIDEyNQkgYXJhY2huby0yLnBhdAogMTI2CSBhcmFjaG5vLTEucGF0CiAxMjcJIGFyYWNobm8tMC5wYXQK';
Module['FS_createDataFile']('/', 'timidity.cfg', decodeBase64(fileData0), true, true, false);
var fileData1 = 'ZHVtbXkK';
Module['FS_createDataFile']('/pat', 'dummy.txt', decodeBase64(fileData1), true, true, false);
var fileData2 = 'ZHVtbXkK';
Module['FS_createDataFile']('/pat/MT32Drums', 'dummy.txt', decodeBase64(fileData2), true, true, false);

    }
    if (Module['calledRun']) {
      runWithFS();
    } else {
      if (!Module['preRun']) Module['preRun'] = [];
      Module["preRun"].push(runWithFS); // FS is not initialized yet, wait for it
    }
  
   }
   loadPackage({"files": []});
  
  })();
  

    // All the pre-js content up to here must remain later on, we need to run
    // it.
    var necessaryPreJSTasks = Module['preRun'].slice();
  
    if (!Module['preRun']) throw 'Module.preRun should exist because file support used it; did a pre-js delete it?';
    necessaryPreJSTasks.forEach(function(task) {
      if (Module['preRun'].indexOf(task) < 0) throw 'All preRun tasks that exist before user pre-js code should remain after; did you replace Module or modify Module.preRun?';
    });
  

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

var arguments_ = [];
var thisProgram = './this.program';
var quit_ = function(status, toThrow) {
  throw toThrow;
};

// Determine the runtime environment we are in. You can customize this by
// setting the ENVIRONMENT setting at compile time (see settings.js).

// Attempt to auto-detect the environment
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
// N.b. Electron.js environment is simultaneously a NODE-environment, but
// also a web environment.
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof process.versions === 'object' && typeof process.versions.node === 'string';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (Module['ENVIRONMENT']) {
  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');
}

// `/` should be present at the end if `scriptDirectory` is not empty
var scriptDirectory = '';
function locateFile(path) {
  if (Module['locateFile']) {
    return Module['locateFile'](path, scriptDirectory);
  }
  return scriptDirectory + path;
}

// Hooks that are implemented differently in different runtime environments.
var read_,
    readAsync,
    readBinary,
    setWindowTitle;

var nodeFS;
var nodePath;

if (ENVIRONMENT_IS_NODE) {
  if (!(typeof process === 'object' && typeof require === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
  if (ENVIRONMENT_IS_WORKER) {
    scriptDirectory = require('path').dirname(scriptDirectory) + '/';
  } else {
    scriptDirectory = __dirname + '/';
  }

// include: node_shell_read.js


read_ = function shell_read(filename, binary) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    return binary ? ret : ret.toString();
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  return nodeFS['readFileSync'](filename, binary ? null : 'utf8');
};

readBinary = function readBinary(filename) {
  var ret = read_(filename, true);
  if (!ret.buffer) {
    ret = new Uint8Array(ret);
  }
  assert(ret.buffer);
  return ret;
};

readAsync = function readAsync(filename, onload, onerror) {
  var ret = tryParseAsDataURI(filename);
  if (ret) {
    onload(ret);
  }
  if (!nodeFS) nodeFS = require('fs');
  if (!nodePath) nodePath = require('path');
  filename = nodePath['normalize'](filename);
  nodeFS['readFile'](filename, function(err, data) {
    if (err) onerror(err);
    else onload(data.buffer);
  });
};

// end include: node_shell_read.js
  if (process['argv'].length > 1) {
    thisProgram = process['argv'][1].replace(/\\/g, '/');
  }

  arguments_ = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  process['on']('unhandledRejection', abort);

  quit_ = function(status, toThrow) {
    if (keepRuntimeAlive()) {
      process['exitCode'] = status;
      throw toThrow;
    }
    process['exit'](status);
  };

  Module['inspect'] = function () { return '[Emscripten Module object]'; };

} else
if (ENVIRONMENT_IS_SHELL) {

  if ((typeof process === 'object' && typeof require === 'function') || typeof window === 'object' || typeof importScripts === 'function') throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  if (typeof read != 'undefined') {
    read_ = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  readBinary = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  readAsync = function readAsync(f, onload, onerror) {
    setTimeout(function() { onload(readBinary(f)); }, 0);
  };

  if (typeof scriptArgs != 'undefined') {
    arguments_ = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    arguments_ = arguments;
  }

  if (typeof quit === 'function') {
    quit_ = function(status) {
      quit(status);
    };
  }

  if (typeof print !== 'undefined') {
    // Prefer to use print/printErr where they exist, as they usually work better.
    if (typeof console === 'undefined') console = /** @type{!Console} */({});
    console.log = /** @type{!function(this:Console, ...*): undefined} */ (print);
    console.warn = console.error = /** @type{!function(this:Console, ...*): undefined} */ (typeof printErr !== 'undefined' ? printErr : print);
  }

} else

// Note that this includes Node.js workers when relevant (pthreads is enabled).
// Node.js workers are detected as a combination of ENVIRONMENT_IS_WORKER and
// ENVIRONMENT_IS_NODE.
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled
    scriptDirectory = self.location.href;
  } else if (typeof document !== 'undefined' && document.currentScript) { // web
    scriptDirectory = document.currentScript.src;
  }
  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.
  // otherwise, slice off the final part of the url to find the script directory.
  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,
  // and scriptDirectory will correctly be replaced with an empty string.
  if (scriptDirectory.indexOf('blob:') !== 0) {
    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);
  } else {
    scriptDirectory = '';
  }

  if (!(typeof window === 'object' || typeof importScripts === 'function')) throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');

  // Differentiate the Web Worker from the Node Worker case, as reading must
  // be done differently.
  {

// include: web_or_worker_shell_read.js


  read_ = function(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    readBinary = function(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(/** @type{!ArrayBuffer} */(xhr.response));
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  readAsync = function(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

// end include: web_or_worker_shell_read.js
  }

  setWindowTitle = function(title) { document.title = title };
} else
{
  throw new Error('environment detection error');
}

// Set up the out() and err() hooks, which are how we can print to stdout or
// stderr, respectively.
var out = Module['print'] || console.log.bind(console);
var err = Module['printErr'] || console.warn.bind(console);

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = null;

// Emit code to handle expected values on the Module object. This applies Module.x
// to the proper local x. This has two benefits: first, we only emit it if it is
// expected to arrive, and second, by using a local everywhere else that can be
// minified.

if (Module['arguments']) arguments_ = Module['arguments'];
if (!Object.getOwnPropertyDescriptor(Module, 'arguments')) {
  Object.defineProperty(Module, 'arguments', {
    configurable: true,
    get: function() {
      abort('Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['thisProgram']) thisProgram = Module['thisProgram'];
if (!Object.getOwnPropertyDescriptor(Module, 'thisProgram')) {
  Object.defineProperty(Module, 'thisProgram', {
    configurable: true,
    get: function() {
      abort('Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (Module['quit']) quit_ = Module['quit'];
if (!Object.getOwnPropertyDescriptor(Module, 'quit')) {
  Object.defineProperty(Module, 'quit', {
    configurable: true,
    get: function() {
      abort('Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// perform assertions in shell.js after we set up out() and err(), as otherwise if an assertion fails it cannot print the message
// Assertions on removed incoming Module JS APIs.
assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');
assert(typeof Module['read'] === 'undefined', 'Module.read option was removed (modify read_ in JS)');
assert(typeof Module['readAsync'] === 'undefined', 'Module.readAsync option was removed (modify readAsync in JS)');
assert(typeof Module['readBinary'] === 'undefined', 'Module.readBinary option was removed (modify readBinary in JS)');
assert(typeof Module['setWindowTitle'] === 'undefined', 'Module.setWindowTitle option was removed (modify setWindowTitle in JS)');
assert(typeof Module['TOTAL_MEMORY'] === 'undefined', 'Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY');

if (!Object.getOwnPropertyDescriptor(Module, 'read')) {
  Object.defineProperty(Module, 'read', {
    configurable: true,
    get: function() {
      abort('Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readAsync')) {
  Object.defineProperty(Module, 'readAsync', {
    configurable: true,
    get: function() {
      abort('Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'readBinary')) {
  Object.defineProperty(Module, 'readBinary', {
    configurable: true,
    get: function() {
      abort('Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

if (!Object.getOwnPropertyDescriptor(Module, 'setWindowTitle')) {
  Object.defineProperty(Module, 'setWindowTitle', {
    configurable: true,
    get: function() {
      abort('Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var IDBFS = 'IDBFS is no longer included by default; build with -lidbfs.js';
var PROXYFS = 'PROXYFS is no longer included by default; build with -lproxyfs.js';
var WORKERFS = 'WORKERFS is no longer included by default; build with -lworkerfs.js';
var NODEFS = 'NODEFS is no longer included by default; build with -lnodefs.js';


assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");




var STACK_ALIGN = 16;

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = Number(type.substr(1));
        assert(bits % 8 === 0, 'getNativeTypeSize invalid bits ' + bits + ', type ' + type);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    err(text);
  }
}

// include: runtime_functions.js


// Wraps a JS function as a wasm function with a given signature.
function convertJsFunctionToWasm(func, sig) {
  return func;
}

var freeTableIndexes = [];

// Weak map of functions in the table to their indexes, created on first use.
var functionsInTableMap;

function getEmptyTableSlot() {
  // Reuse a free index if there is one, otherwise grow.
  if (freeTableIndexes.length) {
    return freeTableIndexes.pop();
  }
  // Grow the table
  try {
    wasmTable.grow(1);
  } catch (err) {
    if (!(err instanceof RangeError)) {
      throw err;
    }
    throw 'Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.';
  }
  return wasmTable.length - 1;
}

// Add a wasm function to the table.
function addFunctionWasm(func, sig) {
  // Check if the function is already in the table, to ensure each function
  // gets a unique index. First, create the map if this is the first use.
  if (!functionsInTableMap) {
    functionsInTableMap = new WeakMap();
    for (var i = 0; i < wasmTable.length; i++) {
      var item = wasmTable.get(i);
      // Ignore null values.
      if (item) {
        functionsInTableMap.set(item, i);
      }
    }
  }
  if (functionsInTableMap.has(func)) {
    return functionsInTableMap.get(func);
  }

  // It's not in the table, add it now.

  var ret = getEmptyTableSlot();

  // Set the new value.
  try {
    // Attempting to call this with JS function will cause of table.set() to fail
    wasmTable.set(ret, func);
  } catch (err) {
    if (!(err instanceof TypeError)) {
      throw err;
    }
    assert(typeof sig !== 'undefined', 'Missing signature argument to addFunction: ' + func);
    var wrapped = convertJsFunctionToWasm(func, sig);
    wasmTable.set(ret, wrapped);
  }

  functionsInTableMap.set(func, ret);

  return ret;
}

function removeFunction(index) {
  functionsInTableMap.delete(wasmTable.get(index));
  freeTableIndexes.push(index);
}

// 'sig' parameter is required for the llvm backend but only when func is not
// already a WebAssembly function.
function addFunction(func, sig) {
  assert(typeof func !== 'undefined');

  return addFunctionWasm(func, sig);
}

// end include: runtime_functions.js
// include: runtime_debug.js


// end include: runtime_debug.js
var tempRet0 = 0;

var setTempRet0 = function(value) {
  tempRet0 = value;
};

var getTempRet0 = function() {
  return tempRet0;
};



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

var wasmBinary;
if (Module['wasmBinary']) wasmBinary = Module['wasmBinary'];
if (!Object.getOwnPropertyDescriptor(Module, 'wasmBinary')) {
  Object.defineProperty(Module, 'wasmBinary', {
    configurable: true,
    get: function() {
      abort('Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}
var noExitRuntime = Module['noExitRuntime'] || true;
if (!Object.getOwnPropertyDescriptor(Module, 'noExitRuntime')) {
  Object.defineProperty(Module, 'noExitRuntime', {
    configurable: true,
    get: function() {
      abort('Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

// include: wasm2js.js


// wasm2js.js - enough of a polyfill for the WebAssembly object so that we can load
// wasm2js code that way.

// Emit "var WebAssembly" if definitely using wasm2js. Otherwise, in MAYBE_WASM2JS
// mode, we can't use a "var" since it would prevent normal wasm from working.
/** @suppress{duplicate, const} */
var
WebAssembly = {
  // Note that we do not use closure quoting (this['buffer'], etc.) on these
  // functions, as they are just meant for internal use. In other words, this is
  // not a fully general polyfill.
  Memory: function(opts) {
    this.buffer = new ArrayBuffer(opts['initial'] * 65536);
  },

  Module: function(binary) {
    // TODO: use the binary and info somehow - right now the wasm2js output is embedded in
    // the main JS
  },

  Instance: function(module, info) {
    // TODO: use the module and info somehow - right now the wasm2js output is embedded in
    // the main JS
    // This will be replaced by the actual wasm2js code.
    this.exports = (
function instantiate(asmLibraryArg) {
function Table(ret) {
  // grow method not included; table is not growable
  ret.set = function(i, func) {
    this[i] = func;
  };
  ret.get = function(i) {
    return this[i];
  };
  return ret;
}

  var bufferView;
  var base64ReverseLookup = new Uint8Array(123/*'z'+1*/);
  for (var i = 25; i >= 0; --i) {
    base64ReverseLookup[48+i] = 52+i; // '0-9'
    base64ReverseLookup[65+i] = i; // 'A-Z'
    base64ReverseLookup[97+i] = 26+i; // 'a-z'
  }
  base64ReverseLookup[43] = 62; // '+'
  base64ReverseLookup[47] = 63; // '/'
  /** @noinline Inlining this function would mean expanding the base64 string 4x times in the source code, which Closure seems to be happy to do. */
  function base64DecodeToExistingUint8Array(uint8Array, offset, b64) {
    var b1, b2, i = 0, j = offset, bLength = b64.length, end = offset + (bLength*3>>2) - (b64[bLength-2] == '=') - (b64[bLength-1] == '=');
    for (; i < bLength; i += 4) {
      b1 = base64ReverseLookup[b64.charCodeAt(i+1)];
      b2 = base64ReverseLookup[b64.charCodeAt(i+2)];
      uint8Array[j++] = base64ReverseLookup[b64.charCodeAt(i)] << 2 | b1 >> 4;
      if (j < end) uint8Array[j++] = b1 << 4 | b2 >> 2;
      if (j < end) uint8Array[j++] = b2 << 6 | base64ReverseLookup[b64.charCodeAt(i+3)];
    }
  }
function initActiveSegments(imports) {
  base64DecodeToExistingUint8Array(bufferView, 1024, "LnBhdABNVGhkAHJiACVzQ2h1bms6ICVjJWMlYyVjICglZCBieXRlcykAYWRkIHRvIHBhdGhsaXN0OiAlcwoAU1VTVEFJTjogJWQKAEdGMVBBVENIMTEwAElEIzAwMDAwMgBNVHJrAHRpbWlkaXR5LmNmZwAgc3VidHlwZTogJWMlYyVjJWMATUFJTlZPTFVNRTogJWQKAEdGMVBBVENIMTAwAElEIzAwMDAwMgBUZXh0IGV2ZW50OiAAVW5zdXBwb3J0ZWQgYXVkaW8gZm9ybWF0CgBWZWxvY2l0eSAlZCAlZAoAPz8/Pz8/AFRleHQ6IAAlc3sKAFByb2JhYmxlIHNvdXJjZSBsb29wIGluIGNvbmZpZ3VyYXRpb24gZmlsZXMKAENvcHlyaWdodDogACVzfQoAQ29uZmlndXJhdGlvbiBmaWxlICVzIG5vdCBmb3VuZAoAIAmgAFRyYWNrIG5hbWU6IABETFMgRGF0YToKACNleHRlbnNpb24ASW5zdHJ1bWVudDogAGNJbnN0cnVtZW50cyA9ICV1CgBjb21tAEN1ZXM6IABMeXJpYzogAEhUVFBwcm94eQBNYXJrZXI6IAAsIABGVFBwcm94eQAldQBDdWUgcG9pbnQ6IABtYWlsYWRkcgBXYXZlczoKAG9wdABOYW1lOiAlcwoAdGltZW91dABBcnRpc3Q6ICVzCgBDb3B5cmlnaHQ6ICVzCgBGSVhNRTogSW1wbGVtZW50ICJ0aW1lb3V0IiBpbiBUaU1pZGl0eSBjb25maWcuCgBjb3B5ZHJ1bXNldABDb21tZW50czogJXMKAGNvcHliYW5rAEluc3RydW1lbnQgJXU6CgAgIE5hbWU6ICVzCgBGSVhNRTogSW1wbGVtZW50ICIlcyIgaW4gVGlNaWRpdHkgY29uZmlnLgoAdW5kZWYAICB1bEJhbmsgPSAweCU4Ljh4CgAgIHVsSW5zdHJ1bWVudCA9ICV1CgBGSVhNRTogSW1wbGVtZW50ICJ1bmRlZiIgaW4gVGlNaWRpdHkgY29uZmlnLgoAYWx0YXNzaWduACAgUmVnaW9uczogJXUKAEluc3RydW1lbnQARklYTUU6IEltcGxlbWVudCAiYWx0YXNzaWduIiBpbiBUaU1pZGl0eSBjb25maWcuCgBzb3VuZGZvbnQAICBSZWdpb24gJXU6CgBmb250ACAgICBSYW5nZUtleSA9IHsgJWh1IC0gJWh1IH0KACAgICBSYW5nZVZlbG9jaXR5ID0geyAlaHUgLSAlaHUgfQoARklYTUU6IEltcGxtZW1lbnQgIiVzIiBpbiBUaU1pZGl0eSBjb25maWcuCgBwcm9nYmFzZQAgICAgZnVzT3B0aW9ucyA9IDB4JTQuNGh4CgAgICAgdXNLZXlHcm91cCA9ICVodQoARklYTUU6IEltcGxlbWVudCAicHJvZ2Jhc2UiIGluIFRpTWlkaXR5IGNvbmZpZy4KAG1hcAAgICAgd2xuay0+ZnVzT3B0aW9ucyA9IDB4JTQuNGh4CgAgICAgd2xuay0+dXNQaGFzZUdyb3VwID0gJWh1CgBGSVhNRTogSW1wbGVtZW50ICJtYXAiIGluIFRpTWlkaXR5IGNvbmZpZy4KAGRpcgAgICAgd2xuay0+dWxDaGFubmVsID0gJXUKACAgICB3bG5rLT51bFRhYmxlSW5kZXggPSAldQoAJXM6IGxpbmUgJWQ6IE5vIGRpcmVjdG9yeSBnaXZlbgoAc291cmNlACAgICB3c21wLT51c1VuaXR5Tm90ZSA9ICVodQoAJXM6IGxpbmUgJWQ6IE5vIGZpbGUgbmFtZSBnaXZlbgoAICAgIHdzbXAtPnNGaW5lVHVuZSA9ICVoZAoAZGVmYXVsdAAgICAgd3NtcC0+bEF0dGVudWF0aW9uID0gJWQKACAgICB3c21wLT5mdWxPcHRpb25zID0gMHglOC44eAoAJXM6IGxpbmUgJWQ6IE11c3Qgc3BlY2lmeSBleGFjdGx5IG9uZSBwYXRjaCBuYW1lCgBkcnVtc2V0ACAgICB3c21wLT5jU2FtcGxlTG9vcHMgPSAldQoAJXM6IGxpbmUgJWQ6IE5vIGRydW0gc2V0IG51bWJlciBnaXZlbgoAICAgIExvb3AgJXU6CgAgICAgICB1bFN0YXJ0ID0gJXUKACVzOiBsaW5lICVkOiBEcnVtIHNldCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTI3CgBiYW5rACAgICAgIHVsTGVuZ3RoID0gJXUKAFJlZ2lvbgAlczogbGluZSAlZDogTm8gYmFuayBudW1iZXIgZ2l2ZW4KACVzIENvbm5lY3Rpb25zOgoAJXM6IGxpbmUgJWQ6IFRvbmUgYmFuayBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTI3CgAlczogbGluZSAlZDogc3ludGF4IGVycm9yCgAgIFNvdXJjZTogJXMsIENvbnRyb2w6ICVzLCBEZXN0aW5hdGlvbjogJXMsIFRyYW5zZm9ybTogJXMsIFNjYWxlOiAlZAoATk9ORQAlczogbGluZSAlZDogUHJvZ3JhbSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTI3CgBMRk8AJXM6IGxpbmUgJWQ6IE11c3Qgc3BlY2lmeSB0b25lIGJhbmsgb3IgZHJ1bSBzZXQgYmVmb3JlIGFzc2lnbm1lbnQKAEtFWU9OVkVMT0NJVFkAJXM6IGxpbmUgJWQ6IGJhZCBwYXRjaCBvcHRpb24gJXMKAGFtcABLRVlOVU1CRVIARUcxACVzOiBsaW5lICVkOiBhbXBsaWZpY2F0aW9uIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAlZAoAbm90ZQBFRzIAUElUQ0hXSEVFTAAlczogbGluZSAlZDogbm90ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMTI3CgBwYW4AQ0MxAGNlbnRlcgBDQzcAbGVmdABDQzEwAHJpZ2h0AENDMTEAUE9MWVBSRVNTVVJFACVzOiBsaW5lICVkOiBwYW5uaW5nIG11c3QgYmUgbGVmdCwgcmlnaHQsIGNlbnRlciwgb3IgYmV0d2VlbiAtMTAwIGFuZCAxMDAKAGtlZXAAQ0hBTk5FTFBSRVNTVVJFAGVudgBWSUJSQVRPAGxvb3AATU9OT1BSRVNTVVJFAENDOTEAJXM6IGxpbmUgJWQ6IGtlZXAgbXVzdCBiZSBlbnYgb3IgbG9vcAoAc3RyaXAAQ0M5MwB0YWlsAFVOS05PV04AQVRURU5VQVRJT04AJXM6IGxpbmUgJWQ6IHN0cmlwIG11c3QgYmUgZW52LCBsb29wLCBvciB0YWlsCgAAAAAAAAAAAAAAAAAAAPAfAADWIQAA2SMAAPslAAA9KAAAoSoAACotAADaLwAAsjIAALY1AADoOAAASjwAAOA/AACsQwAAskcAAPVLAAB6UAAAQ1UAAFVaAAC0XwAAZWUAAGxrAADPcQAAlHgAAL9/AABYhwAAZI8AAOuXAADzoAAAhqoAAKm0AABnvwAAycoAANjWAACe4wAAJ/EAAH7/AACwDgEAyB4BANYvAQDnQQEAC1UBAFNpAQDPfgEAkpUBALCtAQA9xwEAT+IBAP3+AQBfHQIAkD0CAKtfAgDOgwIAFqoCAKXSAgCe/QIAJCsDAGBbAwB6jgMAnsQDAPr9AwC/OgQAIXsEAFe/BACcBwUALFQFAEqlBQA7+wUASVYGAMC2BgD0HAcAO4kHAPP7BwB9dQgAQvYIAK5+CQA3DwoAWKgKAJVKCwB39gsAkawMAIBtDQDoOQ4AdxIPAOb3DwD76hAAg+wRAFz9EgBuHhQAsVAVACqVFgDu7BcAI1kZAADbGgDPcxwA7SQeAM3vHwD11SEABtkjALj6JQDcPCgAYqEqAFMqLQDb2S8ARrIyAAC2NQCe5zgA2kk8AJnfPwDqq0MADLJHAHD1SwC5eVAAxEJVAKdUWgC3s18Ai2RlAABsawA8z3EAtZN4ADK/fwDUV4cAGWSPAN/qlwBy86AAh4WqAE6ptABuZ78AAAAAAAAAkD9LvzVBWoiQP/EuvYI+FZE/+cYzc9OmkT/Cbd0KQT2SPz3CnZaw2JI/6OpOw0x5kz/MBnmpQR+UP6x3bdm8ypQ/iFjJZ+17lT+aj2L6AzOWP1kIo9Uy8JY/RcBV6q2zlz9icOnjqn2YP/K9LDdhTpk/vf2HMQommj9UuLgI4QSbP+hAE+si65s/ZdVOEA/ZnD9S5ODK5s6dP2487JntzJ4/lRLJO2nTnz8nepXgUHGgP4H0dNBw/aA/Jxg65jqOoT9KHXfi1iOiPzJUg9htvqI/iSfCOSpeoz/DOUrhNwOkP+HQ7x/EraQ/jd61yP1dpT8+D6k9FRSmP99nKH080KY/mxefL6eSpz+UQrO1iluoP1Cq7TYeK6k/7TnesJoBqj9onsEGO9+qP7Y2rBE8xKs/+Ms+sdywrD8xqOncXaWtP3PIwrUCoq4/bBD0mBCnrz9OR2OZZ1qwP9UFKEnE5bA/ESbknsR1sT+5zMUjkAqyP4Ar6LFPpLI/mMyKfy1Dsz95c6gqVeezP4HB8MTzkLQ/E+gn4DdAtT/yze+aUfW1P3kq/q1ysLY/PjfDec5xtz+Wt4QUmjm4P3w18VgMCLk/KHQv9V3duT/qOm56ybm6PwC++GyLnbs/uQ/UVOKIvD93KerODny9P1pDx55Td74/cVnuwPV6vz9a8+Q+nkPAP4YEn744zsA/+rZwbXBdwT+GSnGdbPHBP56Sz+9VisI/8aD5X1Yowz81gCNPmcvDPwgpMJBLdMQ/NPb/c5sixT88+SfWuNbFP+esFSrVkMY/Z6GiiCNRxz9A3Bu+2BfIP/3FwFgr5cg/qaC9t1O5yT+Xo6UajJTKP3D8cLEQd8s/hBkDrR9hzD/Exj1Q+VLNP4HNpQHgTM4/DO+dXRhPzz+znZ6k9CzQPxj44gLOttA/3RthIj5F0T/xJmYebNjRP7jfg1+AcNI/j9SopqQN0z/2BpcYBLDTPxlIvEnLV9Q/JodvSigF1T/qbZazSrjVP17EtrNjcdY/vzF3HKYw1z9AEJNwRvbXP/UnRfJ6wtg/REYtsnuV2T/qyLSegm/aP2RW9pPLUNs/zCEtbJQ53D8RPbAQHSrdPzujfounIt4/DcxgGXgj3z+hYVKeahbgPyr0POiDn+A/otN4ji0t4T8mVNV1jr/hP7sRls7OVuI/VJp7Hxjz4j/aHypRlZTjP1lT8blyO+Q/b6X4Kd7n5D+RQ9P3BprlPyBGfw0eUuY/2KDT9VUQ5z+JhWDq4tTnP0wIxuH6n+g/G/WEntVx6T8J6E2+rErqPyzc0sm7Kus//ogfRUAS7D8LC33AeQHtP/R65emp+O0/gj0MnxT47j8AAAAAAADwPwAAAAAAAPA/cV31nuwA8D9UEpZL2QHwP8/o4gXGAvA/FavczbID8D9mI4SjnwTwPwoc2oaMBfA/WF/fd3kG8D+xt5R2ZgfwP4Pv+oJTCPA/RtESnUAJ8D9/J93ELQrwP7+8WvoaC/A/oFuMPQgM8D/MznKO9QzwP/XgDu3iDfA/2lxhWdAO8D9HDWvTvQ/wPxG9LFurEPA/HDen8JgR8D9VRtuThhLwP7W1yUR0E/A/QlBzA2IU8D8O4djPTxXwPzUz+6k9FvA/4BHbkSsX8D9ESHmHGRjwP5+h1ooHGfA/P+nzm/UZ8D966tG64xrwP7RwcefRG/A/XUfTIcAc8D/uOfhprh3wP+8T4b+cHvA/8qCOI4sf8D+UrAGVeSDwP4ECOxRoIfA/bW47oVYi8D8avAM8RSPwP1W3lOQzJPA/9yvvmiIl8D/k5RNfESbwPw6xAzEAJ/A/cFm/EO8n8D8Tq0f+3SjwPwpynfnMKfA/dXrBArwq8D+AkLQZqyvwP2GAdz6aLPA/XBYLcYkt8D+/HnCxeC7wP+Zlp/9nL/A/NrixW1cw8D8i4o/FRjHwPyewQj02MvA/0e7KwiUz8D+0ailWFTTwP3HwXvcENfA/t0xspvQ18D8/TFJj5DbwP8y7ES7UN/A/MWirBsQ48D9JHiDtsznwP/6qcOGjOvA/Q9ud45M78D8YfKjzgzzwP4pakRF0PfA/sUNZPWQ+8D+wBAF3VD/wP7Zqib5EQPA/AEPzEzVB8D/UWj93JULwP4V/bugVQ/A/cn6BZwZE8D8HJXn09kTwP7lAVo/nRfA/DJ8ZONhG8D+NDcTuyEfwP9hZVrO5SPA/klHRhapJ8D9twjVmm0rwPyh6hFSMS/A/jEa+UH1M8D9u9eNabk3wP7FU9nJfTvA/QjL2mFBP8D8aXOTMQVDwPz+gwQ4zUfA/wsyOXiRS8D/Ar0y8FVPwP2IX/CcHVPA/3NGdofhU8D9wrTIp6lXwP2t4u77bVvA/JQE5Ys1X8D8CFqwTv1jwP3SFFdOwWfA/9x12oKJa8D8Srs57lFvwP1sEIGWGXPA/ce9qXHhd8D8BPrBhal7wP8K+8HRcX/A/ekAtlk5g8D/3kWbFQGHwPxaCnQIzYvA/v9/STSVj8D/leQenF2TwP4kfPA4KZfA/tZ9xg/xl8D+CyagG72bwPxRs4pfhZ/A/mlYfN9Ro8D9PWGDkxmnwP3xApp+5avA/c97xaKxr8D+VAURAn2zwP015nSWSbfA/EhX/GIVu8D9opGkaeG/wP9723SlrcPA/ENxcR15x8D+lI+dyUXLwP1GdfaxEc/A/0xgh9Dd08D/2ZdJJK3XwP5NUkq0edvA/jLRhHxJ38D/RVUGfBXjwP10IMi35ePA/OZw0yex58D924Ulz4HrwPzaocivUe/A/o8Cv8cd88D/2+gHGu33wP3EnaqivfvA/ZRbpmKN/8D8smH+Xl4DwPzB9LqSLgfA/4pX2vn+C8D/Fstjnc4PwP2Kk1R5ohPA/UjvuY1yF8D86SCO3UIbwP8ibdRhFh/A/uQbmhzmI8D/WWXUFLonwP/JlJJEiivA/7fvzKheL8D+07OTSC4zwPz8J+IgAjfA/kyIuTfWN8D/ACYgf6o7wP+KPBgDfj/A/I4aq7tOQ8D+4vXTryJHwP+AHZva9kvA/6TV/D7OT8D8sGcE2qJTwPw2DLGydlfA/AEXCr5KW8D9/MIMBiJfwPxYXcGF9mPA/WcqJz3KZ8D/qG9FLaJrwP3fdRtZdm/A/ueDrblOc8D9398AVSZ3wP4Pzxso+nvA/u6b+jTSf8D8J42hfKqDwP2N6Bj8gofA/zT7YLBai8D9VAt8oDKPwPxWXGzMCpPA/Nc+OS/ik8D/pfDly7qXwP25yHKfkpvA/EYI46tqn8D8ofo470ajwPxk5H5vHqfA/U4XrCL6q8D9RNfSEtKvwP5wbOg+rrPA/yAq+p6Gt8D921YBOmK7wP1JOgwOPr/A/FkjGxoWw8D+GlUqYfLHwP3QJEXhzsvA/vHYaZmqz8D9JsGdiYbTwPw+J+WxYtfA/EtTQhU+28D9fZO6sRrfwPxENU+I9uPA/TqH/JTW58D9I9PR3LLrwPz/ZM9gju/A/fSO9Rhu88D9bppHDEr3wPzs1sk4KvvA/jqMf6AG/8D/OxNqP+b/wP4Vs5EXxwPA/R249CunB8D+0nebc4MLwP3rO4L3Yw/A/UNQsrdDE8D/9gsuqyMXwP1OuvbbAxvA/LioE0bjH8D95yp/5sMjwPypjkTCpyfA/Q8jZdaHK8D/UzXnJmcvwP/dHciuSzPA/1ArEm4rN8D+e6m8ag87wP5S7dqd7z/A/A1LZQnTQ8D9EgpjsbNHwP7ogtaRl0vA/1gEwa17T8D8W+glAV9TwPwLeQyNQ1fA/MoLeFEnW8D9Fu9oUQtfwP+xdOSM72PA/3z77PzTZ8D/mMiFrLdrwP9UOrKQm2/A/iaec7B/c8D/w0fNCGd3wPwBjsqcS3vA/vy/ZGgzf8D89DWmcBeDwP5bQYiz/4PA/9U7Hyvjh8D+NXZd38uLwP6LR0zLs4/A/gYB9/OXk8D+FP5XU3+XwPxXkG7vZ5vA/o0MSsNPn8D+wM3mzzejwP8aJUcXH6fA/fxuc5cHq8D9+vlkUvOvwP3RIi1G27PA/H48xnbDt8D9IaE33qu7wP8Wp31+l7/A/dynp1p/w8D9PvWpcmvHwP0U7ZfCU8vA/AAAAAAAA8D9jedmSj/PwP8DWx8Oa9fE/FbcxCv4G8z+Lco35oij0P17s8AiBW/U/zTt/Zp6g9j+wz2jXEPn3PzxuPaX+Zfk/rdNamZ/o+j8pwU4HPoL8P0MTEOc3NP4/AAAAAAAAAEBjedmSj/MAQMDWx8Oa9QFAFbcxCv4GA0CLco35oigEQF7s8AiBWwVAzTt/Zp6gBkCwz2jXEPkHQD1uPaX+ZQlArdNamZ/oCkApwU4HPoIMQEQTEOc3NA5AAAAAAAAAEEBjedmSj/MQQL/Wx8Oa9RFAFbcxCv4GE0CLco35oigUQF3s8AiBWxVAzTt/Zp6gFkCxz2jXEPkXQDxuPaX+ZRlArdNamZ/oGkAqwU4HPoIcQEMTEOc3NB5AAAAAAAAAIEBjedmSj/MgQL/Wx8Oa9SFAFbcxCv4GI0CLco35oigkQF3s8AiBWyVAzTt/Zp6gJkCxz2jXEPknQDxuPaX+ZSlArdNamZ/oKkAqwU4HPoIsQEMTEOc3NC5AAAAAAAAAMEBiedmSj/MwQMHWx8Oa9TFAFbcxCv4GM0CKco35oig0QF/s8AiBWzVAzTt/Zp6gNkCvz2jXEPk3QD5uPaX+ZTlArdNamZ/oOkAowU4HPoI8QEUTEOc3ND5AAAAAAAAAQEBiedmSj/NAQMHWx8Oa9UFAFbcxCv4GQ0CKco35oihEQF/s8AiBW0VAzTt/Zp6gRkCvz2jXEPlHQD5uPaX+ZUlArdNamZ/oSkAowU4HPoJMQEUTEOc3NE5AAAAAAAAAUEBiedmSj/NQQMHWx8Oa9VFAFbcxCv4GU0CKco35oihUQF/s8AiBW1VAzTt/Zp6gVkCvz2jXEPlXQD5uPaX+ZVlArdNamZ/oWkAowU4HPoJcQEUTEOc3NF5AAAAAAAAAYEBiedmSj/NgQMHWx8Oa9WFAFbcxCv4GY0CKco35oihkQF/s8AiBW2VAzTt/Zp6gZkCvz2jXEPlnQD5uPaX+ZWlArdNamZ/oakAowU4HPoJsQEUTEOc3NG5AAAAAAAAAcEBledmSj/NwQL7Wx8Oa9XFAFbcxCv4Gc0CNco35oih0QFzs8AiBW3VAzTt/Zp6gdkCzz2jXEPl3QDpuPaX+ZXlArdNamZ/oekAtwU4HPoJ8QEATEOc3NH5AAAAAAAAAgEBledmSj/OAQL7Wx8Oa9YFAFbcxCv4Gg0CNco35oiiEQFzs8AiBW4VAzTt/Zp6ghkCzz2jXEPmHQDpuPaX+ZYlArdNamZ/oikAtwU4HPoKMQEATEOc3NI5AAAAAAAAAkEBledmSj/OQQL7Wx8Oa9ZFAFbcxCv4Gk0CNco35oiiUQFzs8AiBW5VAzTt/Zp6glkCzz2jXEPmXQC0rICAgMFgweAAtMFgrMFggMFgtMHgrMHggMHgAbmFuAGluZgByd2EATkFOAElORgAuAChudWxsKQAAACAuAAARAAoAERERAAAAAAUAAAAAAAAJAAAAAAsAAAAAAAAAABEADwoREREDCgcAAQAJCwsAAAkGCwAACwAGEQAAABEREQAAAAAAAAAAAAAAAAAAAAALAAAAAAAAAAARAAoKERERAAoAAAIACQsAAAAJAAsAAAsAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADAAAAAAAAAAAAAAADAAAAAAMAAAAAAkMAAAAAAAMAAAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA4AAAAAAAAAAAAAAA0AAAAEDQAAAAAJDgAAAAAADgAADgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAPAAAAAA8AAAAACRAAAAAAABAAABAAABIAAAASEhIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEgAAABISEgAAAAAAAAkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAsAAAAAAAAAAAAAAAoAAAAACgAAAAAJCwAAAAAACwAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAMAAAAAAwAAAAACQwAAAAAAAwAAAwAADAxMjM0NTY3ODlBQkNERUYAAAAAAADwPwAAAAAAAPg/AAAAAAAAAAAG0M9D6/1MPgAAAAAAAAAAAAAAQAO44j8DAAAABAAAAAQAAAAGAAAAg/miAERObgD8KRUA0VcnAN009QBi28AAPJmVAEGQQwBjUf4Au96rALdhxQA6biQA0k1CAEkG4AAJ6i4AHJLRAOsd/gApsRwA6D6nAPU1ggBEuy4AnOmEALQmcABBfl8A1pE5AFODOQCc9DkAi1+EACj5vQD4HzsA3v+XAA+YBQARL+8AClqLAG0fbQDPfjYACcsnAEZPtwCeZj8ALepfALondQDl68cAPXvxAPc5BwCSUooA+2vqAB+xXwAIXY0AMANWAHv8RgDwq2sAILzPADb0mgDjqR0AXmGRAAgb5gCFmWUAoBRfAI1AaACA2P8AJ3NNAAYGMQDKVhUAyahzAHviYABrjMAAGcRHAM1nwwAJ6NwAWYMqAIt2xACmHJYARK/dABlX0QClPgUABQf/ADN+PwDCMugAmE/eALt9MgAmPcMAHmvvAJ/4XgA1HzoAf/LKAPGHHQB8kCEAaiR8ANVu+gAwLXcAFTtDALUUxgDDGZ0ArcTCACxNQQAMAF0Ahn1GAONxLQCbxpoAM2IAALTSfAC0p5cAN1XVANc+9gCjEBgATXb8AGSdKgBw16sAY3z4AHqwVwAXFecAwElWADvW2QCnhDgAJCPLANaKdwBaVCMAAB+5APEKGwAZzt8AnzH/AGYeagCZV2EArPtHAH5/2AAiZbcAMuiJAOa/YADvxM0AbDYJAF0/1AAW3tcAWDveAN6bkgDSIigAKIboAOJYTQDGyjIACOMWAOB9ywAXwFAA8x2nABjgWwAuEzQAgxJiAINIAQD1jlsArbB/AB7p8gBISkMAEGfTAKrd2ACuX0IAamHOAAoopADTmbQABqbyAFx3fwCjwoMAYTyIAIpzeACvjFoAb9e9AC2mYwD0v8sAjYHvACbBZwBVykUAytk2ACio0gDCYY0AEsl3AAQmFAASRpsAxFnEAMjFRABNspEAABfzANRDrQApSeUA/dUQAAC+/AAelMwAcM7uABM+9QDs8YAAs+fDAMf4KACTBZQAwXE+AC4JswALRfMAiBKcAKsgewAutZ8AR5LCAHsyLwAMVW0AcqeQAGvnHwAxy5YAeRZKAEF54gD034kA6JSXAOLmhACZMZcAiO1rAF9fNgC7/Q4ASJq0AGekbABxckIAjV0yAJ8VuAC85QkAjTElAPd0OQAwBRwADQwBAEsIaAAs7lgAR6qQAHTnAgC91iQA932mAG5IcgCfFu8AjpSmALSR9gDRU1EAzwryACCYMwD1S34AsmNoAN0+XwBAXQMAhYl/AFVSKQA3ZMAAbdgQADJIMgBbTHUATnHUAEVUbgALCcEAKvVpABRm1QAnB50AXQRQALQ72wDqdsUAh/kXAElrfQAdJ7oAlmkpAMbMrACtFFQAkOJqAIjZiQAsclAABKS+AHcHlADzMHAAAPwnAOpxqABmwkkAZOA9AJfdgwCjP5cAQ5T9AA2GjAAxQd4AkjmdAN1wjAAXt+cACN87ABU3KwBcgKAAWoCTABARkgAP6NgAbICvANv/SwA4kA8AWRh2AGKlFQBhy7sAx4m5ABBAvQDS8gQASXUnAOu29gDbIrsAChSqAIkmLwBkg3YACTszAA6UGgBROqoAHaPCAK/trgBcJhIAbcJNAC16nADAVpcAAz+DAAnw9gArQIwAbTGZADm0BwAMIBUA2MNbAPWSxADGrUsATsqlAKc3zQDmqTYAq5KUAN1CaAAZY94AdozvAGiLUgD82zcArqGrAN8VMQAArqEADPvaAGRNZgDtBbcAKWUwAFdWvwBH/zoAavm5AHW+8wAok98Aq4AwAGaM9gAEyxUA+iIGANnkHQA9s6QAVxuPADbNCQBOQukAE76kADMjtQDwqhoAT2WoANLBpQALPw8AW3jNACP5dgB7iwQAiRdyAMamUwBvbuIA7+sAAJtKWADE2rcAqma6AHbPzwDRAh0AsfEtAIyZwQDDrXcAhkjaAPddoADGgPQArPAvAN3smgA/XLwA0N5tAJDHHwAq27YAoyU6AACvmgCtU5MAtlcEACkttABLgH4A2genAHaqDgB7WaEAFhIqANy3LQD65f0Aidv+AIm+/QDkdmwABqn8AD6AcACFbhUA/Yf/ACg+BwBhZzMAKhiGAE296gCz568Aj21uAJVnOQAxv1sAhNdIADDfFgDHLUMAJWE1AMlwzgAwy7gAv2z9AKQAogAFbOQAWt2gACFvRwBiEtIAuVyEAHBhSQBrVuAAmVIBAFBVNwAe1bcAM/HEABNuXwBdMOQAhS6pAB2ywwChMjYACLekAOqx1AAW9yEAj2nkACf/dwAMA4AAjUAtAE/NoAAgpZkAs6LTAC9dCgC0+UIAEdrLAH2+0ACb28EAqxe9AMqigQAIalwALlUXACcAVQB/FPAA4QeGABQLZACWQY0Ah77eANr9KgBrJbYAe4k0AAXz/gC5v54AaGpPAEoqqABPxFoALfi8ANdamAD0x5UADU2NACA6pgCkV18AFD+xAIA4lQDMIAEAcd2GAMnetgC/YPUATWURAAEHawCMsKwAssDQAFFVSAAe+w4AlXLDAKMGOwDAQDUABtx7AOBFzABOKfoA1srIAOjzQQB8ZN4Am2TYANm+MQCkl8MAd1jUAGnjxQDw2hMAujo8AEYYRgBVdV8A0r31AG6SxgCsLl0ADkTtABw+QgBhxIcAKf3pAOfW8wAifMoAb5E1AAjgxQD/140AbmriALD9xgCTCMEAfF10AGutsgDNbp0APnJ7AMYRagD3z6kAKXPfALXJugC3AFEA4rINAHS6JADlfWAAdNiKAA0VLACBGAwAfmaUAAEpFgCfenYA/f2+AFZF7wDZfjYA7NkTAIu6uQDEl/wAMagnAPFuwwCUxTYA2KhWALSotQDPzA4AEoktAG9XNAAsVokAmc7jANYguQBrXqoAPiqcABFfzAD9C0oA4fT7AI47bQDihiwA6dSEAPy0qQDv7tEALjXJAC85YQA4IUQAG9nIAIH8CgD7SmoALxzYAFO0hABOmYwAVCLMACpV3ADAxtYACxmWABpwuABplWQAJlpgAD9S7gB/EQ8A9LURAPzL9QA0vC0ANLzuAOhdzADdXmAAZ46bAJIz7wDJF7gAYVibAOFXvABRg8YA2D4QAN1xSAAtHN0ArxihACEsRgBZ89cA2XqYAJ5UwABPhvoAVgb8AOV5rgCJIjYAOK0iAGeT3ABV6KoAgiY4AMrnmwBRDaQAmTOxAKnXDgBpBUgAZbLwAH+IpwCITJcA+dE2ACGSswB7gkoAmM8hAECf3ADcR1UA4XQ6AGfrQgD+nd8AXtRfAHtnpAC6rHoAVfaiACuIIwBBulUAWW4IACEqhgA5R4MAiePmAOWe1ABJ+0AA/1bpABwPygDFWYoAlPorANPBxQAPxc8A21quAEfFhgCFQ2IAIYY7ACx5lAAQYYcAKkx7AIAsGgBDvxIAiCaQAHg8iQCoxOQA5dt7AMQ6wgAm9OoA92eKAA2SvwBloysAPZOxAL18CwCkUdwAJ91jAGnh3QCalBkAqCmVAGjOKAAJ7bQARJ8gAE6YygBwgmMAfnwjAA+5MgCn9Y4AFFbnACHxCAC1nSoAb35NAKUZUQC1+asAgt/WAJbdYQAWNgIAxDqfAIOioQBy7W0AOY16AIK4qQBrMlwARidbAAA07QDSAHcA/PRVAAFZTQDgcYAAAAAAAAAAAAAAAABA+yH5PwAAAAAtRHQ+AAAAgJhG+DwAAABgUcx4OwAAAICDG/A5AAAAQCAlejgAAACAIoLjNgAAAAAd82k1mC8AAA==");
  base64DecodeToExistingUint8Array(bufferView, 11648, "AAQAAAAAAAAgoQcAAACAPwAA3EMAAAAAAAAAAAAAAAAAAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA/AACAPwAAgD8AAIA//////////////////////////////////////////////////////////////////////////////////////wUAAAAAAAAAAAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAkAAAAKAAAAiDcAAAAAAAAAAAAAAAAAAAIAAAAAAAAAAAAAAAAAAP//////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAALQ3AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA0D1QAAAAAAAFAAAAAAAAAAAAAAAOAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJAAAADwAAAMg5AAAABAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAK/////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACYLwAA");
  base64DecodeToExistingUint8Array(bufferView
}

  var scratchBuffer = new ArrayBuffer(16);
  var i32ScratchView = new Int32Array(scratchBuffer);
  var f32ScratchView = new Float32Array(scratchBuffer);
  var f64ScratchView = new Float64Array(scratchBuffer);
  
  function wasm2js_scratch_load_i32(index) {
    return i32ScratchView[index];
  }
      
  function wasm2js_scratch_store_i32(index, value) {
    i32ScratchView[index] = value;
  }
      
  function wasm2js_scratch_load_f64() {
    return f64ScratchView[0];
  }
      
  function wasm2js_scratch_store_f64(value) {
    f64ScratchView[0] = value;
  }
      
  function wasm2js_scratch_load_f32() {
    return f32ScratchView[2];
  }
      
function asmFunc(env) {
 var memory = env.memory;
 var buffer = memory.buffer;
 var HEAP8 = new Int8Array(buffer);
 var HEAP16 = new Int16Array(buffer);
 var HEAP32 = new Int32Array(buffer);
 var HEAPU8 = new Uint8Array(buffer);
 var HEAPU16 = new Uint16Array(buffer);
 var HEAPU32 = new Uint32Array(buffer);
 var HEAPF32 = new Float32Array(buffer);
 var HEAPF64 = new Float64Array(buffer);
 var Math_imul = Math.imul;
 var Math_fround = Math.fround;
 var Math_abs = Math.abs;
 var Math_clz32 = Math.clz32;
 var Math_min = Math.min;
 var Math_max = Math.max;
 var Math_floor = Math.floor;
 var Math_ceil = Math.ceil;
 var Math_trunc = Math.trunc;
 var Math_sqrt = Math.sqrt;
 var abort = env.abort;
 var nan = NaN;
 var infinity = Infinity;
 var fimport$0 = env.__sys_open;
 var fimport$1 = env.fd_close;
 var fimport$2 = env.fd_write;
 var fimport$3 = env.__sys_fcntl64;
 var fimport$4 = env.__sys_ioctl;
 var fimport$5 = env.fd_read;
 var fimport$6 = env.emscripten_resize_heap;
 var fimport$7 = env.emscripten_memcpy_big;
 var fimport$8 = env.setTempRet0;
 var fimport$9 = env.fd_seek;
 var global$0 = 5258704;
 var global$1 = 0;
 var global$2 = 0;
 var global$3 = 0;
 var global$4 = 12384;
 var global$5 = 4096;
 var global$6 = 8252;
 var global$7 = 5120;
 var global$8 = 7168;
 var global$9 = 3584;
 var global$10 = 1;
 var global$11 = 3;
 var global$12 = 4;
 var global$13 = 5;
 var global$14 = 6;
 var global$15 = 7;
 var __wasm_intrinsics_temp_i64 = 0;
 var __wasm_intrinsics_temp_i64$hi = 0;
 var i64toi32_i32$HIGH_BITS = 0;
 // EMSCRIPTEN_START_FUNCS
;
 function $0() {
  $191();
 }
 
 function $1($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0, $36_1 = 0, $74_1 = 0, $107_1 = 0, $118_1 = 0;
  $3_1 = global$0 - 1056 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 1048 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[($3_1 + 1048 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     if (((HEAPU8[(HEAP32[($3_1 + 1048 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
      break label$2
     }
    }
    HEAP32[($3_1 + 1052 | 0) >> 2] = 0;
    break label$1;
   }
   $26_1 = $112(HEAP32[($3_1 + 1048 | 0) >> 2] | 0 | 0, global$3 + 1034 | 0 | 0) | 0;
   HEAP32[($3_1 + 1044 | 0) >> 2] = $26_1;
   label$4 : {
    if (!(($26_1 | 0) != (0 | 0) & 1 | 0)) {
     break label$4
    }
    HEAP32[($3_1 + 1052 | 0) >> 2] = HEAP32[($3_1 + 1044 | 0) >> 2] | 0;
    break label$1;
   }
   $36_1 = 24;
   label$5 : {
    if (!((((HEAPU8[(HEAP32[($3_1 + 1048 | 0) >> 2] | 0) >> 0] | 0) << $36_1 | 0) >> $36_1 | 0 | 0) != (47 | 0) & 1 | 0)) {
     break label$5
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[(global$3 + 12336 | 0) >> 2] | 0;
    label$6 : {
     label$7 : while (1) {
      if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP8[($3_1 + 16 | 0) >> 0] = 0;
      HEAP32[($3_1 + 8 | 0) >> 2] = $208(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
      label$8 : {
       if (!(HEAP32[($3_1 + 8 | 0) >> 2] | 0)) {
        break label$8
       }
       $169($3_1 + 16 | 0 | 0, HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
       $74_1 = 24;
       label$9 : {
        if (!((((HEAPU8[(($3_1 + 16 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) - 1 | 0) | 0) >> 0] | 0) << $74_1 | 0) >> $74_1 | 0 | 0) != (47 | 0) & 1 | 0)) {
         break label$9
        }
        HEAP8[(($3_1 + 16 | 0) + (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0) >> 0] = 47;
        HEAP8[(($3_1 + 16 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0) | 0) >> 0] = 0;
       }
      }
      $171($3_1 + 16 | 0 | 0, HEAP32[($3_1 + 1048 | 0) >> 2] | 0 | 0) | 0;
      $107_1 = $112($3_1 + 16 | 0 | 0, global$3 + 1034 | 0 | 0) | 0;
      HEAP32[($3_1 + 1044 | 0) >> 2] = $107_1;
      label$10 : {
       if (!(($107_1 | 0) != (0 | 0) & 1 | 0)) {
        break label$10
       }
       HEAP32[($3_1 + 1052 | 0) >> 2] = HEAP32[($3_1 + 1044 | 0) >> 2] | 0;
       break label$1;
      }
      HEAP32[($3_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      continue label$7;
     };
    }
   }
   HEAP32[($3_1 + 1052 | 0) >> 2] = 0;
  }
  $118_1 = HEAP32[($3_1 + 1052 | 0) >> 2] | 0;
  global$0 = $3_1 + 1056 | 0;
  return $118_1 | 0;
 }
 
 function $2($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $13_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $194(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
    break label$1
   }
  }
  $13_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $13_1 | 0;
 }
 
 function $3($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $33_1 = 0, $17_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = $2(8 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    break label$1;
   }
   $17_1 = $2(($208(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) | 0;
   HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] = $17_1;
   label$3 : {
    if (!((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$3
    }
    $195(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   $169(HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   $33_1 = global$3 + 12336 | 0;
   HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[$33_1 >> 2] | 0;
   HEAP32[$33_1 >> 2] = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $4() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[(global$3 + 12336 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
    $195(HEAP32[(HEAP32[($2_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
    $195(HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
    continue label$2;
   };
  }
  HEAP32[(global$3 + 12336 | 0) >> 2] = 0;
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $5($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1, $7_1, $8_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  $7_1 = $7_1 | 0;
  $8_1 = $8_1 | 0;
  var $11_1 = 0, $692 = 0, $22_1 = 0, $80_1 = 0, $127_1 = 0, $137_1 = 0, $142_1 = 0, $152_1 = 0, $159_1 = 0, $185_1 = 0, $317 = 0, $334 = 0, $443 = 0, $473 = 0, $492 = 0, $511 = 0, $524 = 0, $539 = 0, $548 = 0, $560 = 0, $643 = 0, $644 = 0, $647 = 0, $657 = 0, $665 = 0, $669 = 0, $673 = 0, $689 = 0, $696 = 0, $727 = 0, $733 = 0, $755 = 0, $758 = 0, $763 = 0, $773 = 0, $779 = 0, $783 = 0, $794 = 0, $798 = 0, $802 = 0, $806 = 0, $810 = 0, $814 = 0, $825 = 0, $837 = 0, $842 = 0, $167_1 = 0, $389 = 0, $395 = 0, $427 = 0, $435 = 0, $583 = 0, $601 = 0, $614 = 0, $656 = 0, $890 = 0;
  $11_1 = global$0 - 2192 | 0;
  global$0 = $11_1;
  HEAP32[($11_1 + 2184 | 0) >> 2] = $0_1;
  HEAP32[($11_1 + 2180 | 0) >> 2] = $1_1;
  HEAP32[($11_1 + 2176 | 0) >> 2] = $2_1;
  HEAP32[($11_1 + 2172 | 0) >> 2] = $3_1;
  HEAP32[($11_1 + 2168 | 0) >> 2] = $4_1;
  HEAP32[($11_1 + 2164 | 0) >> 2] = $5_1;
  HEAP32[($11_1 + 2160 | 0) >> 2] = $6_1;
  HEAP32[($11_1 + 2156 | 0) >> 2] = $7_1;
  HEAP32[($11_1 + 2152 | 0) >> 2] = $8_1;
  HEAP32[($11_1 + 1092 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if ((HEAP32[($11_1 + 2180 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($11_1 + 2188 | 0) >> 2] = 0;
    break label$1;
   }
   $22_1 = $1(HEAP32[($11_1 + 2180 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($11_1 + 2140 | 0) >> 2] = $22_1;
   label$3 : {
    if (!(($22_1 | 0) == (0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($11_1 + 1092 | 0) >> 2] = 1;
    HEAP32[($11_1 + 1100 | 0) >> 2] = 0;
    label$4 : {
     label$5 : while (1) {
      if (!((HEAP32[((global$3 + 11648 | 0) + ((HEAP32[($11_1 + 1100 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      label$6 : {
       if (!((($208(HEAP32[($11_1 + 2180 | 0) >> 2] | 0 | 0) | 0) + ($208(HEAP32[((global$3 + 11648 | 0) + ((HEAP32[($11_1 + 1100 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0) | 0) >>> 0 < 1024 >>> 0 & 1 | 0)) {
        break label$6
       }
       $169($11_1 + 1104 | 0 | 0, HEAP32[($11_1 + 2180 | 0) >> 2] | 0 | 0) | 0;
       $171($11_1 + 1104 | 0 | 0, HEAP32[((global$3 + 11648 | 0) + ((HEAP32[($11_1 + 1100 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
       $80_1 = $1($11_1 + 1104 | 0 | 0) | 0;
       HEAP32[($11_1 + 2140 | 0) >> 2] = $80_1;
       label$7 : {
        if (!(($80_1 | 0) != (0 | 0) & 1 | 0)) {
         break label$7
        }
        HEAP32[($11_1 + 1092 | 0) >> 2] = 0;
        HEAP32[($11_1 + 2180 | 0) >> 2] = $11_1 + 1104 | 0;
        break label$4;
       }
      }
      HEAP32[($11_1 + 1100 | 0) >> 2] = (HEAP32[($11_1 + 1100 | 0) >> 2] | 0) + 1 | 0;
      continue label$5;
     };
    }
   }
   label$8 : {
    if (!(HEAP32[($11_1 + 1092 | 0) >> 2] | 0)) {
     break label$8
    }
    HEAP32[($11_1 + 2188 | 0) >> 2] = 0;
    break label$1;
   }
   label$9 : {
    label$10 : {
     if ((239 | 0) != ($122($11_1 + 1104 | 0 | 0, 1 | 0, 239 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0) {
      break label$10
     }
     if (!($159($11_1 + 1104 | 0 | 0, global$3 + 1100 | 0 | 0, 22 | 0) | 0)) {
      break label$9
     }
     if (!($159($11_1 + 1104 | 0 | 0, global$3 + 1175 | 0 | 0, 22 | 0) | 0)) {
      break label$9
     }
    }
    HEAP32[($11_1 + 2188 | 0) >> 2] = 0;
    break label$1;
   }
   $127_1 = 24;
   label$11 : {
    if (!((((HEAPU8[($11_1 + 1186 | 0) >> 0] | 0) << $127_1 | 0) >> $127_1 | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$11
    }
    $137_1 = 24;
    if (!(((HEAPU8[($11_1 + 1186 | 0) >> 0] | 0) << $137_1 | 0) >> $137_1 | 0)) {
     break label$11
    }
    HEAP32[($11_1 + 2188 | 0) >> 2] = 0;
    break label$1;
   }
   $142_1 = 24;
   label$12 : {
    if (!((((HEAPU8[($11_1 + 1255 | 0) >> 0] | 0) << $142_1 | 0) >> $142_1 | 0 | 0) != (1 | 0) & 1 | 0)) {
     break label$12
    }
    $152_1 = 24;
    if (!(((HEAPU8[($11_1 + 1255 | 0) >> 0] | 0) << $152_1 | 0) >> $152_1 | 0)) {
     break label$12
    }
    HEAP32[($11_1 + 2188 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($11_1 + 2148 | 0) >> 2] = $2(8 | 0) | 0;
   $159_1 = 24;
   HEAP32[(HEAP32[($11_1 + 2148 | 0) >> 2] | 0) >> 2] = ((HEAPU8[($11_1 + 1302 | 0) >> 0] | 0) << $159_1 | 0) >> $159_1 | 0;
   $167_1 = $2(Math_imul(HEAP32[(HEAP32[($11_1 + 2148 | 0) >> 2] | 0) >> 2] | 0, 116) | 0) | 0;
   HEAP32[((HEAP32[($11_1 + 2148 | 0) >> 2] | 0) + 4 | 0) >> 2] = $167_1;
   HEAP32[($11_1 + 1100 | 0) >> 2] = 0;
   label$13 : {
    label$14 : {
     label$15 : while (1) {
      if (!((HEAP32[($11_1 + 1100 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($11_1 + 2148 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$14
      }
      $115(HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0, 7 | 0, 1 | 0) | 0;
      $185_1 = 1;
      label$16 : {
       if (!((1 | 0) != ($122($11_1 + 63 | 0 | 0, $185_1 | 0, $185_1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$16
       }
       break label$13;
      }
      HEAP32[($11_1 + 2144 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 2148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 1100 | 0) >> 2] | 0, 116) | 0;
      label$17 : {
       if (!((1 | 0) != ($122($11_1 + 56 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$17
       }
       break label$13;
      }
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($11_1 + 56 | 0) >> 2] | 0;
      label$18 : {
       if (!((1 | 0) != ($122($11_1 + 56 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$18
       }
       break label$13;
      }
      HEAP32[(HEAP32[($11_1 + 2144 | 0) >> 2] | 0) >> 2] = HEAP32[($11_1 + 56 | 0) >> 2] | 0;
      label$19 : {
       if (!((1 | 0) != ($122($11_1 + 56 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$19
       }
       break label$13;
      }
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($11_1 + 56 | 0) >> 2] | 0;
      label$20 : {
       if (!((1 | 0) != ($122($11_1 + 54 | 0 | 0, 2 | 0, 1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$20
       }
       break label$13;
      }
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 12 | 0) >> 2] = (HEAPU16[($11_1 + 54 | 0) >> 1] | 0) & 65535 | 0;
      label$21 : {
       if (!((1 | 0) != ($122($11_1 + 56 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$21
       }
       break label$13;
      }
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($11_1 + 56 | 0) >> 2] | 0;
      label$22 : {
       if (!((1 | 0) != ($122($11_1 + 56 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$22
       }
       break label$13;
      }
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($11_1 + 56 | 0) >> 2] | 0;
      label$23 : {
       if (!((1 | 0) != ($122($11_1 + 56 | 0 | 0, 4 | 0, 1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$23
       }
       break label$13;
      }
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($11_1 + 56 | 0) >> 2] | 0;
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 16 | 0) >> 2] = 0;
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 20 | 0) >> 2] = 127;
      $115(HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0, 2 | 0, 1 | 0) | 0;
      $317 = 1;
      label$24 : {
       if (!((1 | 0) != ($122($11_1 + 53 | 0 | 0, $317 | 0, $317 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$24
       }
       break label$13;
      }
      HEAP8[($11_1 + 1104 | 0) >> 0] = HEAPU8[($11_1 + 53 | 0) >> 0] | 0;
      label$25 : {
       label$26 : {
        if (!((HEAP32[($11_1 + 2172 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
         break label$26
        }
        $334 = 24;
        HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 111 | 0) >> 0] = (((((HEAPU8[($11_1 + 1104 | 0) >> 0] | 0) << $334 | 0) >> $334 | 0) << 3 | 0) + 4 | 0) & 127 | 0;
        break label$25;
       }
       HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 111 | 0) >> 0] = (HEAP32[($11_1 + 2172 | 0) >> 2] | 0) & 127 | 0;
      }
      label$27 : {
       if (!((18 | 0) != ($122($11_1 + 1104 | 0 | 0, 1 | 0, 18 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$27
       }
       break label$13;
      }
      label$28 : {
       label$29 : {
        label$30 : {
         if (!(((HEAPU8[($11_1 + 1117 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break label$30
         }
         if (((HEAPU8[($11_1 + 1118 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
          break label$29
         }
        }
        HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 108 | 0) >> 0] = 0;
        HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 96 | 0) >> 2] = 0;
        HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 92 | 0) >> 2] = 0;
        break label$28;
       }
       $389 = $6(HEAP32[($11_1 + 2184 | 0) >> 2] | 0 | 0, (HEAPU8[($11_1 + 1116 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
       HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 92 | 0) >> 2] = $389;
       $395 = $7(HEAP32[($11_1 + 2184 | 0) >> 2] | 0 | 0, (HEAPU8[($11_1 + 1117 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
       HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 96 | 0) >> 2] = $395;
       HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 108 | 0) >> 0] = HEAPU8[($11_1 + 1118 | 0) >> 0] | 0;
      }
      label$31 : {
       label$32 : {
        label$33 : {
         if (!(((HEAPU8[($11_1 + 1120 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
          break label$33
         }
         if (((HEAPU8[($11_1 + 1121 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
          break label$32
         }
        }
        HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 109 | 0) >> 0] = 0;
        HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 104 | 0) >> 2] = 0;
        HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 100 | 0) >> 2] = 0;
        break label$31;
       }
       $427 = $8(HEAP32[($11_1 + 2184 | 0) >> 2] | 0 | 0, (HEAPU8[($11_1 + 1120 | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
       HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 104 | 0) >> 2] = $427;
       $435 = $9(HEAP32[($11_1 + 2184 | 0) >> 2] | 0 | 0, (HEAPU8[($11_1 + 1119 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 104 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 100 | 0) >> 2] = $435;
       HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 109 | 0) >> 0] = HEAPU8[($11_1 + 1121 | 0) >> 0] | 0;
      }
      $443 = 1;
      label$34 : {
       if (!((1 | 0) != ($122($11_1 + 53 | 0 | 0, $443 | 0, $443 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$34
       }
       break label$13;
      }
      HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] = HEAPU8[($11_1 + 53 | 0) >> 0] | 0;
      $115(HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0, 40 | 0, 1 | 0) | 0;
      label$35 : {
       label$36 : {
        if (!((HEAP32[($11_1 + 2164 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
         break label$36
        }
        HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 112 | 0) >> 0] = HEAP32[($11_1 + 2164 | 0) >> 2] | 0;
        break label$35;
       }
       HEAP8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 112 | 0) >> 0] = 0;
      }
      label$37 : {
       if (!(((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 4 | 0)) {
        break label$37
       }
       $473 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
       HEAP8[($473 + 110 | 0) >> 0] = (HEAPU8[($473 + 110 | 0) >> 0] | 0) & 255 | 0 | 32 | 0;
      }
      label$38 : {
       if (!((HEAP32[($11_1 + 2160 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$38
       }
       if (!(((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 60 | 0)) {
        break label$38
       }
       $492 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
       HEAP8[($492 + 110 | 0) >> 0] = ((HEAPU8[($492 + 110 | 0) >> 0] | 0) & 255 | 0) & -61 | 0;
      }
      label$39 : {
       label$40 : {
        if (!((HEAP32[($11_1 + 2156 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$40
        }
        label$41 : {
         if (!(((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 64 | 0)) {
          break label$41
         }
        }
        $511 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
        HEAP8[($511 + 110 | 0) >> 0] = ((HEAPU8[($511 + 110 | 0) >> 0] | 0) & 255 | 0) & -65 | 0;
        break label$39;
       }
       label$42 : {
        if (!(HEAP32[($11_1 + 2156 | 0) >> 2] | 0)) {
         break label$42
        }
        label$43 : {
         label$44 : {
          if (((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 28 | 0) {
           break label$44
          }
          $524 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
          HEAP8[($524 + 110 | 0) >> 0] = ((HEAPU8[($524 + 110 | 0) >> 0] | 0) & 255 | 0) & -97 | 0;
          break label$43;
         }
         label$45 : {
          label$46 : {
           label$47 : {
            if (!($159($11_1 + 1104 | 0 | 0, global$3 + 1252 | 0 | 0, 6 | 0) | 0)) {
             break label$47
            }
            $539 = 24;
            if (!((((HEAPU8[($11_1 + 1115 | 0) >> 0] | 0) << $539 | 0) >> $539 | 0 | 0) >= (100 | 0) & 1 | 0)) {
             break label$46
            }
           }
           $548 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
           HEAP8[($548 + 110 | 0) >> 0] = ((HEAPU8[($548 + 110 | 0) >> 0] | 0) & 255 | 0) & -65 | 0;
           break label$45;
          }
          label$48 : {
           if (((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 32 | 0) {
            break label$48
           }
           $560 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
           HEAP8[($560 + 110 | 0) >> 0] = ((HEAPU8[($560 + 110 | 0) >> 0] | 0) & 255 | 0) & -65 | 0;
          }
         }
        }
       }
      }
      HEAP32[($11_1 + 1096 | 0) >> 2] = 0;
      label$49 : {
       label$50 : while (1) {
        if (!((HEAP32[($11_1 + 1096 | 0) >> 2] | 0 | 0) < (6 | 0) & 1 | 0)) {
         break label$49
        }
        $583 = $10(HEAP32[($11_1 + 2184 | 0) >> 2] | 0 | 0, (HEAPU8[(($11_1 + 1104 | 0) + (HEAP32[($11_1 + 1096 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
        HEAP32[(((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 36 | 0) + ((HEAP32[($11_1 + 1096 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $583;
        $601 = $11((HEAPU8[(($11_1 + 1104 | 0) + ((HEAP32[($11_1 + 1096 | 0) >> 2] | 0) + 6 | 0) | 0) >> 0] | 0) & 255 | 0 | 0) | 0;
        HEAP32[(((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 60 | 0) + ((HEAP32[($11_1 + 1096 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $601;
        HEAP32[($11_1 + 1096 | 0) >> 2] = (HEAP32[($11_1 + 1096 | 0) >> 2] | 0) + 1 | 0;
        continue label$50;
       };
      }
      $614 = $2(HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
      HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 88 | 0) >> 2] = $614;
      label$51 : {
       if (!((1 | 0) != ($122(HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
        break label$51
       }
       break label$13;
      }
      label$52 : {
       if (((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 1 | 0) {
        break label$52
       }
       HEAP32[($11_1 + 48 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
       HEAP32[($11_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
       $643 = $2((HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) << 1 | 0 | 0) | 0;
       HEAP32[($11_1 + 36 | 0) >> 2] = $643;
       HEAP32[($11_1 + 40 | 0) >> 2] = $643;
       label$53 : {
        label$54 : while (1) {
         $644 = HEAP32[($11_1 + 48 | 0) >> 2] | 0;
         HEAP32[($11_1 + 48 | 0) >> 2] = $644 + -1 | 0;
         if (!$644) {
          break label$53
         }
         $647 = HEAP32[($11_1 + 44 | 0) >> 2] | 0;
         HEAP32[($11_1 + 44 | 0) >> 2] = $647 + 1 | 0;
         $656 = (((HEAPU8[$647 >> 0] | 0) & 255 | 0) & 65535 | 0) << 8 | 0;
         $657 = HEAP32[($11_1 + 40 | 0) >> 2] | 0;
         HEAP32[($11_1 + 40 | 0) >> 2] = $657 + 2 | 0;
         HEAP16[$657 >> 1] = $656;
         continue label$54;
        };
       }
       HEAP32[($11_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
       HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 88 | 0) >> 2] = HEAP32[($11_1 + 36 | 0) >> 2] | 0;
       $195(HEAP32[($11_1 + 44 | 0) >> 2] | 0 | 0);
       $665 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
       HEAP32[($665 + 8 | 0) >> 2] = (HEAP32[($665 + 8 | 0) >> 2] | 0) << 1 | 0;
       $669 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
       HEAP32[$669 >> 2] = (HEAP32[$669 >> 2] | 0) << 1 | 0;
       $673 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
       HEAP32[($673 + 4 | 0) >> 2] = (HEAP32[($673 + 4 | 0) >> 2] | 0) << 1 | 0;
      }
      label$55 : {
       if (!(((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 2 | 0)) {
        break label$55
       }
       HEAP32[($11_1 + 32 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
       HEAP32[($11_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
       label$56 : {
        label$57 : while (1) {
         $689 = HEAP32[($11_1 + 32 | 0) >> 2] | 0;
         HEAP32[($11_1 + 32 | 0) >> 2] = $689 + -1 | 0;
         if (!$689) {
          break label$56
         }
         $692 = HEAP32[($11_1 + 28 | 0) >> 2] | 0;
         HEAP32[($11_1 + 28 | 0) >> 2] = $692 + 2 | 0;
         $696 = 16;
         HEAP16[$692 >> 1] = (((HEAPU16[$692 >> 1] | 0) << $696 | 0) >> $696 | 0) ^ 32768 | 0;
         continue label$57;
        };
       }
      }
      label$58 : {
       if (!(((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 16 | 0)) {
        break label$58
       }
       $12(HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0, 0 | 0, (HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) / (2 | 0) | 0 | 0);
       HEAP32[($11_1 + 24 | 0) >> 2] = HEAP32[(HEAP32[($11_1 + 2144 | 0) >> 2] | 0) >> 2] | 0;
       HEAP32[(HEAP32[($11_1 + 2144 | 0) >> 2] | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0;
       HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[($11_1 + 24 | 0) >> 2] | 0) | 0;
       $727 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
       HEAP8[($727 + 110 | 0) >> 0] = ((HEAPU8[($727 + 110 | 0) >> 0] | 0) & 255 | 0) & -17 | 0;
       $733 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
       HEAP8[($733 + 110 | 0) >> 0] = (HEAPU8[($733 + 110 | 0) >> 0] | 0) & 255 | 0 | 4 | 0;
      }
      label$59 : {
       label$60 : {
        if (!((HEAP32[($11_1 + 2168 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
         break label$60
        }
        HEAPF32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 84 | 0) >> 2] = Math_fround(+(HEAP32[($11_1 + 2168 | 0) >> 2] | 0 | 0) / 100.0);
        break label$59;
       }
       HEAP32[($11_1 + 20 | 0) >> 2] = (HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
       HEAP16[($11_1 + 18 | 0) >> 1] = 0;
       HEAP32[($11_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
       label$61 : {
        label$62 : while (1) {
         $755 = HEAP32[($11_1 + 20 | 0) >> 2] | 0;
         HEAP32[($11_1 + 20 | 0) >> 2] = $755 + -1 | 0;
         if (!$755) {
          break label$61
         }
         $758 = HEAP32[($11_1 + 12 | 0) >> 2] | 0;
         HEAP32[($11_1 + 12 | 0) >> 2] = $758 + 2 | 0;
         HEAP16[($11_1 + 16 | 0) >> 1] = HEAPU16[$758 >> 1] | 0;
         $763 = 16;
         label$63 : {
          if (!((((HEAPU16[($11_1 + 16 | 0) >> 1] | 0) << $763 | 0) >> $763 | 0 | 0) < (0 | 0) & 1 | 0)) {
           break label$63
          }
          $773 = 16;
          HEAP16[($11_1 + 16 | 0) >> 1] = 0 - (((HEAPU16[($11_1 + 16 | 0) >> 1] | 0) << $773 | 0) >> $773 | 0) | 0;
         }
         $779 = 16;
         $783 = 16;
         label$64 : {
          if (!((((HEAPU16[($11_1 + 16 | 0) >> 1] | 0) << $779 | 0) >> $779 | 0 | 0) > (((HEAPU16[($11_1 + 18 | 0) >> 1] | 0) << $783 | 0) >> $783 | 0 | 0) & 1 | 0)) {
           break label$64
          }
          HEAP16[($11_1 + 18 | 0) >> 1] = HEAPU16[($11_1 + 16 | 0) >> 1] | 0;
         }
         continue label$62;
        };
       }
       HEAPF32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 84 | 0) >> 2] = Math_fround(32768.0 / +(HEAP16[($11_1 + 18 | 0) >> 1] | 0 | 0));
      }
      $794 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
      HEAP32[($794 + 8 | 0) >> 2] = (HEAP32[($794 + 8 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
      $798 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
      HEAP32[$798 >> 2] = (HEAP32[$798 >> 2] | 0 | 0) / (2 | 0) | 0;
      $802 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
      HEAP32[($802 + 4 | 0) >> 2] = (HEAP32[($802 + 4 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
      $806 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
      HEAP32[($806 + 8 | 0) >> 2] = (HEAP32[($806 + 8 | 0) >> 2] | 0) << 12 | 0;
      $810 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
      HEAP32[$810 >> 2] = (HEAP32[$810 >> 2] | 0) << 12 | 0;
      $814 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
      HEAP32[($814 + 4 | 0) >> 2] = (HEAP32[($814 + 4 | 0) >> 2] | 0) << 12 | 0;
      $825 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
      HEAP32[$825 >> 2] = HEAP32[$825 >> 2] | 0 | ((((HEAPU8[($11_1 + 63 | 0) >> 0] | 0) & 255 | 0) & 15 | 0) << 8 | 0) | 0;
      $837 = HEAP32[($11_1 + 2144 | 0) >> 2] | 0;
      HEAP32[($837 + 4 | 0) >> 2] = HEAP32[($837 + 4 | 0) >> 2] | 0 | (((((HEAPU8[($11_1 + 63 | 0) >> 0] | 0) & 255 | 0) >> 4 | 0) & 15 | 0) << 8 | 0) | 0;
      $842 = 24;
      label$65 : {
       if (!(((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 112 | 0) >> 0] | 0) << $842 | 0) >> $842 | 0)) {
        break label$65
       }
       if (((HEAPU8[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 4 | 0) {
        break label$65
       }
       $95(HEAP32[($11_1 + 2184 | 0) >> 2] | 0 | 0, HEAP32[($11_1 + 2144 | 0) >> 2] | 0 | 0);
      }
      label$66 : {
       if (!((HEAP32[($11_1 + 2152 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
        break label$66
       }
       HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[((HEAP32[($11_1 + 2144 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
      }
      HEAP32[($11_1 + 1100 | 0) >> 2] = (HEAP32[($11_1 + 1100 | 0) >> 2] | 0) + 1 | 0;
      continue label$15;
     };
    }
    $119(HEAP32[($11_1 + 2140 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($11_1 + 2188 | 0) >> 2] = HEAP32[($11_1 + 2148 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($11_1 + 1096 | 0) >> 2] = 0;
   label$67 : {
    label$68 : while (1) {
     if (!((HEAP32[($11_1 + 1096 | 0) >> 2] | 0 | 0) < (HEAP32[($11_1 + 1100 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$67
     }
     $195(HEAP32[(((HEAP32[((HEAP32[($11_1 + 2148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($11_1 + 1096 | 0) >> 2] | 0, 116) | 0) + 88 | 0) >> 2] | 0 | 0);
     HEAP32[($11_1 + 1096 | 0) >> 2] = (HEAP32[($11_1 + 1096 | 0) >> 2] | 0) + 1 | 0;
     continue label$68;
    };
   }
   $195(HEAP32[((HEAP32[($11_1 + 2148 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   $195(HEAP32[($11_1 + 2148 | 0) >> 2] | 0 | 0);
   HEAP32[($11_1 + 2188 | 0) >> 2] = 0;
  }
  $890 = HEAP32[($11_1 + 2188 | 0) >> 2] | 0;
  global$0 = $11_1 + 2192 | 0;
  return $890 | 0;
 }
 
 function $6($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 7 | 0) >> 0] = $1_1;
  label$1 : {
   label$2 : {
    if (((HEAPU8[($4_1 + 7 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = (Math_imul(HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0, 38) << 16 | 0 | 0) / (Math_imul(HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, (HEAPU8[($4_1 + 7 | 0) >> 0] | 0) & 255 | 0) | 0) | 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $7($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  return (Math_imul((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0) << 10 | 0, (HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 255 | 0) << 5 | 0 | 0) / (Math_imul(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 38) | 0) | 0 | 0;
 }
 
 function $8($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  return (Math_imul(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, 38) | 0) / ((((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 255 | 0) << 1 | 0) << 5 | 0 | 0) | 0 | 0;
 }
 
 function $9($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $37_1 = 0.0, $26_1 = 0;
  $5_1 = global$0 - 16 | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = $0_1;
  HEAP8[($5_1 + 7 | 0) >> 0] = $1_1;
  HEAP32[$5_1 >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (((HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    break label$1;
   }
   $37_1 = +Math_fround(+(HEAP32[$5_1 >> 2] | 0 | 0) * 38.0 * 65536.0) / +(Math_imul(HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0, (HEAPU8[($5_1 + 7 | 0) >> 0] | 0) & 255 | 0) | 0);
   label$3 : {
    label$4 : {
     if (!(Math_abs($37_1) < 2147483648.0)) {
      break label$4
     }
     $26_1 = ~~$37_1;
     break label$3;
    }
    $26_1 = -2147483648;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $26_1;
  }
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $10($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP8[($4_1 + 11 | 0) >> 0] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = 3 - ((((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 255 | 0) >> 6 | 0) & 3 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 3);
  HEAP32[($4_1 + 4 | 0) >> 2] = (((HEAPU8[($4_1 + 11 | 0) >> 0] | 0) & 255 | 0) & 63 | 0) << (HEAP32[($4_1 + 4 | 0) >> 2] | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = Math_imul((Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 44100) | 0) / (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0, HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0);
  return (HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 10 | 0 | 0;
 }
 
 function $11($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP8[($3_1 + 15 | 0) >> 0] = $0_1;
  return ((HEAPU8[($3_1 + 15 | 0) >> 0] | 0) & 255 | 0) << 22 | 0 | 0;
 }
 
 function $12($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $22_1 = 0, $29_1 = 0, $33_1 = 0, $28_1 = 0, $32_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 1 | 0) | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) << 1 | 0) | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) / (2 | 0) | 0;
  label$1 : {
   label$2 : while (1) {
    $22_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $22_1 + -1 | 0;
    if (!$22_1) {
     break label$1
    }
    HEAP16[($5_1 + 18 | 0) >> 1] = HEAPU16[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 1] | 0;
    $28_1 = HEAPU16[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 1] | 0;
    $29_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = $29_1 + 2 | 0;
    HEAP16[$29_1 >> 1] = $28_1;
    $32_1 = HEAPU16[($5_1 + 18 | 0) >> 1] | 0;
    $33_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = $33_1 + -2 | 0;
    HEAP16[$33_1 >> 1] = $32_1;
    continue label$2;
   };
  }
  return;
 }
 
 function $13($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13136 | 0) >> 2] | 0 | 0;
 }
 
 function $14($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) >= (0 | 0) & 1 | 0)) {
     break label$2
    }
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 13136 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 13140 | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  return HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $15($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0, $28_1 = 0, $48_1 = 0, $51_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 128;
  HEAP32[($3_1 + 4 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13136 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $8_1 + -1 | 0;
    if (!$8_1) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $28_1 = $16(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $28_1 | 0;
    }
    label$4 : {
     if (!((HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $48_1 = $16(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) | 0;
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $48_1 | 0;
    }
    continue label$2;
   };
  }
  $51_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $51_1 | 0;
 }
 
 function $16($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $16_1 = 0, $202_1 = 0, $205_1 = 0, $229 = 0, $255 = 0, $268 = 0, $305 = 0, $60_1 = 0, $156_1 = 0, $163_1 = 0, $167_1 = 0, $174_1 = 0, $181_1 = 0, $208_1 = 0, $234 = 0, $316 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
    $16_1 = HEAP32[(((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   $16_1 = HEAP32[(((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  HEAP32[($5_1 + 4 | 0) >> 2] = $16_1;
  label$3 : {
   label$4 : {
    if ((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$4
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    break label$3;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$5 : {
    label$6 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
      break label$5
     }
     label$7 : {
      label$8 : {
       if (!((HEAP32[(((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
        break label$8
       }
       $60_1 = $21(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[(((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $60_1;
       label$9 : {
        if (!((HEAP32[(((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
         break label$9
        }
        break label$7;
       }
       label$10 : {
        label$11 : {
         if ((HEAP32[((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
          break label$11
         }
         label$12 : {
          if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
           break label$12
          }
          label$13 : {
           label$14 : {
            if (HEAP32[($5_1 + 20 | 0) >> 2] | 0) {
             break label$14
            }
            label$15 : {
             if ((HEAP32[(((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
              break label$15
             }
             HEAP32[(((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
            }
            break label$13;
           }
           label$16 : {
            if ((HEAP32[(((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 540 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
             break label$16
            }
            HEAP32[(((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 540 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
           }
          }
         }
         HEAP32[(((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
         HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
         break label$10;
        }
        $156_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
        $163_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) >> 2] | 0;
        $167_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0 ? 1 : 0;
        $174_1 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 12 | 0) >> 2] | 0;
        $181_1 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] | 0;
        label$17 : {
         label$18 : {
          if (!((HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
           break label$18
          }
          $202_1 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] | 0;
          break label$17;
         }
         label$19 : {
          label$20 : {
           if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
            break label$20
           }
           $205_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
           break label$19;
          }
          $205_1 = -1;
         }
         $202_1 = $205_1;
        }
        $208_1 = $202_1;
        label$21 : {
         label$22 : {
          if (!((HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 16 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
           break label$22
          }
          $229 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 16 | 0) >> 2] | 0;
          break label$21;
         }
         $229 = HEAP32[($5_1 + 20 | 0) >> 2] | 0 ? 1 : -1;
        }
        $234 = $229;
        label$23 : {
         label$24 : {
          if (!((HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 20 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
           break label$24
          }
          $255 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 20 | 0) >> 2] | 0;
          break label$23;
         }
         $255 = HEAP32[($5_1 + 20 | 0) >> 2] | 0 ? 1 : -1;
        }
        $268 = $5($156_1 | 0, $163_1 | 0, $167_1 | 0, $174_1 | 0, $181_1 | 0, $208_1 | 0, $234 | 0, $255 | 0, HEAP32[(((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0 | 0) | 0;
        HEAP32[(((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $268;
        label$25 : {
         if (($268 | 0) != (0 | 0) & 1 | 0) {
          break label$25
         }
         label$26 : {
          if (!((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 13136 | 0) >> 2] | 0 | 0) < (256 | 0) & 1 | 0)) {
           break label$26
          }
          HEAP32[(((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 13140 | 0) + ((HEAP32[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 13136 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 12 | 0) >> 2] | 0, 28) | 0) >> 2] | 0;
          $305 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
          HEAP32[($305 + 13136 | 0) >> 2] = (HEAP32[($305 + 13136 | 0) >> 2] | 0) + 1 | 0;
         }
         HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
        }
       }
      }
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$6;
    };
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  }
  $316 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $316 | 0;
 }
 
 function $17($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 128;
  label$1 : {
   label$2 : while (1) {
    $5_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $5_1 + -1 | 0;
    if (!$5_1) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $18(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    }
    label$4 : {
     if (!((HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $18(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    }
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $18($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $15_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($5_1 + 24 | 0) >> 2] | 0)) {
     break label$2
    }
    $15_1 = HEAP32[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    break label$1;
   }
   $15_1 = HEAP32[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[($5_1 + 20 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
  }
  HEAP32[($5_1 + 12 | 0) >> 2] = $15_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!((HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!((HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
       break label$6
      }
      $19(HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
     }
     HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $19($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   HEAP32[($3_1 + 4 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 116) | 0;
     $195(HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   $195(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0);
   $195(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $20($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $7_1 = 0, $8_1 = 0, $9_1 = 0, $22_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $7_1 = 0;
  $8_1 = -1;
  $9_1 = $5(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, $7_1 | 0, $8_1 | 0, $8_1 | 0, $8_1 | 0, $7_1 | 0, $7_1 | 0, $7_1 | 0) | 0;
  HEAP32[$4_1 >> 2] = $9_1;
  label$1 : {
   label$2 : {
    if (($9_1 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = -1;
    break label$1;
   }
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1052 | 0) >> 2] = HEAP32[$4_1 >> 2] | 0;
   HEAP32[((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1056 | 0) >> 2] = -1;
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $22_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $22_1 | 0;
 }
 
 function $21($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $143_1 = 0, $175_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if ((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 20 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0 ? -2147483648 : 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[$6_1 >> 2] = (HEAP32[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 4 | 0) >> 2] | 0, 20) | 0;
     label$5 : {
      if (!(((HEAP32[((HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) & -2147483648 | 0 | 0) == (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      if (!((((HEAP32[((HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 8 | 0) & 255 | 0 | 0) == (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      if (!((HEAP32[((HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      break label$3;
     }
     HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   label$6 : {
    if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$6
    }
    if (HEAP32[($6_1 + 16 | 0) >> 2] | 0) {
     break label$6
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = 0;
    label$7 : {
     label$8 : while (1) {
      if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$7
      }
      HEAP32[$6_1 >> 2] = (HEAP32[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 4 | 0) >> 2] | 0, 20) | 0;
      label$9 : {
       if (!(((HEAP32[((HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) & -2147483648 | 0 | 0) == (HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       if (!((HEAP32[((HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) == (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$9
       }
       break label$7;
      }
      HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 1 | 0;
      continue label$8;
     };
    }
   }
   label$10 : {
    if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) == (HEAP32[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$10
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $2(8 | 0) | 0;
   HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0;
   $143_1 = $2(Math_imul(HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] | 0, 116) | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $143_1;
   $200(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, 0 | 0, Math_imul(HEAP32[(HEAP32[($6_1 + 8 | 0) >> 2] | 0) >> 2] | 0, 116) | 0) | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = 0;
   label$11 : {
    label$12 : while (1) {
     if (!((HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 < (HEAP32[(HEAP32[((HEAP32[$6_1 >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
      break label$11
     }
     $22(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 4 | 0) >> 2] | 0, 116) | 0 | 0, HEAP32[$6_1 >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0);
     HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[($6_1 + 4 | 0) >> 2] | 0) + 1 | 0;
     continue label$12;
    };
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  }
  $175_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $175_1 | 0;
 }
 
 function $22($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $25_1 = 0, $27_1 = 0, $81_1 = 0, $286 = 0.0, $187_1 = 0, $293 = 0.0, $201_1 = 0, $257 = 0, $263 = 0, $267 = 0, $271 = 0, $70_1 = 0, $206_1 = 0, $212_1 = 0, $215 = 0, $221 = 0, $224 = 0, $232 = 0, $235 = 0, $243 = 0, $246 = 0, $249 = 0, $252 = 0, $255 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 64 | 0) >> 2] | 0, 24) | 0;
  HEAP32[($6_1 + 56 | 0) >> 2] = (HEAP32[((HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, 20) | 0;
  $25_1 = 2;
  $27_1 = global$4;
  HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($27_1 + ((HEAPU16[(HEAP32[(HEAP32[($6_1 + 60 | 0) >> 2] | 0) >> 2] | 0) >> 1] | 0) << $25_1 | 0) | 0) >> 2] | 0;
  HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 28 | 0) >> 2] = HEAP32[($27_1 + ((HEAPU16[((HEAP32[(HEAP32[($6_1 + 60 | 0) >> 2] | 0) >> 2] | 0) + 2 | 0) >> 1] | 0) << $25_1 | 0) | 0) >> 2] | 0;
  HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 32 | 0) >> 2] = HEAP32[($27_1 + ((HEAPU16[((HEAP32[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 4 | 0) >> 1] | 0) << $25_1 | 0) | 0) >> 2] | 0;
  HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 16 | 0) >> 2] = (HEAPU16[((HEAP32[(HEAP32[($6_1 + 60 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 1] | 0) & 65535 | 0;
  HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 20 | 0) >> 2] = (HEAPU16[((HEAP32[(HEAP32[($6_1 + 60 | 0) >> 2] | 0) >> 2] | 0) + 6 | 0) >> 1] | 0) & 65535 | 0;
  HEAP8[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 110 | 0) >> 0] = 1;
  HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[((HEAP32[(HEAP32[($6_1 + 56 | 0) >> 2] | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 1 | 0;
  $70_1 = $2(HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 88 | 0) >> 2] = $70_1;
  $199(HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 56 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) | 0;
  label$1 : {
   if (!(HEAP32[((HEAP32[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0)) {
    break label$1
   }
   $81_1 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
   HEAP8[($81_1 + 110 | 0) >> 0] = (HEAPU8[($81_1 + 110 | 0) >> 0] | 0) & 255 | 0 | 36 | 0;
   HEAP32[(HEAP32[($6_1 + 72 | 0) >> 2] | 0) >> 2] = (HEAP32[((HEAP32[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 1 | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 4 | 0) >> 2] = (HEAP32[(HEAP32[($6_1 + 72 | 0) >> 2] | 0) >> 2] | 0) + ((HEAP32[((HEAP32[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >>> 1 | 0) | 0;
  }
  HEAPF32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 84 | 0) >> 2] = Math_fround(1.0);
  label$2 : {
   if (!(((HEAPU8[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 32 | 0)) {
    break label$2
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = 0;
   label$3 : {
    label$4 : {
     if (!((HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     if (!((HEAP32[((HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
      break label$4
     }
     if (!((HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 68 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
     break label$3;
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
    HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 60 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
   }
   HEAP32[($6_1 + 52 | 0) >> 2] = $23(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, 518 & 65535 | 0 | 0) | 0;
   HEAPF64[($6_1 + 40 | 0) >> 3] = +$24(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 52 | 0) >> 2] = $23(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, 524 & 65535 | 0 | 0) | 0;
   HEAPF64[($6_1 + 32 | 0) >> 3] = +$24(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 52 | 0) >> 2] = $23(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, 519 & 65535 | 0 | 0) | 0;
   HEAPF64[($6_1 + 24 | 0) >> 3] = +$24(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 52 | 0) >> 2] = $23(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, 521 & 65535 | 0 | 0) | 0;
   HEAPF64[($6_1 + 16 | 0) >> 3] = +$24(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0);
   HEAP32[($6_1 + 52 | 0) >> 2] = $23(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, 522 & 65535 | 0 | 0) | 0;
   $286 = (1.0 - +$25(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0)) * 250.0;
   label$5 : {
    label$6 : {
     if (!(Math_abs($286) < 2147483648.0)) {
      break label$6
     }
     $187_1 = ~~$286;
     break label$5;
    }
    $187_1 = -2147483648;
   }
   HEAP32[($6_1 + 12 | 0) >> 2] = $187_1;
   HEAP32[($6_1 + 52 | 0) >> 2] = $23(HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0, 4 & 65535 | 0 | 0) | 0;
   $293 = (.5 + +$25(HEAP32[($6_1 + 52 | 0) >> 2] | 0 | 0)) * 127.0;
   label$7 : {
    label$8 : {
     if (!(Math_abs($293) < 2147483648.0)) {
      break label$8
     }
     $201_1 = ~~$293;
     break label$7;
    }
    $201_1 = -2147483648;
   }
   HEAP8[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 111 | 0) >> 0] = $201_1;
   $206_1 = $26(255 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 60 | 0) >> 2] = $206_1;
   $212_1 = $27(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, 255 | 0, HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6_1 + 40 | 0) >> 3])) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 36 | 0) >> 2] = $212_1;
   $215 = $26(250 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 64 | 0) >> 2] = $215;
   $221 = $27(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, 5 | 0, HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6_1 + 32 | 0) >> 3])) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 40 | 0) >> 2] = $221;
   $224 = $26(HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 68 | 0) >> 2] = $224;
   $232 = $27(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, 255 - (HEAP32[($6_1 + 12 | 0) >> 2] | 0) | 0 | 0, HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6_1 + 24 | 0) >> 3])) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 44 | 0) >> 2] = $232;
   $235 = $26(0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 72 | 0) >> 2] = $235;
   $243 = $27(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 5 | 0 | 0, HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0 | 0, +(+HEAPF64[($6_1 + 16 | 0) >> 3])) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 48 | 0) >> 2] = $243;
   $246 = $26(0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 76 | 0) >> 2] = $246;
   $249 = $26(1 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 52 | 0) >> 2] = $249;
   $252 = $26(0 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 80 | 0) >> 2] = $252;
   $255 = $26(1 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 72 | 0) >> 2] | 0) + 56 | 0) >> 2] = $255;
   $257 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
   HEAP8[($257 + 110 | 0) >> 0] = (HEAPU8[($257 + 110 | 0) >> 0] | 0) & 255 | 0 | 64 | 0;
  }
  $263 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
  HEAP32[($263 + 8 | 0) >> 2] = (HEAP32[($263 + 8 | 0) >> 2] | 0) << 12 | 0;
  $267 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
  HEAP32[$267 >> 2] = (HEAP32[$267 >> 2] | 0) << 12 | 0;
  $271 = HEAP32[($6_1 + 72 | 0) >> 2] | 0;
  HEAP32[($271 + 4 | 0) >> 2] = (HEAP32[($271 + 4 | 0) >> 2] | 0) << 12 | 0;
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $23($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP16[($5_1 + 22 | 0) >> 1] = $2_1;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >>> 0 < (HEAP32[($5_1 + 28 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 16 | 0) >> 2] | 0, 12) | 0;
    label$3 : {
     if (!(((HEAPU16[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 1] | 0) & 65535 | 0 | 0) == ((HEAPU16[($5_1 + 22 | 0) >> 1] | 0) & 65535 | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$4 : {
      if ((HEAPU16[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 1] | 0) & 65535 | 0) {
       break label$4
      }
      if ((HEAPU16[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 2 | 0) >> 1] | 0) & 65535 | 0) {
       break label$4
      }
      if ((HEAPU16[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 6 | 0) >> 1] | 0) & 65535 | 0) {
       break label$4
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0;
     }
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $24($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $26_1 = 0.0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 4 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) == (-2147483648 | 0) & 1 | 0) {
      break label$3
     }
     if (HEAP32[($3_1 + 4 | 0) >> 2] | 0) {
      break label$2
     }
    }
    HEAPF64[($3_1 + 8 | 0) >> 3] = +(0 | 0);
    break label$1;
   }
   HEAPF64[($3_1 + 8 | 0) >> 3] = 1.0e3 * +$147(+(2.0), +(+((HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) / (65536 | 0) | 0 | 0) / 1200.0));
  }
  $26_1 = +HEAPF64[($3_1 + 8 | 0) >> 3];
  global$0 = $3_1 + 16 | 0;
  return +$26_1;
 }
 
 function $25($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return +(+((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) / (65536 | 0) | 0 | 0) / 1.0e3);
 }
 
 function $26($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  return (HEAP32[($3_1 + 12 | 0) >> 2] | 0) << 22 | 0 | 0;
 }
 
 function $27($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = +$3_1;
  var $6_1 = 0, $38_1 = 0.0, $23_1 = 0;
  $6_1 = global$0 - 32 | 0;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($6_1 + 8 | 0) >> 3] = $3_1;
  label$1 : {
   if (!(+HEAPF64[($6_1 + 8 | 0) >> 3] < 6.0 & 1 | 0)) {
    break label$1
   }
   HEAPF64[($6_1 + 8 | 0) >> 3] = 6.0;
  }
  label$2 : {
   if (HEAP32[($6_1 + 24 | 0) >> 2] | 0) {
    break label$2
   }
   HEAP32[($6_1 + 24 | 0) >> 2] = 255;
  }
  HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) << 22 | 0;
  HEAPF64[$6_1 >> 3] = +(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) / +(HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) * +(HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0 | 0) * 1.0e3 / +HEAPF64[($6_1 + 8 | 0) >> 3];
  $38_1 = +HEAPF64[$6_1 >> 3];
  label$3 : {
   label$4 : {
    if (!(Math_abs($38_1) < 2147483648.0)) {
     break label$4
    }
    $23_1 = ~~$38_1;
    break label$3;
   }
   $23_1 = -2147483648;
  }
  return $23_1 | 0;
 }
 
 function $28($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $214_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  HEAP32[$4_1 >> 2] = HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 220 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[$4_1 >> 2] | 0 | 0) > (5 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] = 0;
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (!(((HEAPU8[((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 64 | 0)) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if (((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0) {
       break label$5
      }
      if (!(((HEAPU8[(((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$4
      }
     }
     label$6 : {
      if (!((HEAP32[$4_1 >> 2] | 0 | 0) > (2 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] = 0;
      HEAP32[($4_1 + 12 | 0) >> 2] = 0;
      break label$1;
     }
    }
   }
   HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 220 | 0) >> 2] = (HEAP32[$4_1 >> 2] | 0) + 1 | 0;
   label$7 : {
    if (!((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 24 | 0) >> 2] | 0 | 0) == (HEAP32[(((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 60 | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $28(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 28 | 0) >> 2] = HEAP32[(((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 60 | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] = HEAP32[(((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 36 | 0) + ((HEAP32[$4_1 >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
   label$8 : {
    if (!((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 28 | 0) >> 2] | 0 | 0) < (HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$8
    }
    HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] = 0 - (HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] | 0) | 0;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $214_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $214_1 | 0;
 }
 
 function $29($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $64_1 = 0, $67_1 = 0, $70_1 = 0, $72_1 = 0, $74_1 = 0, $208_1 = Math_fround(0), $88_1 = 0, $212_1 = Math_fround(0), $102_1 = 0, $222 = Math_fround(0), $174_1 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(HEAPF32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 68 | 0) >> 2]);
  label$1 : {
   label$2 : {
    if (HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 232 | 0) >> 2] | 0) {
     break label$2
    }
    HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(HEAPF32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 72 | 0) >> 2]);
    label$3 : {
     if (!(HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 48 | 0) >> 2] | 0)) {
      break label$3
     }
     HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 76 | 0) >> 2]));
     HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]) * Math_fround(HEAPF32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 76 | 0) >> 2]));
    }
    label$4 : {
     if (!(((HEAPU8[((HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 64 | 0)) {
      break label$4
     }
     $64_1 = 236;
     $67_1 = 1748;
     $70_1 = 23;
     $72_1 = 3;
     $74_1 = global$5;
     HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) * Math_fround(+HEAPF64[($74_1 + (((HEAP32[(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, $64_1) | 0) + $67_1 | 0) >> 2] | 0) >> $70_1 | 0) << $72_1 | 0) | 0) >> 3]));
     HEAPF32[($4_1 + 16 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]) * Math_fround(+HEAPF64[($74_1 + (((HEAP32[(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, $64_1) | 0) + $67_1 | 0) >> 2] | 0) >> $70_1 | 0) << $72_1 | 0) | 0) >> 3]));
    }
    $208_1 = Math_fround(+Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) * 4096.0);
    label$5 : {
     label$6 : {
      if (!(Math_fround(Math_abs($208_1)) < Math_fround(2147483648.0))) {
       break label$6
      }
      $88_1 = ~~$208_1;
      break label$5;
     }
     $88_1 = -2147483648;
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = $88_1;
    label$7 : {
     if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) > (8191 | 0) & 1 | 0)) {
      break label$7
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = 8191;
    }
    $212_1 = Math_fround(+Math_fround(HEAPF32[($4_1 + 16 | 0) >> 2]) * 4096.0);
    label$8 : {
     label$9 : {
      if (!(Math_fround(Math_abs($212_1)) < Math_fround(2147483648.0))) {
       break label$9
      }
      $102_1 = ~~$212_1;
      break label$8;
     }
     $102_1 = -2147483648;
    }
    HEAP32[($4_1 + 8 | 0) >> 2] = $102_1;
    label$10 : {
     if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) > (8191 | 0) & 1 | 0)) {
      break label$10
     }
     HEAP32[($4_1 + 8 | 0) >> 2] = 8191;
    }
    HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 60 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 64 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   label$11 : {
    if (!(HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 48 | 0) >> 2] | 0)) {
     break label$11
    }
    HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) * Math_fround(HEAPF32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 76 | 0) >> 2]));
   }
   label$12 : {
    if (!(((HEAPU8[((HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 64 | 0)) {
     break label$12
    }
    HEAPF32[($4_1 + 20 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) * Math_fround(+HEAPF64[(global$5 + (((HEAP32[(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 1748 | 0) >> 2] | 0) >> 23 | 0) << 3 | 0) | 0) >> 3]));
   }
   $222 = Math_fround(+Math_fround(HEAPF32[($4_1 + 20 | 0) >> 2]) * 4096.0);
   label$13 : {
    label$14 : {
     if (!(Math_fround(Math_abs($222)) < Math_fround(2147483648.0))) {
      break label$14
     }
     $174_1 = ~~$222;
     break label$13;
    }
    $174_1 = -2147483648;
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = $174_1;
   label$15 : {
    if (!((HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) > (8191 | 0) & 1 | 0)) {
     break label$15
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 8191;
   }
   HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 60 | 0) >> 2] = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  }
  return;
 }
 
 function $30($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = ((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 20 | 0) >> 2] | 0, 236) | 0;
  label$1 : {
   label$2 : {
    if (!(((HEAPU8[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) == (4 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) >= (20 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($6_1 + 16 | 0) >> 2] = 20;
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = $87(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
    $31(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
    HEAP8[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 0] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = $87(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
   label$4 : {
    label$5 : {
     if (!((HEAP32[((HEAP32[($6_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       label$8 : {
        if (HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) {
         break label$8
        }
        if (!(HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0)) {
         break label$7
        }
       }
       $32(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
       break label$6;
      }
      $33(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
     }
     break label$4;
    }
    label$9 : {
     label$10 : {
      if (HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 232 | 0) >> 2] | 0) {
       break label$10
      }
      label$11 : {
       label$12 : {
        label$13 : {
         if (HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) {
          break label$13
         }
         if (!(HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0)) {
          break label$12
         }
        }
        $34(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
        break label$11;
       }
       $35(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
      }
      break label$9;
     }
     label$14 : {
      label$15 : {
       if (!((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 232 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break label$15
       }
       label$16 : {
        label$17 : {
         label$18 : {
          if (HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) {
           break label$18
          }
          if (!(HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0)) {
           break label$17
          }
         }
         $36(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
         break label$16;
        }
        $37(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
       }
       break label$14;
      }
      label$19 : {
       if (!((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 232 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
        break label$19
       }
       HEAP32[($6_1 + 24 | 0) >> 2] = (HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 4 | 0;
      }
      label$20 : {
       label$21 : {
        label$22 : {
         if (HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) {
          break label$22
         }
         if (!(HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 48 | 0) >> 2] | 0)) {
          break label$21
         }
        }
        $38(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
        break label$20;
       }
       $39(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0);
      }
     }
    }
   }
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $31($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $86_1 = 0, $97_1 = 0, $139_1 = 0, $150_1 = 0, $192_1 = 0, $240 = 0, $268 = 0, $51_1 = 0, $76_1 = 0, $82_1 = 0, $93_1 = 0, $116_1 = 0, $129_1 = 0, $135_1 = 0, $146_1 = 0, $169_1 = 0, $182_1 = 0, $188_1 = 0, $214_1 = 0, $227 = 0, $236 = 0, $245 = 0, $258 = 0, $264 = 0, $85_1 = 0, $96_1 = 0, $138_1 = 0, $149_1 = 0, $191_1 = 0, $239 = 0, $267 = 0;
  $7_1 = global$0 - 48 | 0;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP16[($7_1 + 10 | 0) >> 1] = 0;
  label$1 : {
   if (HEAP32[($7_1 + 28 | 0) >> 2] | 0) {
    break label$1
   }
   HEAP32[($7_1 + 28 | 0) >> 2] = 1;
  }
  HEAP32[($7_1 + 24 | 0) >> 2] = HEAP32[((((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0) + 60 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = 0 - ((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) / (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0) | 0;
  label$2 : {
   if (HEAP32[($7_1 + 16 | 0) >> 2] | 0) {
    break label$2
   }
   HEAP32[($7_1 + 16 | 0) >> 2] = -1;
  }
  label$3 : {
   label$4 : {
    if ((HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 1 | 0) {
     break label$4
    }
    label$5 : {
     label$6 : {
      if (HEAP32[((((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0) + 232 | 0) >> 2] | 0) {
       break label$6
      }
      HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0) + 64 | 0) >> 2] | 0;
      HEAP32[($7_1 + 12 | 0) >> 2] = 0 - ((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) / (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) | 0) | 0;
      label$7 : {
       label$8 : while (1) {
        $51_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
        HEAP32[($7_1 + 28 | 0) >> 2] = $51_1 + -1 | 0;
        if (!$51_1) {
         break label$7
        }
        HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0;
        label$9 : {
         if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
          break label$9
         }
         HEAP32[($7_1 + 24 | 0) >> 2] = 0;
        }
        HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + (HEAP32[($7_1 + 12 | 0) >> 2] | 0) | 0;
        label$10 : {
         if (!((HEAP32[($7_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
          break label$10
         }
         HEAP32[($7_1 + 20 | 0) >> 2] = 0;
        }
        $76_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
        HEAP32[($7_1 + 40 | 0) >> 2] = $76_1 + 2 | 0;
        HEAP16[($7_1 + 10 | 0) >> 1] = HEAPU16[$76_1 >> 1] | 0;
        $82_1 = 16;
        $85_1 = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $82_1 | 0) >> $82_1 | 0);
        $86_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = $86_1 + 4 | 0;
        HEAP32[$86_1 >> 2] = (HEAP32[$86_1 >> 2] | 0) + $85_1 | 0;
        $93_1 = 16;
        $96_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $93_1 | 0) >> $93_1 | 0);
        $97_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = $97_1 + 4 | 0;
        HEAP32[$97_1 >> 2] = (HEAP32[$97_1 >> 2] | 0) + $96_1 | 0;
        continue label$8;
       };
      }
      break label$5;
     }
     label$11 : {
      label$12 : {
       if (!((HEAP32[((((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0) + 232 | 0) >> 2] | 0 | 0) == (3 | 0) & 1 | 0)) {
        break label$12
       }
       label$13 : {
        label$14 : while (1) {
         $116_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
         HEAP32[($7_1 + 28 | 0) >> 2] = $116_1 + -1 | 0;
         if (!$116_1) {
          break label$13
         }
         HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0;
         label$15 : {
          if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
           break label$15
          }
          break label$3;
         }
         $129_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
         HEAP32[($7_1 + 40 | 0) >> 2] = $129_1 + 2 | 0;
         HEAP16[($7_1 + 10 | 0) >> 1] = HEAPU16[$129_1 >> 1] | 0;
         $135_1 = 16;
         $138_1 = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $135_1 | 0) >> $135_1 | 0);
         $139_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
         HEAP32[($7_1 + 36 | 0) >> 2] = $139_1 + 4 | 0;
         HEAP32[$139_1 >> 2] = (HEAP32[$139_1 >> 2] | 0) + $138_1 | 0;
         $146_1 = 16;
         $149_1 = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $146_1 | 0) >> $146_1 | 0);
         $150_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
         HEAP32[($7_1 + 36 | 0) >> 2] = $150_1 + 4 | 0;
         HEAP32[$150_1 >> 2] = (HEAP32[$150_1 >> 2] | 0) + $149_1 | 0;
         continue label$14;
        };
       }
       break label$11;
      }
      label$16 : {
       label$17 : {
        if (!((HEAP32[((((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0) + 232 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
         break label$17
        }
        label$18 : {
         label$19 : while (1) {
          $169_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
          HEAP32[($7_1 + 28 | 0) >> 2] = $169_1 + -1 | 0;
          if (!$169_1) {
           break label$18
          }
          HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0;
          label$20 : {
           if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
            break label$20
           }
           break label$3;
          }
          $182_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
          HEAP32[($7_1 + 40 | 0) >> 2] = $182_1 + 2 | 0;
          HEAP16[($7_1 + 10 | 0) >> 1] = HEAPU16[$182_1 >> 1] | 0;
          $188_1 = 16;
          $191_1 = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $188_1 | 0) >> $188_1 | 0);
          $192_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
          HEAP32[($7_1 + 36 | 0) >> 2] = $192_1 + 4 | 0;
          HEAP32[$192_1 >> 2] = (HEAP32[$192_1 >> 2] | 0) + $191_1 | 0;
          HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 4 | 0;
          continue label$19;
         };
        }
        break label$16;
       }
       label$21 : {
        if (!((HEAP32[((((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0) + 232 | 0) >> 2] | 0 | 0) == (2 | 0) & 1 | 0)) {
         break label$21
        }
        label$22 : {
         label$23 : while (1) {
          $214_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
          HEAP32[($7_1 + 28 | 0) >> 2] = $214_1 + -1 | 0;
          if (!$214_1) {
           break label$22
          }
          HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0;
          label$24 : {
           if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
            break label$24
           }
           break label$3;
          }
          $227 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
          HEAP32[($7_1 + 40 | 0) >> 2] = $227 + 2 | 0;
          HEAP16[($7_1 + 10 | 0) >> 1] = HEAPU16[$227 >> 1] | 0;
          HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 4 | 0;
          $236 = 16;
          $239 = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $236 | 0) >> $236 | 0);
          $240 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
          HEAP32[($7_1 + 36 | 0) >> 2] = $240 + 4 | 0;
          HEAP32[$240 >> 2] = (HEAP32[$240 >> 2] | 0) + $239 | 0;
          continue label$23;
         };
        }
       }
      }
     }
    }
    break label$3;
   }
   label$25 : {
    label$26 : while (1) {
     $245 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
     HEAP32[($7_1 + 28 | 0) >> 2] = $245 + -1 | 0;
     if (!$245) {
      break label$25
     }
     HEAP32[($7_1 + 24 | 0) >> 2] = (HEAP32[($7_1 + 24 | 0) >> 2] | 0) + (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0;
     label$27 : {
      if (!((HEAP32[($7_1 + 24 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$27
      }
      break label$3;
     }
     $258 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
     HEAP32[($7_1 + 40 | 0) >> 2] = $258 + 2 | 0;
     HEAP16[($7_1 + 10 | 0) >> 1] = HEAPU16[$258 >> 1] | 0;
     $264 = 16;
     $267 = Math_imul(HEAP32[($7_1 + 24 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $264 | 0) >> $264 | 0);
     $268 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
     HEAP32[($7_1 + 36 | 0) >> 2] = $268 + 4 | 0;
     HEAP32[$268 >> 2] = (HEAP32[$268 >> 2] | 0) + $267 | 0;
     continue label$26;
    };
   }
  }
  return;
 }
 
 function $32($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $50_1 = 0, $79_1 = 0, $18_1 = 0, $37_1 = 0, $40_1 = 0, $46_1 = 0, $66_1 = 0, $69_1 = 0, $75_1 = 0, $49_1 = 0, $78_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
  $18_1 = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 224 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = $18_1;
  label$1 : {
   label$2 : {
    if ($18_1) {
     break label$2
    }
    HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0;
    label$3 : {
     if (!($40(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     break label$1;
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
   }
   label$4 : while (1) {
    if (!(HEAP32[($7_1 + 28 | 0) >> 2] | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0;
      label$7 : {
       label$8 : while (1) {
        $37_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
        HEAP32[($7_1 + 16 | 0) >> 2] = $37_1 + -1 | 0;
        if (!$37_1) {
         break label$7
        }
        $40_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
        HEAP32[($7_1 + 40 | 0) >> 2] = $40_1 + 2 | 0;
        HEAP16[($7_1 + 14 | 0) >> 1] = HEAPU16[$40_1 >> 1] | 0;
        $46_1 = 16;
        $49_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 14 | 0) >> 1] | 0) << $46_1 | 0) >> $46_1 | 0);
        $50_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = $50_1 + 4 | 0;
        HEAP32[$50_1 >> 2] = (HEAP32[$50_1 >> 2] | 0) + $49_1 | 0;
        continue label$8;
       };
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0;
      label$9 : {
       if (!($40(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
        break label$9
       }
       break label$1;
      }
      HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 224 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     label$10 : {
      label$11 : while (1) {
       $66_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
       HEAP32[($7_1 + 28 | 0) >> 2] = $66_1 + -1 | 0;
       if (!$66_1) {
        break label$10
       }
       $69_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
       HEAP32[($7_1 + 40 | 0) >> 2] = $69_1 + 2 | 0;
       HEAP16[($7_1 + 14 | 0) >> 1] = HEAPU16[$69_1 >> 1] | 0;
       $75_1 = 16;
       $78_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 14 | 0) >> 1] | 0) << $75_1 | 0) >> $75_1 | 0);
       $79_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = $79_1 + 4 | 0;
       HEAP32[$79_1 >> 2] = (HEAP32[$79_1 >> 2] | 0) + $78_1 | 0;
       continue label$11;
      };
     }
     break label$1;
    }
    continue label$4;
   };
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $33($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $29_1 = 0, $16_1 = 0, $19_1 = 0, $25_1 = 0, $28_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[((((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, 236) | 0) + 60 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $16_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = $16_1 + -1 | 0;
    if (!$16_1) {
     break label$1
    }
    $19_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    HEAP32[($7_1 + 24 | 0) >> 2] = $19_1 + 2 | 0;
    HEAP16[($7_1 + 6 | 0) >> 1] = HEAPU16[$19_1 >> 1] | 0;
    $25_1 = 16;
    $28_1 = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 6 | 0) >> 1] | 0) << $25_1 | 0) >> $25_1 | 0);
    $29_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = $29_1 + 4 | 0;
    HEAP32[$29_1 >> 2] = (HEAP32[$29_1 >> 2] | 0) + $28_1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $34($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $54_1 = 0, $65_1 = 0, $96_1 = 0, $107_1 = 0, $20_1 = 0, $41_1 = 0, $44_1 = 0, $50_1 = 0, $61_1 = 0, $83_1 = 0, $86_1 = 0, $92_1 = 0, $103_1 = 0, $53_1 = 0, $64_1 = 0, $95_1 = 0, $106_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
  $20_1 = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 224 | 0) >> 2] | 0;
  HEAP32[($7_1 + 12 | 0) >> 2] = $20_1;
  label$1 : {
   label$2 : {
    if ($20_1) {
     break label$2
    }
    HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0;
    label$3 : {
     if (!($40(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     break label$1;
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
    HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
   }
   label$4 : while (1) {
    if (!(HEAP32[($7_1 + 28 | 0) >> 2] | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - (HEAP32[($7_1 + 12 | 0) >> 2] | 0) | 0;
      label$7 : {
       label$8 : while (1) {
        $41_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
        HEAP32[($7_1 + 12 | 0) >> 2] = $41_1 + -1 | 0;
        if (!$41_1) {
         break label$7
        }
        $44_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
        HEAP32[($7_1 + 40 | 0) >> 2] = $44_1 + 2 | 0;
        HEAP16[($7_1 + 10 | 0) >> 1] = HEAPU16[$44_1 >> 1] | 0;
        $50_1 = 16;
        $53_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $50_1 | 0) >> $50_1 | 0);
        $54_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = $54_1 + 4 | 0;
        HEAP32[$54_1 >> 2] = (HEAP32[$54_1 >> 2] | 0) + $53_1 | 0;
        $61_1 = 16;
        $64_1 = Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $61_1 | 0) >> $61_1 | 0);
        $65_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = $65_1 + 4 | 0;
        HEAP32[$65_1 >> 2] = (HEAP32[$65_1 >> 2] | 0) + $64_1 | 0;
        continue label$8;
       };
      }
      HEAP32[($7_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0;
      label$9 : {
       if (!($40(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
        break label$9
       }
       break label$1;
      }
      HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
      HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 64 | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 224 | 0) >> 2] = (HEAP32[($7_1 + 12 | 0) >> 2] | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     label$10 : {
      label$11 : while (1) {
       $83_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
       HEAP32[($7_1 + 28 | 0) >> 2] = $83_1 + -1 | 0;
       if (!$83_1) {
        break label$10
       }
       $86_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
       HEAP32[($7_1 + 40 | 0) >> 2] = $86_1 + 2 | 0;
       HEAP16[($7_1 + 10 | 0) >> 1] = HEAPU16[$86_1 >> 1] | 0;
       $92_1 = 16;
       $95_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $92_1 | 0) >> $92_1 | 0);
       $96_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = $96_1 + 4 | 0;
       HEAP32[$96_1 >> 2] = (HEAP32[$96_1 >> 2] | 0) + $95_1 | 0;
       $103_1 = 16;
       $106_1 = Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 10 | 0) >> 1] | 0) << $103_1 | 0) >> $103_1 | 0);
       $107_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = $107_1 + 4 | 0;
       HEAP32[$107_1 >> 2] = (HEAP32[$107_1 >> 2] | 0) + $106_1 | 0;
       continue label$11;
      };
     }
     break label$1;
    }
    continue label$4;
   };
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $35($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $37_1 = 0, $48_1 = 0, $24_1 = 0, $27_1 = 0, $33_1 = 0, $44_1 = 0, $36_1 = 0, $47_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[((((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, 236) | 0) + 60 | 0) >> 2] | 0;
  HEAP32[($7_1 + 4 | 0) >> 2] = HEAP32[((((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, 236) | 0) + 64 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $24_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = $24_1 + -1 | 0;
    if (!$24_1) {
     break label$1
    }
    $27_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    HEAP32[($7_1 + 24 | 0) >> 2] = $27_1 + 2 | 0;
    HEAP16[($7_1 + 2 | 0) >> 1] = HEAPU16[$27_1 >> 1] | 0;
    $33_1 = 16;
    $36_1 = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 2 | 0) >> 1] | 0) << $33_1 | 0) >> $33_1 | 0);
    $37_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = $37_1 + 4 | 0;
    HEAP32[$37_1 >> 2] = (HEAP32[$37_1 >> 2] | 0) + $36_1 | 0;
    $44_1 = 16;
    $47_1 = Math_imul(HEAP32[($7_1 + 4 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 2 | 0) >> 1] | 0) << $44_1 | 0) >> $44_1 | 0);
    $48_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = $48_1 + 4 | 0;
    HEAP32[$48_1 >> 2] = (HEAP32[$48_1 >> 2] | 0) + $47_1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $36($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $50_1 = 0, $61_1 = 0, $90_1 = 0, $101_1 = 0, $18_1 = 0, $37_1 = 0, $40_1 = 0, $46_1 = 0, $57_1 = 0, $77_1 = 0, $80_1 = 0, $86_1 = 0, $97_1 = 0, $49_1 = 0, $60_1 = 0, $89_1 = 0, $100_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
  $18_1 = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 224 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = $18_1;
  label$1 : {
   label$2 : {
    if ($18_1) {
     break label$2
    }
    HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0;
    label$3 : {
     if (!($40(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     break label$1;
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
   }
   label$4 : while (1) {
    if (!(HEAP32[($7_1 + 28 | 0) >> 2] | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0;
      label$7 : {
       label$8 : while (1) {
        $37_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
        HEAP32[($7_1 + 16 | 0) >> 2] = $37_1 + -1 | 0;
        if (!$37_1) {
         break label$7
        }
        $40_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
        HEAP32[($7_1 + 40 | 0) >> 2] = $40_1 + 2 | 0;
        HEAP16[($7_1 + 14 | 0) >> 1] = HEAPU16[$40_1 >> 1] | 0;
        $46_1 = 16;
        $49_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 14 | 0) >> 1] | 0) << $46_1 | 0) >> $46_1 | 0);
        $50_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = $50_1 + 4 | 0;
        HEAP32[$50_1 >> 2] = (HEAP32[$50_1 >> 2] | 0) + $49_1 | 0;
        $57_1 = 16;
        $60_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 14 | 0) >> 1] | 0) << $57_1 | 0) >> $57_1 | 0);
        $61_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = $61_1 + 4 | 0;
        HEAP32[$61_1 >> 2] = (HEAP32[$61_1 >> 2] | 0) + $60_1 | 0;
        continue label$8;
       };
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0;
      label$9 : {
       if (!($40(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
        break label$9
       }
       break label$1;
      }
      HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 224 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     label$10 : {
      label$11 : while (1) {
       $77_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
       HEAP32[($7_1 + 28 | 0) >> 2] = $77_1 + -1 | 0;
       if (!$77_1) {
        break label$10
       }
       $80_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
       HEAP32[($7_1 + 40 | 0) >> 2] = $80_1 + 2 | 0;
       HEAP16[($7_1 + 14 | 0) >> 1] = HEAPU16[$80_1 >> 1] | 0;
       $86_1 = 16;
       $89_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 14 | 0) >> 1] | 0) << $86_1 | 0) >> $86_1 | 0);
       $90_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = $90_1 + 4 | 0;
       HEAP32[$90_1 >> 2] = (HEAP32[$90_1 >> 2] | 0) + $89_1 | 0;
       $97_1 = 16;
       $100_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 14 | 0) >> 1] | 0) << $97_1 | 0) >> $97_1 | 0);
       $101_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = $101_1 + 4 | 0;
       HEAP32[$101_1 >> 2] = (HEAP32[$101_1 >> 2] | 0) + $100_1 | 0;
       continue label$11;
      };
     }
     break label$1;
    }
    continue label$4;
   };
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $37($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $29_1 = 0, $40_1 = 0, $16_1 = 0, $19_1 = 0, $25_1 = 0, $36_1 = 0, $28_1 = 0, $39_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[((((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, 236) | 0) + 60 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $16_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = $16_1 + -1 | 0;
    if (!$16_1) {
     break label$1
    }
    $19_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    HEAP32[($7_1 + 24 | 0) >> 2] = $19_1 + 2 | 0;
    HEAP16[($7_1 + 6 | 0) >> 1] = HEAPU16[$19_1 >> 1] | 0;
    $25_1 = 16;
    $28_1 = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 6 | 0) >> 1] | 0) << $25_1 | 0) >> $25_1 | 0);
    $29_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = $29_1 + 4 | 0;
    HEAP32[$29_1 >> 2] = (HEAP32[$29_1 >> 2] | 0) + $28_1 | 0;
    $36_1 = 16;
    $39_1 = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 6 | 0) >> 1] | 0) << $36_1 | 0) >> $36_1 | 0);
    $40_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = $40_1 + 4 | 0;
    HEAP32[$40_1 >> 2] = (HEAP32[$40_1 >> 2] | 0) + $39_1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $38($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $50_1 = 0, $82_1 = 0, $18_1 = 0, $37_1 = 0, $40_1 = 0, $46_1 = 0, $69_1 = 0, $72_1 = 0, $78_1 = 0, $49_1 = 0, $81_1 = 0;
  $7_1 = global$0 - 48 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = ((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 32 | 0) >> 2] | 0, 236) | 0;
  HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
  $18_1 = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 224 | 0) >> 2] | 0;
  HEAP32[($7_1 + 16 | 0) >> 2] = $18_1;
  label$1 : {
   label$2 : {
    if ($18_1) {
     break label$2
    }
    HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0;
    label$3 : {
     if (!($40(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
      break label$3
     }
     break label$1;
    }
    HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
   }
   label$4 : while (1) {
    if (!(HEAP32[($7_1 + 28 | 0) >> 2] | 0)) {
     break label$1
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($7_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($7_1 + 28 | 0) >> 2] = (HEAP32[($7_1 + 28 | 0) >> 2] | 0) - (HEAP32[($7_1 + 16 | 0) >> 2] | 0) | 0;
      label$7 : {
       label$8 : while (1) {
        $37_1 = HEAP32[($7_1 + 16 | 0) >> 2] | 0;
        HEAP32[($7_1 + 16 | 0) >> 2] = $37_1 + -1 | 0;
        if (!$37_1) {
         break label$7
        }
        $40_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
        HEAP32[($7_1 + 40 | 0) >> 2] = $40_1 + 2 | 0;
        HEAP16[($7_1 + 14 | 0) >> 1] = HEAPU16[$40_1 >> 1] | 0;
        $46_1 = 16;
        $49_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 14 | 0) >> 1] | 0) << $46_1 | 0) >> $46_1 | 0);
        $50_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = $50_1 + 4 | 0;
        HEAP32[$50_1 >> 2] = (HEAP32[$50_1 >> 2] | 0) + $49_1 | 0;
        HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 4 | 0;
        continue label$8;
       };
      }
      HEAP32[($7_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 44 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0;
      label$9 : {
       if (!($40(HEAP32[($7_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($7_1 + 32 | 0) >> 2] | 0 | 0) | 0)) {
        break label$9
       }
       break label$1;
      }
      HEAP32[($7_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 60 | 0) >> 2] | 0;
      break label$5;
     }
     HEAP32[((HEAP32[($7_1 + 24 | 0) >> 2] | 0) + 224 | 0) >> 2] = (HEAP32[($7_1 + 16 | 0) >> 2] | 0) - (HEAP32[($7_1 + 28 | 0) >> 2] | 0) | 0;
     label$10 : {
      label$11 : while (1) {
       $69_1 = HEAP32[($7_1 + 28 | 0) >> 2] | 0;
       HEAP32[($7_1 + 28 | 0) >> 2] = $69_1 + -1 | 0;
       if (!$69_1) {
        break label$10
       }
       $72_1 = HEAP32[($7_1 + 40 | 0) >> 2] | 0;
       HEAP32[($7_1 + 40 | 0) >> 2] = $72_1 + 2 | 0;
       HEAP16[($7_1 + 14 | 0) >> 1] = HEAPU16[$72_1 >> 1] | 0;
       $78_1 = 16;
       $81_1 = Math_imul(HEAP32[($7_1 + 20 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 14 | 0) >> 1] | 0) << $78_1 | 0) >> $78_1 | 0);
       $82_1 = HEAP32[($7_1 + 36 | 0) >> 2] | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = $82_1 + 4 | 0;
       HEAP32[$82_1 >> 2] = (HEAP32[$82_1 >> 2] | 0) + $81_1 | 0;
       HEAP32[($7_1 + 36 | 0) >> 2] = (HEAP32[($7_1 + 36 | 0) >> 2] | 0) + 4 | 0;
       continue label$11;
      };
     }
     break label$1;
    }
    continue label$4;
   };
  }
  global$0 = $7_1 + 48 | 0;
  return;
 }
 
 function $39($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $7_1 = 0, $29_1 = 0, $16_1 = 0, $19_1 = 0, $25_1 = 0, $28_1 = 0;
  $7_1 = global$0 - 32 | 0;
  HEAP32[($7_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($7_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($7_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($7_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($7_1 + 12 | 0) >> 2] = $4_1;
  HEAP32[($7_1 + 8 | 0) >> 2] = HEAP32[((((HEAP32[($7_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($7_1 + 16 | 0) >> 2] | 0, 236) | 0) + 60 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $16_1 = HEAP32[($7_1 + 12 | 0) >> 2] | 0;
    HEAP32[($7_1 + 12 | 0) >> 2] = $16_1 + -1 | 0;
    if (!$16_1) {
     break label$1
    }
    $19_1 = HEAP32[($7_1 + 24 | 0) >> 2] | 0;
    HEAP32[($7_1 + 24 | 0) >> 2] = $19_1 + 2 | 0;
    HEAP16[($7_1 + 6 | 0) >> 1] = HEAPU16[$19_1 >> 1] | 0;
    $25_1 = 16;
    $28_1 = Math_imul(HEAP32[($7_1 + 8 | 0) >> 2] | 0, ((HEAPU16[($7_1 + 6 | 0) >> 1] | 0) << $25_1 | 0) >> $25_1 | 0);
    $29_1 = HEAP32[($7_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = $29_1 + 4 | 0;
    HEAP32[$29_1 >> 2] = (HEAP32[$29_1 >> 2] | 0) + $28_1 | 0;
    HEAP32[($7_1 + 20 | 0) >> 2] = (HEAP32[($7_1 + 20 | 0) >> 2] | 0) + 4 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $40($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $30_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!($41(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 12 | 0) >> 2] = 1;
    break label$1;
   }
   label$3 : {
    if (!(HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 48 | 0) >> 2] | 0)) {
     break label$3
    }
    $42(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   }
   $29(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $30_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $30_1 | 0;
 }
 
 function $41($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $19_1 = 0, $112_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = $1_1;
  $19_1 = ((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0;
  HEAP32[($19_1 + 24 | 0) >> 2] = (HEAP32[($19_1 + 24 | 0) >> 2] | 0) + (HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] | 0) | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if (!((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$4
      }
      if ((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 24 | 0) >> 2] | 0 | 0) <= (HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 28 | 0) >> 2] | 0 | 0) & 1 | 0) {
       break label$3
      }
     }
     if (!((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
      break label$2
     }
     if (!((HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 24 | 0) >> 2] | 0 | 0) >= (HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 24 | 0) >> 2] = HEAP32[((((HEAP32[($4_1 + 8 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 28 | 0) >> 2] | 0;
    label$5 : {
     if (!($28(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) | 0)) {
      break label$5
     }
     HEAP32[($4_1 + 12 | 0) >> 2] = 1;
     break label$1;
    }
   }
   HEAP32[($4_1 + 12 | 0) >> 2] = 0;
  }
  $112_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  global$0 = $4_1 + 16 | 0;
  return $112_1 | 0;
 }
 
 function $42($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $40_1 = 0, $80_1 = 0, $82_1 = 0, $86_1 = 0, $87_1 = 0, $119_1 = 0.0, $101_1 = 0, $125$hi = 0, $126$hi = 0, $127$hi = 0, $128$hi = 0, $129$hi = 0, $125_1 = 0, $23_1 = 0, $129_1 = 0, $375$hi = 0, $24_1 = 0, $132_1 = Math_fround(0);
  $4_1 = global$0 - 48 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 36 | 0) >> 2] = ((HEAPU8[((HEAP32[((((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 108 | 0) >> 0] | 0) & 255 | 0) << 7 | 0;
  label$1 : {
   if (!(HEAP32[((((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, 236) | 0) + 36 | 0) >> 2] | 0)) {
    break label$1
   }
   $40_1 = ((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, 236) | 0;
   HEAP32[($40_1 + 40 | 0) >> 2] = (HEAP32[($40_1 + 40 | 0) >> 2] | 0) + (HEAP32[((((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, 236) | 0) + 36 | 0) >> 2] | 0) | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[((((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, 236) | 0) + 40 | 0) >> 2] | 0 | 0) >= (65536 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[((((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, 236) | 0) + 36 | 0) >> 2] = 0;
     break label$2;
    }
    HEAP32[($4_1 + 36 | 0) >> 2] = Math_imul(HEAP32[($4_1 + 36 | 0) >> 2] | 0, HEAP32[((((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, 236) | 0) + 40 | 0) >> 2] | 0);
    HEAP32[($4_1 + 36 | 0) >> 2] = (HEAP32[($4_1 + 36 | 0) >> 2] | 0) >> 16 | 0;
   }
  }
  $80_1 = 236;
  $82_1 = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, $80_1) | 0;
  $86_1 = 1768;
  $87_1 = $82_1 + $86_1 | 0;
  HEAP32[$87_1 >> 2] = (HEAP32[$87_1 >> 2] | 0) + (HEAP32[($82_1 + 1772 | 0) >> 2] | 0) | 0;
  $119_1 = 1.0;
  $186($4_1 + 16 | 0 | 0, +((+$149(+(+((HEAP32[(((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, $80_1) | 0) + $86_1 | 0) >> 2] | 0) >> 5 | 0 | 0) * .006135923151542565)) + $119_1) * +(HEAP32[($4_1 + 36 | 0) >> 2] | 0 | 0)));
  $101_1 = 8;
  i64toi32_i32$2 = ($4_1 + 16 | 0) + $101_1 | 0;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $125_1 = i64toi32_i32$0;
  $125$hi = i64toi32_i32$1;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
  i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
  $126$hi = i64toi32_i32$0;
  i64toi32_i32$0 = -1074921472;
  $127$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $128$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $126$hi;
  i64toi32_i32$0 = $125$hi;
  i64toi32_i32$0 = $128$hi;
  i64toi32_i32$0 = $127$hi;
  i64toi32_i32$0 = $126$hi;
  $23_1 = i64toi32_i32$1;
  i64toi32_i32$1 = $125$hi;
  i64toi32_i32$2 = $128$hi;
  i64toi32_i32$3 = $127$hi;
  $189($4_1 | 0, $23_1 | 0, i64toi32_i32$0 | 0, $125_1 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
  i64toi32_i32$1 = $4_1 + $101_1 | 0;
  i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
  i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
  $129_1 = i64toi32_i32$3;
  $129$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $4_1;
  i64toi32_i32$2 = HEAP32[$4_1 >> 2] | 0;
  i64toi32_i32$3 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
  $375$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $129$hi;
  i64toi32_i32$3 = $375$hi;
  $24_1 = i64toi32_i32$2;
  i64toi32_i32$2 = $129$hi;
  $132_1 = Math_fround(+Math_fround($188($24_1 | 0, i64toi32_i32$3 | 0, $129_1 | 0, i64toi32_i32$2 | 0)) + $119_1);
  HEAPF32[((((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 40 | 0) >> 2] | 0, 236) | 0) + 76 | 0) >> 2] = $132_1;
  global$0 = $4_1 + 48 | 0;
  return;
 }
 
 function $43($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $10_1 = 0, $33_1 = 0, $32_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $7_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $7_1 + -1 | 0;
    if (!$7_1) {
     break label$1
    }
    $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $10_1 + 4 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[$10_1 >> 2] | 0) >> 21 | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (127 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = 127;
      break label$3;
     }
     label$5 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (-128 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = -128;
     }
    }
    $32_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $33_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $33_1 + 1 | 0;
    HEAP8[$33_1 >> 0] = $32_1;
    continue label$2;
   };
  }
  return;
 }
 
 function $44($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $10_1 = 0, $37_1 = 0, $36_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $7_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $7_1 + -1 | 0;
    if (!$7_1) {
     break label$1
    }
    $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $10_1 + 4 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[$10_1 >> 2] | 0) >> 21 | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (127 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = 127;
      break label$3;
     }
     label$5 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (-128 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = -128;
     }
    }
    $36_1 = ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & 255 | 0) ^ 128 | 0;
    $37_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $37_1 + 1 | 0;
    HEAP8[$37_1 >> 0] = $36_1;
    continue label$2;
   };
  }
  return;
 }
 
 function $45($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $10_1 = 0, $33_1 = 0, $32_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $7_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $7_1 + -1 | 0;
    if (!$7_1) {
     break label$1
    }
    $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $10_1 + 4 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[$10_1 >> 2] | 0) >> 13 | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (32767 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = 32767;
      break label$3;
     }
     label$5 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (-32768 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = -32768;
     }
    }
    $32_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    $33_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $33_1 + 2 | 0;
    HEAP16[$33_1 >> 1] = $32_1;
    continue label$2;
   };
  }
  return;
 }
 
 function $46($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $10_1 = 0, $37_1 = 0, $36_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $7_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $7_1 + -1 | 0;
    if (!$7_1) {
     break label$1
    }
    $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $10_1 + 4 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[$10_1 >> 2] | 0) >> 13 | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (32767 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = 32767;
      break label$3;
     }
     label$5 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (-32768 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = -32768;
     }
    }
    $36_1 = ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) & 65535 | 0) ^ 32768 | 0;
    $37_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $37_1 + 2 | 0;
    HEAP16[$37_1 >> 1] = $36_1;
    continue label$2;
   };
  }
  return;
 }
 
 function $47($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $7_1 = 0, $10_1 = 0, $33_1 = 0, $41_1 = 0, $49_1 = 0, $48_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $7_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $7_1 + -1 | 0;
    if (!$7_1) {
     break label$1
    }
    $10_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $10_1 + 4 | 0;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[$10_1 >> 2] | 0) >> 13 | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (32767 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = 32767;
      break label$3;
     }
     label$5 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (-32768 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = -32768;
     }
    }
    $33_1 = 16;
    $41_1 = 16;
    $48_1 = ((((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << $33_1 | 0) >> $33_1 | 0) & 255 | 0) << 8 | 0 | (((((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << $41_1 | 0) >> $41_1 | 0) >> 8 | 0) & 255 | 0) | 0;
    $49_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
    HEAP32[($5_1 + 16 | 0) >> 2] = $49_1 + 2 | 0;
    HEAP16[$49_1 >> 1] = $48_1;
    continue label$2;
   };
  }
  return;
 }
 
 function $48($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = 0;
  HEAP8[($6_1 + 13 | 0) >> 0] = 1;
  HEAP8[($6_1 + 12 | 0) >> 0] = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
  HEAP8[($6_1 + 14 | 0) >> 0] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
  HEAP8[($6_1 + 15 | 0) >> 0] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((0 | 0) < (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $49(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $6_1 + 8 | 0 | 0);
    break label$1;
   }
   $50(HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0, $6_1 + 8 | 0 | 0);
  }
  global$0 = $6_1 + 32 | 0;
  return;
 }
 
 function $49($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $19_1 = 0, $102_1 = 0, $191_1 = 0, $206_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = -1;
  HEAP32[($4_1 + 12 | 0) >> 2] = 2147483647;
  label$1 : {
   label$2 : {
    if (!((0 | 0) == (HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 24 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $19_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($4_1 + 20 | 0) >> 2] = $19_1 + -1 | 0;
    if (!$19_1) {
     break label$3
    }
    label$5 : {
     label$6 : {
      if ((HEAPU8[(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0) {
       break label$6
      }
      HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      break label$5;
     }
     label$7 : {
      if (!(((HEAPU8[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
       break label$7
      }
      label$8 : {
       if (((HEAPU8[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0) {
        break label$8
       }
       if (!(HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 28 | 0) >> 2] | 0)) {
        break label$7
       }
      }
      $51(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0);
     }
    }
    continue label$4;
   };
  }
  label$9 : {
   label$10 : {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
     break label$10
    }
    $52(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
    break label$9;
   }
   HEAP32[($4_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
   label$11 : {
    label$12 : while (1) {
     $102_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
     HEAP32[($4_1 + 20 | 0) >> 2] = $102_1 + -1 | 0;
     if (!$102_1) {
      break label$11
     }
     label$13 : {
      if (!(((HEAPU8[(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$13
      }
      if (!(((HEAPU8[(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) != (4 | 0) & 1 | 0)) {
       break label$13
      }
      HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) + 60 | 0) >> 2] | 0;
      label$14 : {
       if (HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) + 232 | 0) >> 2] | 0) {
        break label$14
       }
       if (!((HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) + 64 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$14
       }
       HEAP32[($4_1 + 8 | 0) >> 2] = HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 20 | 0) >> 2] | 0, 236) | 0) + 64 | 0) >> 2] | 0;
      }
      label$15 : {
       if (!((HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) < (HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$15
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
       HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
      }
     }
     continue label$12;
    };
   }
   label$16 : {
    if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
     break label$16
    }
    $191_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
    HEAP32[($191_1 + 13068 | 0) >> 2] = (HEAP32[($191_1 + 13068 | 0) >> 2] | 0) + 1 | 0;
    HEAP8[(((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 16 | 0) >> 2] | 0, 236) | 0) >> 0] = 0;
    $52(HEAP32[($4_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0);
    break label$9;
   }
   $206_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
   HEAP32[($206_1 + 13064 | 0) >> 2] = (HEAP32[($206_1 + 13064 | 0) >> 2] | 0) + 1 | 0;
  }
  global$0 = $4_1 + 32 | 0;
  return;
 }
 
 function $50($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $17_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((0 | 0) == (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[$4_1 >> 2] = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[$4_1 >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  label$3 : {
   label$4 : while (1) {
    $17_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    HEAP32[($4_1 + 4 | 0) >> 2] = $17_1 + -1 | 0;
    if (!$17_1) {
     break label$3
    }
    label$5 : {
     if (!(((HEAPU8[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$5
     }
     if (!(((HEAPU8[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
      break label$5
     }
     if (!(((HEAPU8[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      label$7 : {
       if (!(HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[$4_1 >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 12 | 0) >> 2] | 0)) {
        break label$7
       }
       HEAP8[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] = 2;
       break label$6;
      }
      $53(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0);
     }
     break label$3;
    }
    continue label$4;
   };
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $51($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP8[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] = 4;
  return;
 }
 
 function $52($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $472 = 0, $42_1 = 0, $60_1 = 0, $141_1 = 0, $150_1 = 0, $225 = 0, $228 = 0, $252 = 0, $278 = 0, $360 = 0, $385 = 0, $776 = 0.0, $453 = 0, $494 = 0, $702 = 0, $179_1 = 0, $186_1 = 0, $190_1 = 0, $197_1 = 0, $204_1 = 0, $231 = 0, $257 = 0, $291 = 0, $505 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if (!((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 13056 | 0) >> 2] | 0) & (1 << ((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) | 0) | 0)) {
      break label$3
     }
     $42_1 = HEAP32[(((HEAP32[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) + (((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
     HEAP32[($5_1 + 16 | 0) >> 2] = $42_1;
     label$4 : {
      if (($42_1 | 0) != (0 | 0) & 1 | 0) {
       break label$4
      }
      $60_1 = HEAP32[(((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 540 | 0) >> 2] | 0) + 4 | 0) + (((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = $60_1;
      label$5 : {
       if (($60_1 | 0) != (0 | 0) & 1 | 0) {
        break label$5
       }
       break label$1;
      }
     }
     label$6 : {
      if (!((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) != (1 | 0) & 1 | 0)) {
       break label$6
      }
     }
     label$7 : {
      label$8 : {
       if (!(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 112 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
        break label$8
       }
       HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 8 | 0) >> 2] = HEAP32[(global$4 + ((HEAP8[((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 112 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
       break label$7;
      }
      HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 8 | 0) >> 2] = HEAP32[(global$4 + (((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 127 | 0) << 2 | 0) | 0) >> 2] | 0;
     }
     HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
     break label$2;
    }
    label$9 : {
     label$10 : {
      if (!((-1 | 0) != (HEAP32[((global$3 + 11744 | 0) + ((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$10
      }
      $141_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      $150_1 = 2;
      HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[(($141_1 + ((HEAP32[(($141_1 + Math_imul(HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0, 40) | 0) + 1084 | 0) >> 2] | 0) << $150_1 | 0) | 0) + 28 | 0) >> 2] | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[((global$3 + 11744 | 0) + ((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) << $150_1 | 0) | 0) >> 2] | 0;
      label$11 : {
       if (!((0 | 0) == (HEAP32[(((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$11
       }
       HEAP32[$5_1 >> 2] = 0;
       $179_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
       $186_1 = HEAP32[((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) >> 2] | 0;
       $190_1 = HEAP32[$5_1 >> 2] | 0 ? 1 : 0;
       $197_1 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 12 | 0) >> 2] | 0;
       $204_1 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] | 0;
       label$12 : {
        label$13 : {
         if (!((HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
          break label$13
         }
         $225 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] | 0;
         break label$12;
        }
        label$14 : {
         label$15 : {
          if (!(HEAP32[$5_1 >> 2] | 0)) {
           break label$15
          }
          $228 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
          break label$14;
         }
         $228 = -1;
        }
        $225 = $228;
       }
       $231 = $225;
       label$16 : {
        label$17 : {
         if (!((HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 16 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
          break label$17
         }
         $252 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 16 | 0) >> 2] | 0;
         break label$16;
        }
        $252 = HEAP32[$5_1 >> 2] | 0 ? 1 : -1;
       }
       $257 = $252;
       label$18 : {
        label$19 : {
         if (!((HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 20 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
          break label$19
         }
         $278 = HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 20 | 0) >> 2] | 0;
         break label$18;
        }
        $278 = HEAP32[$5_1 >> 2] | 0 ? 1 : -1;
       }
       $291 = $5($179_1 | 0, $186_1 | 0, $190_1 | 0, $197_1 | 0, $204_1 | 0, $231 | 0, $257 | 0, $278 | 0, HEAP32[(((HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 4 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] | 0 | 0) | 0;
       HEAP32[(((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $291;
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[(((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      break label$9;
     }
     label$20 : {
      label$21 : {
       if (!((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 4 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
        break label$21
       }
       HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1052 | 0) >> 2] | 0;
       break label$20;
      }
      $360 = HEAP32[(((HEAP32[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = $360;
      label$22 : {
       if (($360 | 0) != (0 | 0) & 1 | 0) {
        break label$22
       }
       $385 = HEAP32[(((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
       HEAP32[($5_1 + 16 | 0) >> 2] = $385;
       label$23 : {
        if (($385 | 0) != (0 | 0) & 1 | 0) {
         break label$23
        }
        break label$1;
       }
      }
     }
    }
    label$24 : {
     label$25 : {
      if (!(((HEAPU8[((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 112 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
       break label$25
      }
      HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 8 | 0) >> 2] = HEAP32[(global$4 + ((HEAP8[((HEAP32[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 112 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0;
      break label$24;
     }
     HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 8 | 0) >> 2] = HEAP32[(global$4 + ((((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) + (HEAP32[(global$3 + 12340 | 0) >> 2] | 0) | 0) & 127 | 0) << 2 | 0) | 0) >> 2] | 0;
    }
    $776 = +$146(+(+Math_fround(Math_fround(HEAP32[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 1732 | 0) >> 2] | 0 | 0) * Math_fround(HEAPF32[(global$3 + 11664 | 0) >> 2])) / 440.0));
    label$26 : {
     label$27 : {
      if (!(Math_abs($776) < 2147483648.0)) {
       break label$27
      }
      $453 = ~~$776;
      break label$26;
     }
     $453 = -2147483648;
    }
    HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 8 | 0) >> 2] = $453;
    $76(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0) & 255 | 0 | 0);
   }
   $472 = 236;
   HEAP8[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, $472) | 0) + 1724 | 0) >> 0] = 1;
   HEAP8[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, $472) | 0) + 1725 | 0) >> 0] = HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0;
   HEAP8[(((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, $472) | 0) + 1726 | 0) >> 0] = HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0;
   $494 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   $505 = $77((HEAPU8[($494 + 7 | 0) >> 0] | 0) & 255 | 0 | 0, Math_fround(Math_fround(HEAPF32[((global$3 + 11680 | 0) + ((HEAPU8[($494 + 4 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2]))) | 0;
   HEAP8[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 3 | 0) >> 0] = $505;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 16 | 0) >> 2] = 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 20 | 0) >> 2] = 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 44 | 0) >> 2] = 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 48 | 0) >> 2] = HEAP32[((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 96 | 0) >> 2] | 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 36 | 0) >> 2] = HEAP32[((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 92 | 0) >> 2] | 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 40 | 0) >> 2] = 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 52 | 0) >> 2] = HEAP32[((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 100 | 0) >> 2] | 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 56 | 0) >> 2] = 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 212 | 0) >> 2] = HEAP32[((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 104 | 0) >> 2] | 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 208 | 0) >> 2] = 0;
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 216 | 0) >> 2] = 0;
   HEAP32[($5_1 + 12 | 0) >> 2] = 0;
   label$28 : {
    label$29 : while (1) {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (32 | 0) & 1 | 0)) {
      break label$28
     }
     HEAP32[(((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 80 | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$29;
    };
   }
   label$30 : {
    label$31 : {
     if (!((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 16 | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
      break label$31
     }
     HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 228 | 0) >> 2] = HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 16 | 0) >> 2] | 0;
     break label$30;
    }
    $702 = 24;
    HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 228 | 0) >> 2] = ((HEAPU8[((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 111 | 0) >> 0] | 0) << $702 | 0) >> $702 | 0;
   }
   $55(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
   $57(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
   label$32 : {
    if (!(((HEAPU8[((HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 64 | 0)) {
     break label$32
    }
    HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 220 | 0) >> 2] = 0;
    HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 24 | 0) >> 2] = 0;
    HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 224 | 0) >> 2] = 0;
    $28(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0;
    $29(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP32[((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0) + 32 | 0) >> 2] = 0;
   $29(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $53($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(((HEAPU8[((HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0) & 255 | 0) & 64 | 0)) {
     break label$2
    }
    HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 236) | 0) + 220 | 0) >> 2] = 3;
    HEAP8[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] = 3;
    $28(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
    $29(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    break label$1;
   }
   HEAP8[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] = 3;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $54($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $116_1 = 0, $178_1 = 0, $162_1 = 0, $223 = 0;
  $6_1 = global$0 - 80 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 76 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 72 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 68 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 64 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 60 | 0) >> 2] = ((HEAP32[($6_1 + 72 | 0) >> 2] | 0) & 240 | 0) >> 4 | 0;
  HEAP32[($6_1 + 56 | 0) >> 2] = (HEAP32[($6_1 + 72 | 0) >> 2] | 0) & 15 | 0;
  label$1 : {
   label$2 : {
    if (!((8 | 0) == (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($6_1 + 48 | 0) >> 2] = 0;
    HEAP8[($6_1 + 53 | 0) >> 0] = 1;
    HEAP8[($6_1 + 52 | 0) >> 0] = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
    HEAP8[($6_1 + 54 | 0) >> 0] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
    HEAP8[($6_1 + 55 | 0) >> 0] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
    $50(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, $6_1 + 48 | 0 | 0);
    break label$1;
   }
   label$3 : {
    label$4 : {
     if (!((9 | 0) == (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($6_1 + 40 | 0) >> 2] = 0;
     HEAP8[($6_1 + 45 | 0) >> 0] = 1;
     HEAP8[($6_1 + 44 | 0) >> 0] = HEAP32[($6_1 + 56 | 0) >> 2] | 0;
     HEAP8[($6_1 + 46 | 0) >> 0] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
     HEAP8[($6_1 + 47 | 0) >> 0] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
     label$5 : {
      label$6 : {
       if (!((0 | 0) < (HEAP32[($6_1 + 64 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$6
       }
       $49(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, $6_1 + 40 | 0 | 0);
       break label$5;
      }
      $50(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, $6_1 + 40 | 0 | 0);
     }
     break label$3;
    }
    label$7 : {
     label$8 : {
      if (!((12 | 0) == (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$8
      }
      label$9 : {
       label$10 : {
        if (!((HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 13056 | 0) >> 2] | 0) & (1 << (HEAP32[($6_1 + 56 | 0) >> 2] | 0) | 0) | 0)) {
         break label$10
        }
        HEAP32[(((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($6_1 + 56 | 0) >> 2] | 0, 40) | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
        break label$9;
       }
       HEAP32[((((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($6_1 + 56 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] = HEAP32[($6_1 + 68 | 0) >> 2] | 0;
      }
      break label$7;
     }
     label$11 : {
      label$12 : {
       if (!((14 | 0) == (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$12
       }
       HEAP32[((((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($6_1 + 56 | 0) >> 2] | 0, 40) | 0) + 20 | 0) >> 2] = (HEAP32[($6_1 + 68 | 0) >> 2] | 0) + ((HEAP32[($6_1 + 64 | 0) >> 2] | 0) << 7 | 0) | 0;
       HEAPF32[((((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($6_1 + 56 | 0) >> 2] | 0, 40) | 0) + 36 | 0) >> 2] = Math_fround(0 | 0);
       HEAP32[($6_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
       label$13 : {
        label$14 : while (1) {
         $116_1 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
         HEAP32[($6_1 + 36 | 0) >> 2] = $116_1 + -1 | 0;
         if (!$116_1) {
          break label$13
         }
         label$15 : {
          if (!((HEAPU8[(((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 36 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0)) {
           break label$15
          }
          if (!(((HEAPU8[((((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 36 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$15
          }
          $55(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0);
         }
         continue label$14;
        };
       }
       break label$11;
      }
      label$16 : {
       if (!((11 | 0) == (HEAP32[($6_1 + 60 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$16
       }
       label$17 : {
        label$18 : {
         if (!((64 | 0) == (HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$18
         }
         $162_1 = HEAP32[global$6 >> 2] | 0;
         HEAP32[$6_1 >> 2] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
         $127($162_1 | 0, global$3 + 1087 | 0 | 0, $6_1 | 0) | 0;
         HEAP32[((((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($6_1 + 56 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
         label$19 : {
          if (HEAP32[($6_1 + 64 | 0) >> 2] | 0) {
           break label$19
          }
          HEAP32[($6_1 + 32 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
          label$20 : {
           label$21 : while (1) {
            $178_1 = HEAP32[($6_1 + 32 | 0) >> 2] | 0;
            HEAP32[($6_1 + 32 | 0) >> 2] = $178_1 + -1 | 0;
            if (!$178_1) {
             break label$20
            }
            label$22 : {
             if (!(((HEAPU8[(((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 32 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (2 | 0) & 1 | 0)) {
              break label$22
             }
             if (!(((HEAPU8[((((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 32 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($6_1 + 56 | 0) >> 2] | 0 | 0) & 1 | 0)) {
              break label$22
             }
             $53(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0);
            }
            continue label$21;
           };
          }
         }
         break label$17;
        }
        label$23 : {
         if (!((4 | 0) == (HEAP32[($6_1 + 68 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$23
         }
         $223 = HEAP32[global$6 >> 2] | 0;
         HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
         $127($223 | 0, global$3 + 1159 | 0 | 0, $6_1 + 16 | 0 | 0) | 0;
         HEAP32[((((HEAP32[($6_1 + 76 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($6_1 + 56 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] = HEAP32[($6_1 + 64 | 0) >> 2] | 0;
         $56(HEAP32[($6_1 + 76 | 0) >> 2] | 0 | 0);
        }
       }
      }
     }
    }
   }
  }
  global$0 = $6_1 + 80 | 0;
  return;
 }
 
 function $55($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $54_1 = 0, $159_1 = 0, $195_1 = 0, $297 = 0.0, $219 = 0, $229 = 0, $233 = 0, $302 = 0.0, $248 = 0, $258 = 0, $262 = 0, $265 = 0, $317 = 0.0, $276 = 0;
  $4_1 = global$0 - 32 | 0;
  HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = (HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 20 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0;
  HEAP32[($4_1 + 16 | 0) >> 2] = HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 20 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[((HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    if (!(HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 212 | 0) >> 2] | 0)) {
     break label$3
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = 32;
    label$4 : {
     label$5 : while (1) {
      $54_1 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
      HEAP32[($4_1 + 4 | 0) >> 2] = $54_1 + -1 | 0;
      if (!$54_1) {
       break label$4
      }
      HEAP32[(((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 80 | 0) + ((HEAP32[($4_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
      continue label$5;
     };
    }
   }
   label$6 : {
    label$7 : {
     label$8 : {
      if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) == (8192 | 0) & 1 | 0) {
       break label$8
      }
      if ((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
       break label$8
      }
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) > (16383 | 0) & 1 | 0)) {
       break label$7
      }
     }
     HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 12 | 0) >> 2] = HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 8 | 0) >> 2] | 0;
     break label$6;
    }
    HEAP32[($4_1 + 16 | 0) >> 2] = (HEAP32[($4_1 + 16 | 0) >> 2] | 0) - 8192 | 0;
    label$9 : {
     if (Math_fround(HEAPF32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 36 | 0) >> 2]) != Math_fround(0 | 0) & 1 | 0) {
      break label$9
     }
     HEAP32[$4_1 >> 2] = Math_imul(HEAP32[($4_1 + 16 | 0) >> 2] | 0, HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 32 | 0) >> 2] | 0);
     label$10 : {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$10
      }
      HEAP32[$4_1 >> 2] = 0 - (HEAP32[$4_1 >> 2] | 0) | 0;
     }
     $159_1 = HEAP32[$4_1 >> 2] | 0;
     HEAPF32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 36 | 0) >> 2] = Math_fround(+HEAPF64[(global$7 + (($159_1 >>> 2 | 0) & 2040 | 0) | 0) >> 3] * +HEAPF64[(global$8 + (($159_1 >> 13 | 0) << 3 | 0) | 0) >> 3]);
    }
    label$11 : {
     label$12 : {
      if (!((HEAP32[($4_1 + 16 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$12
      }
      $195_1 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
      $297 = +Math_fround(HEAPF32[(($195_1 + Math_imul(HEAPU8[(($195_1 + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 1725 | 0) >> 0] | 0, 40) | 0) + 1120 | 0) >> 2]) * +(HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 8 | 0) >> 2] | 0 | 0);
      label$13 : {
       label$14 : {
        if (!(Math_abs($297) < 2147483648.0)) {
         break label$14
        }
        $219 = ~~$297;
        break label$13;
       }
       $219 = -2147483648;
      }
      HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 12 | 0) >> 2] = $219;
      break label$11;
     }
     $229 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
     $233 = $229 + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0;
     $302 = +(HEAP32[($233 + 1732 | 0) >> 2] | 0 | 0) / +Math_fround(HEAPF32[(($229 + Math_imul(HEAPU8[($233 + 1725 | 0) >> 0] | 0, 40) | 0) + 1120 | 0) >> 2]);
     label$15 : {
      label$16 : {
       if (!(Math_abs($302) < 2147483648.0)) {
        break label$16
       }
       $248 = ~~$302;
       break label$15;
      }
      $248 = -2147483648;
     }
     HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 12 | 0) >> 2] = $248;
    }
   }
   $258 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
   $262 = $258 + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0;
   $265 = HEAP32[($262 + 1728 | 0) >> 2] | 0;
   HEAPF64[($4_1 + 8 | 0) >> 3] = +Math_fround(+(HEAP32[($265 + 12 | 0) >> 2] | 0 | 0) * +(HEAP32[($262 + 1736 | 0) >> 2] | 0 | 0) / (+(HEAP32[($265 + 32 | 0) >> 2] | 0 | 0) * +(HEAP32[($258 + 4 | 0) >> 2] | 0 | 0)) * 4096.0);
   label$17 : {
    if (!(HEAP32[($4_1 + 20 | 0) >> 2] | 0)) {
     break label$17
    }
    HEAPF64[($4_1 + 8 | 0) >> 3] = -+HEAPF64[($4_1 + 8 | 0) >> 3];
   }
   $317 = +HEAPF64[($4_1 + 8 | 0) >> 3];
   label$18 : {
    label$19 : {
     if (!(Math_abs($317) < 2147483648.0)) {
      break label$19
     }
     $276 = ~~$317;
     break label$18;
    }
    $276 = -2147483648;
   }
   HEAP32[((((HEAP32[($4_1 + 28 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 24 | 0) >> 2] | 0, 236) | 0) + 20 | 0) >> 2] = $276;
  }
  return;
 }
 
 function $56($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $11_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $11_1 + -1 | 0;
    if (!$11_1) {
     break label$1
    }
    label$3 : {
     if (!(((HEAPU8[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$4 : {
      if (((HEAPU8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0) {
       break label$4
      }
      if (!(((HEAPU8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$3
      }
     }
     $57(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
     $29(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
    }
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $57($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $85_1 = 0, $92_1 = 0, $101_1 = 0, $364$hi = 0, $365$hi = 0, $366$hi = 0, $367$hi = 0, $368$hi = 0, $133_1 = 0, $140_1 = 0, $149_1 = 0, $370$hi = 0, $371$hi = 0, $372$hi = 0, $373$hi = 0, $374$hi = 0, $181_1 = 0, $188_1 = 0, $197_1 = 0, $376$hi = 0, $377$hi = 0, $378$hi = 0, $379$hi = 0, $380$hi = 0, $215 = 0, $222 = 0, $231 = 0, $382$hi = 0, $383$hi = 0, $384$hi = 0, $385$hi = 0, $386$hi = 0, $285 = 0, $288 = 0, $295 = 0, $304 = 0, $388$hi = 0, $389$hi = 0, $390$hi = 0, $391$hi = 0, $392$hi = 0, $364 = 0, $68_1 = 0, $368 = 0, $630$hi = 0, $69_1 = 0, $345 = Math_fround(0), $370 = 0, $70_1 = 0, $374 = 0, $754$hi = 0, $71_1 = 0, $348 = Math_fround(0), $376 = 0, $72_1 = 0, $380 = 0, $878$hi = 0, $73_1 = 0, $351 = Math_fround(0), $382 = 0, $74_1 = 0, $386 = 0, $977$hi = 0, $75_1 = 0, $354 = Math_fround(0), $388 = 0, $76_1 = 0, $392 = 0, $1160$hi = 0, $77_1 = 0, $363 = Math_fround(0);
  $4_1 = global$0 - 176 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 172 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 168 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 164 | 0) >> 2] = Math_imul(Math_imul((HEAPU8[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 3 | 0) >> 0] | 0) & 255 | 0, HEAP32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 8 | 0) >> 2] | 0), HEAP32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 24 | 0) >> 2] | 0);
  label$1 : {
   label$2 : {
    if ((HEAP32[((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 1 | 0) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if (!((HEAP32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 228 | 0) >> 2] | 0 | 0) > (60 | 0) & 1 | 0)) {
       break label$4
      }
      if (!((HEAP32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 228 | 0) >> 2] | 0 | 0) < (68 | 0) & 1 | 0)) {
       break label$4
      }
      $85_1 = 236;
      HEAP32[(((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $85_1) | 0) + 1956 | 0) >> 2] = 3;
      $92_1 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
      $186($4_1 + 48 | 0 | 0, +(+(HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) * +Math_fround(HEAPF32[((HEAP32[(($92_1 + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $85_1) | 0) + 1728 | 0) >> 2] | 0) + 84 | 0) >> 2]) * +Math_fround(HEAPF32[($92_1 + 16 | 0) >> 2])));
      $101_1 = 8;
      i64toi32_i32$2 = ($4_1 + 48 | 0) + $101_1 | 0;
      i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
      i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
      $364 = i64toi32_i32$0;
      $364$hi = i64toi32_i32$1;
      i64toi32_i32$2 = $4_1;
      i64toi32_i32$1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
      i64toi32_i32$0 = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
      $365$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 1072300032;
      $366$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $367$hi = i64toi32_i32$0;
      i64toi32_i32$0 = $365$hi;
      i64toi32_i32$0 = $364$hi;
      i64toi32_i32$0 = $367$hi;
      i64toi32_i32$0 = $366$hi;
      i64toi32_i32$0 = $365$hi;
      $68_1 = i64toi32_i32$1;
      i64toi32_i32$1 = $364$hi;
      i64toi32_i32$2 = $367$hi;
      i64toi32_i32$3 = $366$hi;
      $189($4_1 + 32 | 0 | 0, $68_1 | 0, i64toi32_i32$0 | 0, $364 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
      i64toi32_i32$1 = ($4_1 + 32 | 0) + $101_1 | 0;
      i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
      i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
      $368 = i64toi32_i32$3;
      $368$hi = i64toi32_i32$2;
      i64toi32_i32$1 = $4_1;
      i64toi32_i32$2 = HEAP32[($4_1 + 32 | 0) >> 2] | 0;
      i64toi32_i32$3 = HEAP32[($4_1 + 36 | 0) >> 2] | 0;
      $630$hi = i64toi32_i32$3;
      i64toi32_i32$3 = $368$hi;
      i64toi32_i32$3 = $630$hi;
      $69_1 = i64toi32_i32$2;
      i64toi32_i32$2 = $368$hi;
      $345 = Math_fround($188($69_1 | 0, i64toi32_i32$3 | 0, $368 | 0, i64toi32_i32$2 | 0));
      HEAPF32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 68 | 0) >> 2] = $345;
      break label$3;
     }
     label$5 : {
      label$6 : {
       if (!((HEAP32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 228 | 0) >> 2] | 0 | 0) < (5 | 0) & 1 | 0)) {
        break label$6
       }
       $133_1 = 236;
       HEAP32[(((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $133_1) | 0) + 1956 | 0) >> 2] = 1;
       $140_1 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
       $186($4_1 + 80 | 0 | 0, +(+(HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) * +Math_fround(HEAPF32[((HEAP32[(($140_1 + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $133_1) | 0) + 1728 | 0) >> 2] | 0) + 84 | 0) >> 2]) * +Math_fround(HEAPF32[($140_1 + 16 | 0) >> 2])));
       $149_1 = 8;
       i64toi32_i32$1 = ($4_1 + 80 | 0) + $149_1 | 0;
       i64toi32_i32$2 = HEAP32[i64toi32_i32$1 >> 2] | 0;
       i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
       $370 = i64toi32_i32$2;
       $370$hi = i64toi32_i32$3;
       i64toi32_i32$1 = $4_1;
       i64toi32_i32$3 = HEAP32[($4_1 + 80 | 0) >> 2] | 0;
       i64toi32_i32$2 = HEAP32[($4_1 + 84 | 0) >> 2] | 0;
       $371$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 1072365568;
       $372$hi = i64toi32_i32$2;
       i64toi32_i32$2 = 0;
       $373$hi = i64toi32_i32$2;
       i64toi32_i32$2 = $371$hi;
       i64toi32_i32$2 = $370$hi;
       i64toi32_i32$2 = $373$hi;
       i64toi32_i32$2 = $372$hi;
       i64toi32_i32$2 = $371$hi;
       $70_1 = i64toi32_i32$3;
       i64toi32_i32$3 = $370$hi;
       i64toi32_i32$1 = $373$hi;
       i64toi32_i32$0 = $372$hi;
       $189($4_1 + 64 | 0 | 0, $70_1 | 0, i64toi32_i32$2 | 0, $370 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$0 | 0);
       i64toi32_i32$3 = ($4_1 + 64 | 0) + $149_1 | 0;
       i64toi32_i32$0 = HEAP32[i64toi32_i32$3 >> 2] | 0;
       i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
       $374 = i64toi32_i32$0;
       $374$hi = i64toi32_i32$1;
       i64toi32_i32$3 = $4_1;
       i64toi32_i32$1 = HEAP32[($4_1 + 64 | 0) >> 2] | 0;
       i64toi32_i32$0 = HEAP32[($4_1 + 68 | 0) >> 2] | 0;
       $754$hi = i64toi32_i32$0;
       i64toi32_i32$0 = $374$hi;
       i64toi32_i32$0 = $754$hi;
       $71_1 = i64toi32_i32$1;
       i64toi32_i32$1 = $374$hi;
       $348 = Math_fround($188($71_1 | 0, i64toi32_i32$0 | 0, $374 | 0, i64toi32_i32$1 | 0));
       HEAPF32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 68 | 0) >> 2] = $348;
       break label$5;
      }
      label$7 : {
       label$8 : {
        if (!((HEAP32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 228 | 0) >> 2] | 0 | 0) > (123 | 0) & 1 | 0)) {
         break label$8
        }
        $181_1 = 236;
        HEAP32[(((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $181_1) | 0) + 1956 | 0) >> 2] = 2;
        $188_1 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
        $186($4_1 + 112 | 0 | 0, +(+(HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) * +Math_fround(HEAPF32[((HEAP32[(($188_1 + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $181_1) | 0) + 1728 | 0) >> 2] | 0) + 84 | 0) >> 2]) * +Math_fround(HEAPF32[($188_1 + 16 | 0) >> 2])));
        $197_1 = 8;
        i64toi32_i32$3 = ($4_1 + 112 | 0) + $197_1 | 0;
        i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
        i64toi32_i32$0 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
        $376 = i64toi32_i32$1;
        $376$hi = i64toi32_i32$0;
        i64toi32_i32$3 = $4_1;
        i64toi32_i32$0 = HEAP32[($4_1 + 112 | 0) >> 2] | 0;
        i64toi32_i32$1 = HEAP32[($4_1 + 116 | 0) >> 2] | 0;
        $377$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 1072365568;
        $378$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        $379$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $377$hi;
        i64toi32_i32$1 = $376$hi;
        i64toi32_i32$1 = $379$hi;
        i64toi32_i32$1 = $378$hi;
        i64toi32_i32$1 = $377$hi;
        $72_1 = i64toi32_i32$0;
        i64toi32_i32$0 = $376$hi;
        i64toi32_i32$3 = $379$hi;
        i64toi32_i32$2 = $378$hi;
        $189($4_1 + 96 | 0 | 0, $72_1 | 0, i64toi32_i32$1 | 0, $376 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$2 | 0);
        i64toi32_i32$0 = ($4_1 + 96 | 0) + $197_1 | 0;
        i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
        i64toi32_i32$3 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
        $380 = i64toi32_i32$2;
        $380$hi = i64toi32_i32$3;
        i64toi32_i32$0 = $4_1;
        i64toi32_i32$3 = HEAP32[($4_1 + 96 | 0) >> 2] | 0;
        i64toi32_i32$2 = HEAP32[($4_1 + 100 | 0) >> 2] | 0;
        $878$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $380$hi;
        i64toi32_i32$2 = $878$hi;
        $73_1 = i64toi32_i32$3;
        i64toi32_i32$3 = $380$hi;
        $351 = Math_fround($188($73_1 | 0, i64toi32_i32$2 | 0, $380 | 0, i64toi32_i32$3 | 0));
        HEAPF32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 68 | 0) >> 2] = $351;
        break label$7;
       }
       $215 = 236;
       HEAP32[(((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $215) | 0) + 1956 | 0) >> 2] = 0;
       $222 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
       $186($4_1 + 144 | 0 | 0, +(+(HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) * +Math_fround(HEAPF32[((HEAP32[(($222 + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $215) | 0) + 1728 | 0) >> 2] | 0) + 84 | 0) >> 2]) * +Math_fround(HEAPF32[($222 + 16 | 0) >> 2])));
       $231 = 8;
       i64toi32_i32$0 = ($4_1 + 144 | 0) + $231 | 0;
       i64toi32_i32$3 = HEAP32[i64toi32_i32$0 >> 2] | 0;
       i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
       $382 = i64toi32_i32$3;
       $382$hi = i64toi32_i32$2;
       i64toi32_i32$0 = $4_1;
       i64toi32_i32$2 = HEAP32[($4_1 + 144 | 0) >> 2] | 0;
       i64toi32_i32$3 = HEAP32[($4_1 + 148 | 0) >> 2] | 0;
       $383$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 1071906816;
       $384$hi = i64toi32_i32$3;
       i64toi32_i32$3 = 0;
       $385$hi = i64toi32_i32$3;
       i64toi32_i32$3 = $383$hi;
       i64toi32_i32$3 = $382$hi;
       i64toi32_i32$3 = $385$hi;
       i64toi32_i32$3 = $384$hi;
       i64toi32_i32$3 = $383$hi;
       $74_1 = i64toi32_i32$2;
       i64toi32_i32$2 = $382$hi;
       i64toi32_i32$0 = $385$hi;
       i64toi32_i32$1 = $384$hi;
       $189($4_1 + 128 | 0 | 0, $74_1 | 0, i64toi32_i32$3 | 0, $382 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0);
       i64toi32_i32$2 = ($4_1 + 128 | 0) + $231 | 0;
       i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
       i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
       $386 = i64toi32_i32$1;
       $386$hi = i64toi32_i32$0;
       i64toi32_i32$2 = $4_1;
       i64toi32_i32$0 = HEAP32[($4_1 + 128 | 0) >> 2] | 0;
       i64toi32_i32$1 = HEAP32[($4_1 + 132 | 0) >> 2] | 0;
       $977$hi = i64toi32_i32$1;
       i64toi32_i32$1 = $386$hi;
       i64toi32_i32$1 = $977$hi;
       $75_1 = i64toi32_i32$0;
       i64toi32_i32$0 = $386$hi;
       $354 = Math_fround($188($75_1 | 0, i64toi32_i32$1 | 0, $386 | 0, i64toi32_i32$0 | 0));
       HEAPF32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 68 | 0) >> 2] = $354;
       HEAPF32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 72 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 68 | 0) >> 2]) * Math_fround(HEAP32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 228 | 0) >> 2] | 0 | 0));
       $285 = ((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0;
       HEAPF32[($285 + 68 | 0) >> 2] = Math_fround(Math_fround(HEAPF32[($285 + 68 | 0) >> 2]) * Math_fround(127 - (HEAP32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 228 | 0) >> 2] | 0) | 0 | 0));
      }
     }
    }
    break label$1;
   }
   $288 = 236;
   HEAP32[(((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $288) | 0) + 1956 | 0) >> 2] = 3;
   $295 = HEAP32[($4_1 + 172 | 0) >> 2] | 0;
   $186($4_1 + 16 | 0 | 0, +(+(HEAP32[($4_1 + 164 | 0) >> 2] | 0 | 0) * +Math_fround(HEAPF32[((HEAP32[(($295 + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, $288) | 0) + 1728 | 0) >> 2] | 0) + 84 | 0) >> 2]) * +Math_fround(HEAPF32[($295 + 16 | 0) >> 2])));
   $304 = 8;
   i64toi32_i32$2 = ($4_1 + 16 | 0) + $304 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $388 = i64toi32_i32$0;
   $388$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $4_1;
   i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
   $389$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 1072300032;
   $390$hi = i64toi32_i32$0;
   i64toi32_i32$0 = 0;
   $391$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $389$hi;
   i64toi32_i32$0 = $388$hi;
   i64toi32_i32$0 = $391$hi;
   i64toi32_i32$0 = $390$hi;
   i64toi32_i32$0 = $389$hi;
   $76_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $388$hi;
   i64toi32_i32$2 = $391$hi;
   i64toi32_i32$3 = $390$hi;
   $189($4_1 | 0, $76_1 | 0, i64toi32_i32$0 | 0, $388 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
   i64toi32_i32$1 = $4_1 + $304 | 0;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
   i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
   $392 = i64toi32_i32$3;
   $392$hi = i64toi32_i32$2;
   i64toi32_i32$1 = $4_1;
   i64toi32_i32$2 = HEAP32[$4_1 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
   $1160$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $392$hi;
   i64toi32_i32$3 = $1160$hi;
   $77_1 = i64toi32_i32$2;
   i64toi32_i32$2 = $392$hi;
   $363 = Math_fround($188($77_1 | 0, i64toi32_i32$3 | 0, $392 | 0, i64toi32_i32$2 | 0));
   HEAPF32[((((HEAP32[($4_1 + 172 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 168 | 0) >> 2] | 0, 236) | 0) + 68 | 0) >> 2] = $363;
  }
  global$0 = $4_1 + 176 | 0;
  return;
 }
 
 function $58($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] = 1;
  $59(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $60(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $59($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 16 | 0) >> 2] = Math_fround(Math_fround(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) / Math_fround(100.0));
  return;
 }
 
 function $60($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $16_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  label$1 : {
   if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13088 | 0) >> 2] | 0 | 0) > (HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13088 | 0) >> 2] = 0;
  }
  $61(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  $16_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($16_1 + 13080 | 0) >> 2] = HEAP32[($16_1 + 13076 | 0) >> 2] | 0;
  HEAP32[(global$3 + 11656 | 0) >> 2] = 5e5;
  label$2 : {
   if (!(HEAP32[($4_1 + 8 | 0) >> 2] | 0)) {
    break label$2
   }
   $62(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $61($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
     break label$1
    }
    $68(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 40) | 0) + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1056 | 0) >> 2] | 0;
    HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 40) | 0) + 16 | 0) >> 2] = -1;
    HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 40) | 0) + 32 | 0) >> 2] = 2;
    HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 40) | 0) >> 2] = 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $78(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $62($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $215 = 0, $272 = Math_fround(0), $20_1 = 0, $239 = 0, $243 = 0, $256 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $78(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0);
  label$1 : {
   label$2 : {
    label$3 : while (1) {
     if (!(Math_fround(Math_fround(HEAP32[(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) >> 2] | 0 | 0) / Math_fround(HEAPF32[(global$3 + 11660 | 0) >> 2])) < Math_fround(HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$2
     }
     $20_1 = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) + -4 | 0;
     label$4 : {
      label$5 : {
       switch ($20_1 | 0) {
       case 7:
        HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 32 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
        HEAPF32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 36 | 0) >> 2] = Math_fround(0 | 0);
        break label$4;
       case 4:
        HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 20 | 0) >> 2] = ((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0) & 255 | 0) << 7 | 0) | 0;
        HEAPF32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 36 | 0) >> 2] = Math_fround(0 | 0);
        break label$4;
       case 0:
        HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 8 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
        break label$4;
       case 1:
        HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 16 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
        break label$4;
       case 3:
        HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 24 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
        break label$4;
       case 5:
        label$16 : {
         label$17 : {
          if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13056 | 0) >> 2] | 0) & (1 << ((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) | 0) | 0)) {
           break label$17
          }
          HEAP32[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
          break label$16;
         }
         HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 4 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
        }
        break label$4;
       case 2:
        HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 12 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
        break label$4;
       case 9:
        $68(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0 | 0);
        break label$4;
       case 11:
        HEAP32[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
        break label$4;
       case 6:
        $215 = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0;
        HEAP32[(global$3 + 11656 | 0) >> 2] = HEAPU8[($215 + 4 | 0) >> 0] | 0 | ((HEAPU8[($215 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($215 + 6 | 0) >> 0] | 0) << 16 | 0) | 0;
        break label$4;
       case 95:
        break label$5;
       default:
        break label$4;
       };
      }
      $272 = Math_fround(Math_fround(HEAP32[(HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) >> 2] | 0 | 0) / Math_fround(HEAPF32[(global$3 + 11660 | 0) >> 2]));
      label$18 : {
       label$19 : {
        if (!($272 < Math_fround(4294967296.0) & $272 >= Math_fround(0.0) | 0)) {
         break label$19
        }
        $239 = ~~$272 >>> 0;
        break label$18;
       }
       $239 = 0;
      }
      HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13088 | 0) >> 2] = $239;
      break label$1;
     }
     $243 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
     HEAP32[($243 + 13080 | 0) >> 2] = (HEAP32[($243 + 13080 | 0) >> 2] | 0) + 8 | 0;
     continue label$3;
    };
   }
   label$20 : {
    if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0 | 0) != (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13076 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$20
    }
    $256 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
    HEAP32[($256 + 13080 | 0) >> 2] = (HEAP32[($256 + 13080 | 0) >> 2] | 0) + -8 | 0;
   }
   HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13088 | 0) >> 2] = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
  }
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $63($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13076 | 0) >> 2] | 0) + (((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13100 | 0) >> 2] | 0) - 1 | 0) << 3 | 0) | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = Math_imul((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) / (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0, 1e3);
  HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + ((Math_imul((HEAP32[(HEAP32[($3_1 + 8 | 0) >> 2] | 0) >> 2] | 0 | 0) % (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0, 1e3) | 0) / (HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) | 0) | 0;
  return HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0;
 }
 
 function $64($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $373 = Math_fround(0), $283 = 0, $380 = Math_fround(0), $385 = Math_fround(0), $39_1 = 0, $53_1 = 0, $312 = 0, $327 = 0, $344 = 0, $355 = 0, $368 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  label$1 : {
   label$2 : {
    if (HEAP32[(HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($6_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[$6_1 >> 2] = ((HEAP32[($6_1 + 16 | 0) >> 2] | 0) >>> 0) / ((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) >>> 0) | 0;
   HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13088 | 0) >> 2] | 0;
   HEAP32[($6_1 + 4 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13088 | 0) >> 2] | 0) + (HEAP32[$6_1 >> 2] | 0) | 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13088 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : while (1) {
      $373 = Math_fround(Math_fround(HEAP32[(HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) >> 2] | 0 | 0) / Math_fround(HEAPF32[(global$3 + 11660 | 0) >> 2]));
      label$6 : {
       label$7 : {
        if (!($373 < Math_fround(4294967296.0) & $373 >= Math_fround(0.0) | 0)) {
         break label$7
        }
        $39_1 = ~~$373 >>> 0;
        break label$6;
       }
       $39_1 = 0;
      }
      label$8 : {
       if (!($39_1 >>> 0 <= (HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13088 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$8
       }
       $53_1 = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) + -1 | 0;
       label$9 : {
        label$10 : {
         switch ($53_1 | 0) {
         case 0:
          label$26 : {
           label$27 : {
            if (((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
             break label$27
            }
            $50(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
            break label$26;
           }
           $49(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
          }
          break label$9;
         case 1:
          $50(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, 0 | 0);
          break label$9;
         case 2:
          $65(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
          break label$9;
         case 10:
          HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 32 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
          HEAPF32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 36 | 0) >> 2] = Math_fround(0 | 0);
          break label$9;
         case 7:
          HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 20 | 0) >> 2] = ((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0) & 255 | 0) << 7 | 0) | 0;
          HEAPF32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 36 | 0) >> 2] = Math_fround(0 | 0);
          $66(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
          break label$9;
         case 3:
          HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 8 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
          $56(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
          break label$9;
         case 4:
          HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 16 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
          break label$9;
         case 6:
          HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 24 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
          $56(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
          break label$9;
         case 8:
          label$28 : {
           label$29 : {
            if (!((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13056 | 0) >> 2] | 0) & (1 << ((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) | 0) | 0)) {
             break label$29
            }
            HEAP32[(((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
            break label$28;
           }
           HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 4 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
          }
          break label$9;
         case 5:
          HEAP32[((((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) + 12 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
          label$30 : {
           if (((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0) {
            break label$30
           }
           $67(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
          }
          break label$9;
         case 12:
          $68(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0 | 0);
          break label$9;
         case 13:
          $69(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
          break label$9;
         case 11:
          $70(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0);
          break label$9;
         case 14:
          HEAP32[(((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 1084 | 0) + Math_imul((HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0, 40) | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
          break label$9;
         case 9:
          $283 = HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0;
          HEAP32[(global$3 + 11656 | 0) >> 2] = HEAPU8[($283 + 4 | 0) >> 0] | 0 | ((HEAPU8[($283 + 7 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($283 + 6 | 0) >> 0] | 0) << 16 | 0) | 0;
          break label$9;
         case 98:
          break label$10;
         default:
          break label$9;
         };
        }
        label$31 : {
         if (!((0 | 0) != (HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) & 1 | 0)) {
          break label$31
         }
         break label$9;
        }
        HEAP32[(HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 2] = 0;
        HEAP32[($6_1 + 28 | 0) >> 2] = Math_imul((HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13088 | 0) >> 2] | 0) - (HEAP32[($6_1 + 8 | 0) >> 2] | 0) | 0, HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0);
        break label$1;
       }
       $312 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
       HEAP32[($312 + 13080 | 0) >> 2] = (HEAP32[($312 + 13080 | 0) >> 2] | 0) + 8 | 0;
       continue label$5;
      }
      break label$5;
     };
     $380 = Math_fround(Math_fround(HEAP32[(HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) >> 2] | 0 | 0) / Math_fround(HEAPF32[(global$3 + 11660 | 0) >> 2]));
     label$32 : {
      label$33 : {
       if (!($380 < Math_fround(4294967296.0) & $380 >= Math_fround(0.0) | 0)) {
        break label$33
       }
       $327 = ~~$380 >>> 0;
       break label$32;
      }
      $327 = 0;
     }
     label$34 : {
      label$35 : {
       if (!($327 >>> 0 > (HEAP32[($6_1 + 4 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
        break label$35
       }
       $71(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, $6_1 + 20 | 0 | 0, (HEAP32[($6_1 + 4 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13088 | 0) >> 2] | 0) | 0 | 0);
       break label$34;
      }
      $344 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
      $385 = Math_fround(Math_fround(HEAP32[(HEAP32[($344 + 13080 | 0) >> 2] | 0) >> 2] | 0 | 0) / Math_fround(HEAPF32[(global$3 + 11660 | 0) >> 2]));
      label$36 : {
       label$37 : {
        if (!($385 < Math_fround(4294967296.0) & $385 >= Math_fround(0.0) | 0)) {
         break label$37
        }
        $355 = ~~$385 >>> 0;
        break label$36;
       }
       $355 = 0;
      }
      $71($344 | 0, $6_1 + 20 | 0 | 0, $355 - (HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 13088 | 0) >> 2] | 0) | 0 | 0);
     }
     continue label$4;
    };
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = Math_imul(HEAP32[$6_1 >> 2] | 0, HEAP32[((HEAP32[($6_1 + 24 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0);
  }
  $368 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $368 | 0;
 }
 
 function $65($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $8_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $8_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $8_1 + -1 | 0;
    if (!$8_1) {
     break label$1
    }
    label$3 : {
     if (!(((HEAPU8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$3
     }
     if (!(((HEAPU8[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
      break label$3
     }
     if (!(((HEAPU8[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) + 2 | 0) >> 0] | 0) & 255 | 0 | 0) == ((HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP8[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) + 3 | 0) >> 0] = HEAPU8[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0;
     $57(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
     $29(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
     break label$1;
    }
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $66($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    $11_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    HEAP32[($3_1 + 4 | 0) >> 2] = $11_1 + -1 | 0;
    if (!$11_1) {
     break label$1
    }
    label$3 : {
     if (!((HEAPU8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0)) {
      break label$3
     }
     if (!(((HEAPU8[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     $55(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0);
    }
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $67($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0;
  label$1 : {
   label$2 : while (1) {
    $11_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $11_1 + -1 | 0;
    if (!$11_1) {
     break label$1
    }
    label$3 : {
     if (!(((HEAPU8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$3
     }
     if (!(((HEAPU8[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     $53(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    }
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $68($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 16 | 0;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 40) | 0) + 8 | 0) >> 2] = 90;
  HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 40) | 0) + 24 | 0) >> 2] = 127;
  HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] = 0;
  HEAP32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 40) | 0) + 20 | 0) >> 2] = 8192;
  HEAPF32[((((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($4_1 + 8 | 0) >> 2] | 0, 40) | 0) + 36 | 0) >> 2] = Math_fround(0 | 0);
  return;
 }
 
 function $69($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0;
  label$1 : {
   label$2 : while (1) {
    $11_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $11_1 + -1 | 0;
    if (!$11_1) {
     break label$1
    }
    label$3 : {
     if (!(((HEAPU8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0)) {
      break label$3
     }
     if (!(((HEAPU8[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$4 : {
      label$5 : {
       if (!(HEAP32[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1084 | 0) + Math_imul(HEAP32[($3_1 + 4 | 0) >> 2] | 0, 40) | 0) + 12 | 0) >> 2] | 0)) {
        break label$5
       }
       HEAP8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] = 2;
       break label$4;
      }
      $53(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
     }
    }
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $70($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $11_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0;
  HEAP32[($3_1 + 4 | 0) >> 2] = (HEAPU8[((HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13080 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0;
  label$1 : {
   label$2 : while (1) {
    $11_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = $11_1 + -1 | 0;
    if (!$11_1) {
     break label$1
    }
    label$3 : {
     if (!(((HEAPU8[((((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) + 1 | 0) >> 0] | 0) & 255 | 0 | 0) == (HEAP32[($3_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     if (!((HEAPU8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0)) {
      break label$3
     }
     if (!(((HEAPU8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0 | 0) != (4 | 0) & 1 | 0)) {
      break label$3
     }
     $51(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
    }
    continue label$2;
   };
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $71($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $39_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = 1;
    break label$1;
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = 2;
  }
  label$3 : {
   label$4 : while (1) {
    if (!(HEAP32[($5_1 + 20 | 0) >> 2] | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    label$5 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1064 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1064 | 0) >> 2] | 0;
    }
    $72(HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
    FUNCTION_TABLE[HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1060 | 0) >> 2] | 0 | 0](HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0, HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1072 | 0) >> 2] | 0, Math_imul(HEAP32[($5_1 + 16 | 0) >> 2] | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0));
    $39_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[$39_1 >> 2] = (HEAP32[$39_1 >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
    continue label$4;
   };
  }
  global$0 = $5_1 + 32 | 0;
  return;
 }
 
 function $72($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $14_1 = 0, $48_1 = 0, $6_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $6_1 = HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1072 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 1 | 0)) {
     break label$2
    }
    $14_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 2 | 0;
    break label$1;
   }
   $14_1 = (HEAP32[($4_1 + 8 | 0) >> 2] | 0) << 3 | 0;
  }
  $200($6_1 | 0, 0 | 0, $14_1 | 0) | 0;
  HEAP32[($4_1 + 4 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    label$5 : {
     if (!((HEAPU8[(((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($4_1 + 4 | 0) >> 2] | 0, 236) | 0) >> 0] | 0) & 255 | 0)) {
      break label$5
     }
     $30(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($4_1 + 12 | 0) >> 2] | 0) + 1072 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
    }
    HEAP32[($4_1 + 4 | 0) >> 2] = (HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  $48_1 = HEAP32[($4_1 + 12 | 0) >> 2] | 0;
  HEAP32[($48_1 + 13088 | 0) >> 2] = (HEAP32[($48_1 + 13088 | 0) >> 2] | 0) + (HEAP32[($4_1 + 8 | 0) >> 2] | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return;
 }
 
 function $73($0_1) {
  $0_1 = Math_fround($0_1);
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAPF32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAPF32[(global$3 + 11664 | 0) >> 2] = Math_fround(HEAPF32[($3_1 + 12 | 0) >> 2]);
  return;
 }
 
 function $74() {
  return global$4 | 0;
 }
 
 function $75() {
  var $2_1 = 0, $13_1 = 0;
  $2_1 = global$0 - 16 | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
     break label$1
    }
    $13_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0;
    HEAP32[(global$4 + $13_1 | 0) >> 2] = HEAP32[(global$9 + $13_1 | 0) >> 2] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $76($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $90_1 = 0;
  $6_1 = global$0 - 48 | 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[((((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = HEAP32[((((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, 236) | 0) + 8 | 0) >> 2] | 0;
   HEAP32[($6_1 + 12 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 24 | 0) >> 2] | 0 | 0) <= (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      if (!((HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 28 | 0) >> 2] | 0 | 0) >= (HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[((((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
      break label$1;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 116 | 0;
     HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[($6_1 + 24 | 0) >> 2] = 2147483647;
   $90_1 = HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
   HEAP32[($6_1 + 8 | 0) >> 2] = $90_1;
   HEAP32[($6_1 + 4 | 0) >> 2] = $90_1;
   HEAP32[($6_1 + 12 | 0) >> 2] = 0;
   label$6 : {
    label$7 : while (1) {
     if (!((HEAP32[($6_1 + 12 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$6
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = (HEAP32[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0) - (HEAP32[($6_1 + 28 | 0) >> 2] | 0) | 0;
     label$8 : {
      if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
       break label$8
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = 0 - (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0;
     }
     label$9 : {
      if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) < (HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
      HEAP32[($6_1 + 4 | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 116 | 0;
     HEAP32[($6_1 + 12 | 0) >> 2] = (HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 1 | 0;
     continue label$7;
    };
   }
   HEAP32[((((HEAP32[($6_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($6_1 + 40 | 0) >> 2] | 0, 236) | 0) + 4 | 0) >> 2] = HEAP32[($6_1 + 4 | 0) >> 2] | 0;
  }
  return;
 }
 
 function $77($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = Math_fround($1_1);
  var $4_1 = 0, $49_1 = Math_fround(0), $59_1 = 0.0, $14_1 = 0, $17_1 = 0, $25_1 = 0, $33_1 = 0, $43_1 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP8[($4_1 + 30 | 0) >> 0] = $0_1;
  HEAPF32[($4_1 + 24 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : {
    if (!(+Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]) <= 1.0 & 1 | 0)) {
     break label$2
    }
    $49_1 = Math_fround(Math_fround(HEAPU8[($4_1 + 30 | 0) >> 0] | 0 | 0) * Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]));
    label$3 : {
     label$4 : {
      if (!($49_1 < Math_fround(4294967296.0) & $49_1 >= Math_fround(0.0) | 0)) {
       break label$4
      }
      $14_1 = ~~$49_1 >>> 0;
      break label$3;
     }
     $14_1 = 0;
    }
    HEAP8[($4_1 + 31 | 0) >> 0] = $14_1;
    break label$1;
   }
   $17_1 = HEAPU8[($4_1 + 30 | 0) >> 0] | 0;
   $59_1 = +(127 - $17_1 | 0 | 0) * (+Math_fround(HEAPF32[($4_1 + 24 | 0) >> 2]) + -1.0);
   label$5 : {
    label$6 : {
     if (!($59_1 < 4294967296.0 & $59_1 >= 0.0 | 0)) {
      break label$6
     }
     $25_1 = ~~$59_1 >>> 0;
     break label$5;
    }
    $25_1 = 0;
   }
   HEAP8[($4_1 + 23 | 0) >> 0] = $17_1 + ($25_1 & 255 | 0) | 0;
   $33_1 = (HEAPU8[($4_1 + 30 | 0) >> 0] | 0) & 255 | 0;
   HEAP32[($4_1 + 4 | 0) >> 2] = (HEAPU8[($4_1 + 23 | 0) >> 0] | 0) & 255 | 0;
   HEAP32[$4_1 >> 2] = $33_1;
   $205(global$3 + 1236 | 0 | 0, $4_1 | 0) | 0;
   HEAP8[($4_1 + 31 | 0) >> 0] = HEAPU8[($4_1 + 23 | 0) >> 0] | 0;
  }
  $43_1 = (HEAPU8[($4_1 + 31 | 0) >> 0] | 0) & 255 | 0;
  global$0 = $4_1 + 32 | 0;
  return $43_1 | 0;
 }
 
 function $78($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (48 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP8[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($3_1 + 8 | 0) >> 2] | 0, 236) | 0) >> 0] = 0;
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  return;
 }
 
 function $79($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $24_1 = 0, $212_1 = 0, $96_1 = 0, $104_1 = 0, $113_1 = 0, $121_1 = 0, $130_1 = 0, $138_1 = 0, $147_1 = 0, $157_1 = 0, $165_1 = 0, $172_1 = 0, $187_1 = 0, $197_1 = 0, $217 = 0, $221 = 0, $232 = 0, $252 = 0, $208_1 = 0, $274 = 0;
  $6_1 = global$0 - 48 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $3_1;
  HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 13092 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 13096 | 0) >> 2] = 0;
  HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 13084 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($100(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $6_1 + 4 | 0 | 0, 1 | 0, 4 | 0) | 0 | 0) != (4 | 0) & 1 | 0) {
      break label$3
     }
     if (!(($100(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $6_1 + 24 | 0 | 0, 4 | 0, 1 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
      break label$2
     }
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($6_1 + 24 | 0) >> 2] = ((HEAP32[($6_1 + 24 | 0) >> 2] | 0) & 255 | 0) << 24 | 0 | (((HEAP32[($6_1 + 24 | 0) >> 2] | 0) & 65280 | 0) << 8 | 0) | 0 | (((HEAP32[($6_1 + 24 | 0) >> 2] | 0) & 16711680 | 0) >> 8 | 0) | 0 | (((HEAP32[($6_1 + 24 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0) | 0;
   $24_1 = $6_1 + 4 | 0;
   label$4 : {
    label$5 : {
     if ((HEAPU8[$24_1 >> 0] | 0 | ((HEAPU8[($24_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($24_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($24_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (1684558925 | 0)) {
      break label$5
     }
     if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) < (6 | 0) & 1 | 0)) {
      break label$4
     }
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   $100(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $6_1 + 18 | 0 | 0, 2 | 0, 1 | 0) | 0;
   $100(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $6_1 + 16 | 0 | 0, 2 | 0, 1 | 0) | 0;
   $100(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, $6_1 + 14 | 0 | 0, 2 | 0, 1 | 0) | 0;
   $96_1 = 16;
   $104_1 = 16;
   HEAP16[($6_1 + 18 | 0) >> 1] = ((((HEAPU16[($6_1 + 18 | 0) >> 1] | 0) << $96_1 | 0) >> $96_1 | 0) & 255 | 0) << 8 | 0 | (((((HEAPU16[($6_1 + 18 | 0) >> 1] | 0) << $104_1 | 0) >> $104_1 | 0) >> 8 | 0) & 255 | 0) | 0;
   $113_1 = 16;
   $121_1 = 16;
   HEAP16[($6_1 + 16 | 0) >> 1] = ((((HEAPU16[($6_1 + 16 | 0) >> 1] | 0) << $113_1 | 0) >> $113_1 | 0) & 255 | 0) << 8 | 0 | (((((HEAPU16[($6_1 + 16 | 0) >> 1] | 0) << $121_1 | 0) >> $121_1 | 0) >> 8 | 0) & 255 | 0) | 0;
   $130_1 = 16;
   $138_1 = 16;
   HEAP16[($6_1 + 14 | 0) >> 1] = ((((HEAPU16[($6_1 + 14 | 0) >> 1] | 0) << $130_1 | 0) >> $130_1 | 0) & 255 | 0) << 8 | 0 | (((((HEAPU16[($6_1 + 14 | 0) >> 1] | 0) << $138_1 | 0) >> $138_1 | 0) >> 8 | 0) & 255 | 0) | 0;
   $147_1 = 16;
   label$6 : {
    label$7 : {
     if (!((((HEAPU16[($6_1 + 14 | 0) >> 1] | 0) << $147_1 | 0) >> $147_1 | 0 | 0) < (0 | 0) & 1 | 0)) {
      break label$7
     }
     $157_1 = 16;
     $165_1 = 16;
     HEAP32[($6_1 + 20 | 0) >> 2] = Math_imul(0 - ((((HEAPU16[($6_1 + 14 | 0) >> 1] | 0) << $157_1 | 0) >> $157_1 | 0 | 0) / (256 | 0) | 0) | 0, (((HEAPU16[($6_1 + 14 | 0) >> 1] | 0) << $165_1 | 0) >> $165_1 | 0) & 255 | 0);
     break label$6;
    }
    $172_1 = 16;
    HEAP32[($6_1 + 20 | 0) >> 2] = ((HEAPU16[($6_1 + 14 | 0) >> 1] | 0) << $172_1 | 0) >> $172_1 | 0;
   }
   label$8 : {
    if (!((HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0) > (6 | 0) & 1 | 0)) {
     break label$8
    }
    $101(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, (HEAP32[($6_1 + 24 | 0) >> 2] | 0) - 6 | 0 | 0);
   }
   $187_1 = 16;
   label$9 : {
    label$10 : {
     if ((((HEAPU16[($6_1 + 18 | 0) >> 1] | 0) << $187_1 | 0) >> $187_1 | 0 | 0) < (0 | 0) & 1 | 0) {
      break label$10
     }
     $197_1 = 16;
     if (!((((HEAPU16[($6_1 + 18 | 0) >> 1] | 0) << $197_1 | 0) >> $197_1 | 0 | 0) > (2 | 0) & 1 | 0)) {
      break label$9
     }
    }
    HEAP32[($6_1 + 44 | 0) >> 2] = 0;
    break label$1;
   }
   $208_1 = $2(12 | 0) | 0;
   HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 13084 | 0) >> 2] = $208_1;
   $212_1 = 0;
   HEAP32[(HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 13084 | 0) >> 2] | 0) >> 2] = $212_1;
   HEAP8[((HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 13084 | 0) >> 2] | 0) + 5 | 0) >> 0] = $212_1;
   HEAP32[((HEAP32[((HEAP32[($6_1 + 36 | 0) >> 2] | 0) + 13084 | 0) >> 2] | 0) + 8 | 0) >> 2] = $212_1;
   $217 = HEAP32[($6_1 + 36 | 0) >> 2] | 0;
   HEAP32[($217 + 13092 | 0) >> 2] = (HEAP32[($217 + 13092 | 0) >> 2] | 0) + 1 | 0;
   $221 = HEAP16[($6_1 + 18 | 0) >> 1] | 0;
   label$11 : {
    label$12 : {
     switch ($221 | 0) {
     case 0:
      label$15 : {
       if (!($80(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
        break label$15
       }
       $81(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0);
       HEAP32[($6_1 + 44 | 0) >> 2] = 0;
       break label$1;
      }
      break label$11;
     case 1:
      HEAP32[($6_1 + 8 | 0) >> 2] = 0;
      label$16 : {
       label$17 : while (1) {
        $232 = 16;
        if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) < (((HEAPU16[($6_1 + 16 | 0) >> 1] | 0) << $232 | 0) >> $232 | 0 | 0) & 1 | 0)) {
         break label$16
        }
        label$18 : {
         if (!($80(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, 0 | 0) | 0)) {
          break label$18
         }
         $81(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0);
         HEAP32[($6_1 + 44 | 0) >> 2] = 0;
         break label$1;
        }
        HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
        continue label$17;
       };
      }
      break label$11;
     case 2:
      break label$12;
     default:
      break label$11;
     };
    }
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
    label$19 : {
     label$20 : while (1) {
      $252 = 16;
      if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) < (((HEAPU16[($6_1 + 16 | 0) >> 1] | 0) << $252 | 0) >> $252 | 0 | 0) & 1 | 0)) {
       break label$19
      }
      label$21 : {
       if (!($80(HEAP32[($6_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, 1 | 0) | 0)) {
        break label$21
       }
       $81(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0);
       HEAP32[($6_1 + 44 | 0) >> 2] = 0;
       break label$1;
      }
      HEAP32[($6_1 + 8 | 0) >> 2] = (HEAP32[($6_1 + 8 | 0) >> 2] | 0) + 1 | 0;
      continue label$20;
     };
    }
   }
   HEAP32[($6_1 + 44 | 0) >> 2] = $82(HEAP32[($6_1 + 36 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 32 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 28 | 0) >> 2] | 0 | 0) | 0;
  }
  $274 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
  global$0 = $6_1 + 48 | 0;
  return $274 | 0;
 }
 
 function $80($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $8_1 = 0, $90_1 = 0, $116_1 = 0, $134_1 = 0, $139_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 32 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 13084 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (!(HEAP32[($5_1 + 32 | 0) >> 2] | 0)) {
     break label$2
    }
    if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    label$3 : {
     label$4 : while (1) {
      if (!((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$3
      }
      HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      continue label$4;
     };
    }
    HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 13096 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 2] | 0;
    break label$1;
   }
   HEAP32[((HEAP32[($5_1 + 36 | 0) >> 2] | 0) + 13096 | 0) >> 2] = 0;
  }
  label$5 : {
   label$6 : {
    label$7 : {
     if (($100(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, $5_1 + 12 | 0 | 0, 1 | 0, 4 | 0) | 0 | 0) != (4 | 0) & 1 | 0) {
      break label$7
     }
     if (!(($100(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, $5_1 + 16 | 0 | 0, 4 | 0, 1 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
      break label$6
     }
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = -1;
    break label$5;
   }
   HEAP32[($5_1 + 16 | 0) >> 2] = ((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & 255 | 0) << 24 | 0 | (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & 65280 | 0) << 8 | 0) | 0 | (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) & 16711680 | 0) >> 8 | 0) | 0 | (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 24 | 0) & 255 | 0) | 0;
   $8_1 = $5_1 + 12 | 0;
   label$8 : {
    if (!((HEAPU8[$8_1 >> 0] | 0 | ((HEAPU8[($8_1 + 1 | 0) >> 0] | 0) << 8 | 0) | 0 | ((HEAPU8[($8_1 + 2 | 0) >> 0] | 0) << 16 | 0 | ((HEAPU8[($8_1 + 3 | 0) >> 0] | 0) << 24 | 0) | 0) | 0 | 0) != (1802654797 | 0))) {
     break label$8
    }
    HEAP32[($5_1 + 44 | 0) >> 2] = -2;
    break label$5;
   }
   label$9 : while (1) {
    $90_1 = $83(HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) | 0;
    HEAP32[($5_1 + 20 | 0) >> 2] = $90_1;
    label$10 : {
     if (($90_1 | 0) != (0 | 0) & 1 | 0) {
      break label$10
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = -2;
     break label$5;
    }
    label$11 : {
     if (!((HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
      break label$11
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = 0;
     break label$5;
    }
    HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    label$12 : while (1) {
     $116_1 = 0;
     label$13 : {
      if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$13
      }
      $116_1 = (HEAP32[(HEAP32[($5_1 + 24 | 0) >> 2] | 0) >> 2] | 0 | 0) < (HEAP32[(HEAP32[($5_1 + 20 | 0) >> 2] | 0) >> 2] | 0 | 0);
     }
     label$14 : {
      if (!($116_1 & 1 | 0)) {
       break label$14
      }
      HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
      HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
      continue label$12;
     }
     break label$12;
    };
    HEAP32[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    $134_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
    HEAP32[($134_1 + 13092 | 0) >> 2] = (HEAP32[($134_1 + 13092 | 0) >> 2] | 0) + 1 | 0;
    HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
    continue label$9;
   };
  }
  $139_1 = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $139_1 | 0;
 }
 
 function $81($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $5_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $5_1 = HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13084 | 0) >> 2] | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $5_1;
  label$1 : {
   label$2 : {
    if (($5_1 | 0) != (0 | 0) & 1 | 0) {
     break label$2
    }
    break label$1;
   }
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[((HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
     $195(HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0);
     HEAP32[($3_1 + 8 | 0) >> 2] = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
     continue label$4;
    };
   }
   HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13084 | 0) >> 2] = 0;
  }
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $82($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, i64toi32_i32$0 = 0, $51_1 = 0, $72_1 = 0, $406 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, $1432 = 0, $503 = 0;
  $6_1 = global$0 - 272 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 268 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 264 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 260 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 256 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 240 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($6_1 + 240 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
     break label$1
    }
    HEAP32[(($6_1 + 128 | 0) + ((HEAP32[($6_1 + 240 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[(($6_1 + 64 | 0) + ((HEAP32[($6_1 + 240 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = 0;
    HEAP32[($6_1 + ((HEAP32[($6_1 + 240 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 1056 | 0) >> 2] | 0;
    HEAP32[($6_1 + 240 | 0) >> 2] = (HEAP32[($6_1 + 240 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  HEAP32[($6_1 + 232 | 0) >> 2] = 5e5;
  $84(HEAP32[($6_1 + 268 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 264 | 0) >> 2] | 0 | 0);
  $51_1 = $2(((HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 13092 | 0) >> 2] | 0) + 1 | 0) << 3 | 0 | 0) | 0;
  HEAP32[($6_1 + 248 | 0) >> 2] = $51_1;
  HEAP32[($6_1 + 252 | 0) >> 2] = $51_1;
  HEAP32[($6_1 + 244 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 13084 | 0) >> 2] | 0;
  HEAP32[($6_1 + 236 | 0) >> 2] = 0;
  HEAP32[($6_1 + 220 | 0) >> 2] = 0;
  HEAP32[($6_1 + 212 | 0) >> 2] = 0;
  HEAP32[($6_1 + 208 | 0) >> 2] = 0;
  HEAP32[($6_1 + 200 | 0) >> 2] = 0;
  HEAP32[($6_1 + 240 | 0) >> 2] = 0;
  label$3 : {
   label$4 : while (1) {
    if (!((HEAP32[($6_1 + 240 | 0) >> 2] | 0 | 0) < (HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 13092 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($6_1 + 228 | 0) >> 2] = 0;
    $72_1 = (HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) + -1 | 0;
    label$5 : {
     label$6 : {
      switch ($72_1 | 0) {
      case 8:
       label$9 : {
        label$10 : {
         if (!((HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 13056 | 0) >> 2] | 0) & (1 << ((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) | 0) | 0)) {
          break label$10
         }
         label$11 : {
          label$12 : {
           if (!((HEAP32[(((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 540 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
            break label$12
           }
           HEAP32[($6_1 + 224 | 0) >> 2] = (HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
           break label$11;
          }
          HEAP8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] = 0;
          HEAP32[($6_1 + 224 | 0) >> 2] = 0;
         }
         label$13 : {
          label$14 : {
           if (!((HEAP32[(($6_1 + 64 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
            break label$14
           }
           HEAP32[(($6_1 + 64 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 224 | 0) >> 2] | 0;
           break label$13;
          }
          HEAP32[($6_1 + 228 | 0) >> 2] = 1;
         }
         break label$9;
        }
        HEAP32[($6_1 + 224 | 0) >> 2] = (HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
        label$15 : {
         label$16 : {
          if (!((HEAP32[($6_1 + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (-1 | 0) & 1 | 0)) {
           break label$16
          }
          if (!((HEAP32[($6_1 + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
           break label$16
          }
          HEAP32[($6_1 + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 224 | 0) >> 2] | 0;
          break label$15;
         }
         HEAP32[($6_1 + 228 | 0) >> 2] = 1;
        }
       }
       break label$5;
      case 0:
       label$17 : {
        if (!(HEAP32[($6_1 + 200 | 0) >> 2] | 0)) {
         break label$17
        }
        HEAP32[($6_1 + 200 | 0) >> 2] = 1;
       }
       label$18 : {
        label$19 : {
         if (!((HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 13056 | 0) >> 2] | 0) & (1 << ((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) | 0) | 0)) {
          break label$19
         }
         label$20 : {
          if ((HEAP32[(((HEAP32[(((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[(($6_1 + 64 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
           break label$20
          }
          HEAP32[(((HEAP32[(((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[(($6_1 + 64 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] = -1;
         }
         break label$18;
        }
        label$21 : {
         if (!((HEAP32[($6_1 + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) == (-1 | 0) & 1 | 0)) {
          break label$21
         }
         break label$5;
        }
        label$22 : {
         if ((HEAP32[(((HEAP32[(((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[(($6_1 + 128 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
          break label$22
         }
         HEAP32[(((HEAP32[(((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[(($6_1 + 128 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) + 4 | 0) + ((HEAP32[($6_1 + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = -1;
        }
       }
       break label$5;
      case 14:
       break label$6;
      default:
       break label$5;
      };
     }
     label$23 : {
      if (!((HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 13056 | 0) >> 2] | 0) & (1 << ((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) | 0) | 0)) {
       break label$23
      }
      HEAP32[($6_1 + 228 | 0) >> 2] = 1;
      break label$5;
     }
     label$24 : {
      label$25 : {
       if (!((HEAP32[(((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 28 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$25
       }
       HEAP32[($6_1 + 224 | 0) >> 2] = (HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0;
       break label$24;
      }
      HEAP8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] = 0;
      HEAP32[($6_1 + 224 | 0) >> 2] = 0;
     }
     label$26 : {
      label$27 : {
       if (!((HEAP32[(($6_1 + 128 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (HEAP32[($6_1 + 224 | 0) >> 2] | 0 | 0) & 1 | 0)) {
        break label$27
       }
       HEAP32[(($6_1 + 128 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 224 | 0) >> 2] | 0;
       break label$26;
      }
      HEAP32[($6_1 + 228 | 0) >> 2] = 1;
     }
    }
    $406 = (HEAP32[(HEAP32[($6_1 + 244 | 0) >> 2] | 0) >> 2] | 0) - (HEAP32[($6_1 + 212 | 0) >> 2] | 0) | 0;
    HEAP32[($6_1 + 204 | 0) >> 2] = $406;
    label$28 : {
     label$29 : {
      if (!$406) {
       break label$29
      }
      if (HEAP32[($6_1 + 200 | 0) >> 2] | 0) {
       break label$29
      }
      HEAP32[($6_1 + 216 | 0) >> 2] = Math_imul(HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 1076 | 0) >> 2] | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0);
      HEAP32[($6_1 + 220 | 0) >> 2] = (HEAP32[($6_1 + 220 | 0) >> 2] | 0) + Math_imul(HEAP32[((HEAP32[($6_1 + 268 | 0) >> 2] | 0) + 1080 | 0) >> 2] | 0, HEAP32[($6_1 + 204 | 0) >> 2] | 0) | 0;
      label$30 : {
       if (!((HEAP32[($6_1 + 220 | 0) >> 2] | 0) & -65536 | 0)) {
        break label$30
       }
       HEAP32[($6_1 + 216 | 0) >> 2] = (HEAP32[($6_1 + 216 | 0) >> 2] | 0) + (((HEAP32[($6_1 + 220 | 0) >> 2] | 0) >> 16 | 0) & 65535 | 0) | 0;
       HEAP32[($6_1 + 220 | 0) >> 2] = (HEAP32[($6_1 + 220 | 0) >> 2] | 0) & 65535 | 0;
      }
      HEAP32[($6_1 + 208 | 0) >> 2] = (HEAP32[($6_1 + 208 | 0) >> 2] | 0) + (HEAP32[($6_1 + 216 | 0) >> 2] | 0) | 0;
      break label$28;
     }
     label$31 : {
      if (!((HEAP32[($6_1 + 200 | 0) >> 2] | 0 | 0) == (1 | 0) & 1 | 0)) {
       break label$31
      }
      HEAP32[($6_1 + 200 | 0) >> 2] = 0;
     }
    }
    label$32 : {
     if (!(((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 5 | 0) >> 0] | 0) & 255 | 0 | 0) == (10 | 0) & 1 | 0)) {
      break label$32
     }
     HEAP32[($6_1 + 232 | 0) >> 2] = (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 4 | 0) >> 0] | 0) & 255 | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 7 | 0) >> 0] | 0) & 255 | 0) << 8 | 0) | 0) + (((HEAPU8[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0) << 16 | 0) | 0;
     $84(HEAP32[($6_1 + 268 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 232 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 264 | 0) >> 2] | 0 | 0);
    }
    label$33 : {
     if (HEAP32[($6_1 + 228 | 0) >> 2] | 0) {
      break label$33
     }
     i64toi32_i32$2 = HEAP32[($6_1 + 244 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
     $1432 = i64toi32_i32$0;
     i64toi32_i32$0 = HEAP32[($6_1 + 248 | 0) >> 2] | 0;
     HEAP32[i64toi32_i32$0 >> 2] = $1432;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     HEAP32[(HEAP32[($6_1 + 248 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
     HEAP32[($6_1 + 248 | 0) >> 2] = (HEAP32[($6_1 + 248 | 0) >> 2] | 0) + 8 | 0;
     HEAP32[($6_1 + 236 | 0) >> 2] = (HEAP32[($6_1 + 236 | 0) >> 2] | 0) + 1 | 0;
    }
    HEAP32[($6_1 + 212 | 0) >> 2] = HEAP32[(HEAP32[($6_1 + 244 | 0) >> 2] | 0) >> 2] | 0;
    HEAP32[($6_1 + 244 | 0) >> 2] = HEAP32[((HEAP32[($6_1 + 244 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
    HEAP32[($6_1 + 240 | 0) >> 2] = (HEAP32[($6_1 + 240 | 0) >> 2] | 0) + 1 | 0;
    continue label$4;
   };
  }
  HEAP32[(HEAP32[($6_1 + 248 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
  HEAP8[((HEAP32[($6_1 + 248 | 0) >> 2] | 0) + 5 | 0) >> 0] = 99;
  HEAP32[($6_1 + 236 | 0) >> 2] = (HEAP32[($6_1 + 236 | 0) >> 2] | 0) + 1 | 0;
  $81(HEAP32[($6_1 + 268 | 0) >> 2] | 0 | 0);
  HEAP32[(HEAP32[($6_1 + 260 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 236 | 0) >> 2] | 0;
  HEAP32[(HEAP32[($6_1 + 256 | 0) >> 2] | 0) >> 2] = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
  $503 = HEAP32[($6_1 + 252 | 0) >> 2] | 0;
  global$0 = $6_1 + 272 | 0;
  return $503 | 0;
 }
 
 function $83($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $185_1 = 0, $258 = 0, $269 = 0, $280 = 0, $291 = 0, $314 = 0, $7_1 = 0, $14_1 = 0, $58_1 = 0, $85_1 = 0, $95_1 = 0, $100_1 = 0, $105_1 = 0, $134_1 = 0, $147_1 = 0, $156_1 = 0, $159_1 = 0, $210_1 = 0, $236 = 0, $243 = 0, $316 = 0, $327 = 0, $399 = 0, $6_1 = 0, $424 = 0;
  $4_1 = global$0 - 32 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 20 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    $6_1 = $85(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
    $7_1 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    HEAP32[($7_1 + 13096 | 0) >> 2] = (HEAP32[($7_1 + 13096 | 0) >> 2] | 0) + $6_1 | 0;
    $14_1 = 1;
    label$3 : {
     if (!(($100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 19 | 0 | 0, $14_1 | 0, $14_1 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 28 | 0) >> 2] = 0;
     break label$1;
    }
    label$4 : {
     label$5 : {
      label$6 : {
       if (((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 0) == (240 | 0) & 1 | 0) {
        break label$6
       }
       if (!(((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 0) == (247 | 0) & 1 | 0)) {
        break label$5
       }
      }
      HEAP32[($4_1 + 8 | 0) >> 2] = $85(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
      $101(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
      break label$4;
     }
     label$7 : {
      label$8 : {
       if (!(((HEAPU8[($4_1 + 19 | 0) >> 0] | 0) & 255 | 0 | 0) == (255 | 0) & 1 | 0)) {
        break label$8
       }
       $58_1 = 1;
       $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 18 | 0 | 0, $58_1 | 0, $58_1 | 0) | 0;
       HEAP32[($4_1 + 8 | 0) >> 2] = $85(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0) | 0;
       label$9 : {
        label$10 : {
         if (!(((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) > (0 | 0) & 1 | 0)) {
          break label$10
         }
         if (!(((HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0) < (16 | 0) & 1 | 0)) {
          break label$10
         }
         $86(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0, (HEAPU8[($4_1 + 18 | 0) >> 0] | 0) & 255 | 0 | 0, HEAP32[($4_1 + 20 | 0) >> 2] | 0 | 0) | 0;
         break label$9;
        }
        $85_1 = HEAPU8[($4_1 + 18 | 0) >> 0] | 0;
        label$11 : {
         label$12 : {
          label$13 : {
           if (($85_1 | 0) == (47 | 0)) {
            break label$13
           }
           if (($85_1 | 0) == (81 | 0)) {
            break label$12
           }
           break label$11;
          }
          HEAP32[($4_1 + 28 | 0) >> 2] = -1;
          break label$1;
         }
         $95_1 = 1;
         $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 17 | 0 | 0, $95_1 | 0, $95_1 | 0) | 0;
         $100_1 = 1;
         $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 16 | 0 | 0, $100_1 | 0, $100_1 | 0) | 0;
         $105_1 = 1;
         $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 15 | 0 | 0, $105_1 | 0, $105_1 | 0) | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $2(12 | 0) | 0;
         HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 13096 | 0) >> 2] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0) >> 0] = 10;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] = HEAPU8[($4_1 + 15 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] = HEAPU8[($4_1 + 17 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 7 | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
         HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         break label$1;
        }
        $101(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0);
       }
       break label$7;
      }
      HEAP8[($4_1 + 17 | 0) >> 0] = HEAPU8[($4_1 + 19 | 0) >> 0] | 0;
      label$14 : {
       if (!(((HEAPU8[($4_1 + 17 | 0) >> 0] | 0) & 255 | 0) & 128 | 0)) {
        break label$14
       }
       $134_1 = global$3;
       HEAP8[($134_1 + 12345 | 0) >> 0] = (HEAPU8[($4_1 + 17 | 0) >> 0] | 0) & 15 | 0;
       HEAP8[($134_1 + 12344 | 0) >> 0] = ((HEAPU8[($4_1 + 17 | 0) >> 0] | 0) >>> 4 | 0) & 7 | 0;
       $147_1 = 1;
       $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 17 | 0 | 0, $147_1 | 0, $147_1 | 0) | 0;
       HEAP8[($4_1 + 17 | 0) >> 0] = ((HEAPU8[($4_1 + 17 | 0) >> 0] | 0) & 255 | 0) & 127 | 0;
      }
      $156_1 = HEAPU8[(global$3 + 12344 | 0) >> 0] | 0;
      label$15 : {
       label$16 : {
        switch ($156_1 | 0) {
        case 0:
         $159_1 = 1;
         $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 16 | 0 | 0, $159_1 | 0, $159_1 | 0) | 0;
         HEAP8[($4_1 + 16 | 0) >> 0] = (HEAPU8[($4_1 + 16 | 0) >> 0] | 0) & 127 | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $2(12 | 0) | 0;
         HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 13096 | 0) >> 2] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0) >> 0] = 2;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] = HEAPU8[(global$3 + 12345 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] = HEAPU8[($4_1 + 17 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 7 | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
         HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         break label$1;
        case 1:
         $185_1 = 1;
         $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 16 | 0 | 0, $185_1 | 0, $185_1 | 0) | 0;
         HEAP8[($4_1 + 16 | 0) >> 0] = (HEAPU8[($4_1 + 16 | 0) >> 0] | 0) & 127 | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $2(12 | 0) | 0;
         HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 13096 | 0) >> 2] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0) >> 0] = $185_1;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] = HEAPU8[(global$3 + 12345 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] = HEAPU8[($4_1 + 17 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 7 | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
         HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         break label$1;
        case 2:
         $210_1 = 1;
         $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 16 | 0 | 0, $210_1 | 0, $210_1 | 0) | 0;
         HEAP8[($4_1 + 16 | 0) >> 0] = (HEAPU8[($4_1 + 16 | 0) >> 0] | 0) & 127 | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $2(12 | 0) | 0;
         HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 13096 | 0) >> 2] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0) >> 0] = 3;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] = HEAPU8[(global$3 + 12345 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] = HEAPU8[($4_1 + 17 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 7 | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
         HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         break label$1;
        case 3:
         $236 = 1;
         $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 16 | 0 | 0, $236 | 0, $236 | 0) | 0;
         HEAP8[($4_1 + 16 | 0) >> 0] = (HEAPU8[($4_1 + 16 | 0) >> 0] | 0) & 127 | 0;
         HEAP32[$4_1 >> 2] = 255;
         $243 = HEAPU8[($4_1 + 17 | 0) >> 0] | 0;
         label$24 : {
          label$25 : {
           switch ($243 | 0) {
           case 7:
            HEAP32[$4_1 >> 2] = 4;
            break label$24;
           case 10:
            HEAP32[$4_1 >> 2] = 5;
            break label$24;
           case 11:
            HEAP32[$4_1 >> 2] = 7;
            break label$24;
           case 64:
            HEAP32[$4_1 >> 2] = 6;
            break label$24;
           case 120:
            HEAP32[$4_1 >> 2] = 12;
            break label$24;
           case 121:
            HEAP32[$4_1 >> 2] = 13;
            break label$24;
           case 123:
            HEAP32[$4_1 >> 2] = 14;
            break label$24;
           case 0:
            HEAP32[$4_1 >> 2] = 15;
            break label$24;
           case 32:
            label$40 : {
             label$41 : {
              if (!((HEAPU8[($4_1 + 16 | 0) >> 0] | 0) & 255 | 0)) {
               break label$41
              }
              break label$40;
             }
             HEAP32[$4_1 >> 2] = 15;
            }
            break label$24;
           case 100:
            $258 = global$3;
            HEAP8[($258 + 12346 | 0) >> 0] = 0;
            HEAP8[(($258 + 12352 | 0) + (HEAPU8[($258 + 12345 | 0) >> 0] | 0) | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
            break label$24;
           case 101:
            $269 = global$3;
            HEAP8[($269 + 12346 | 0) >> 0] = 0;
            HEAP8[(($269 + 12368 | 0) + (HEAPU8[($269 + 12345 | 0) >> 0] | 0) | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
            break label$24;
           case 99:
            $280 = global$3;
            HEAP8[($280 + 12346 | 0) >> 0] = 1;
            HEAP8[(($280 + 12352 | 0) + (HEAPU8[($280 + 12345 | 0) >> 0] | 0) | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
            break label$24;
           case 98:
            $291 = global$3;
            HEAP8[($291 + 12346 | 0) >> 0] = 1;
            HEAP8[(($291 + 12368 | 0) + (HEAPU8[($291 + 12345 | 0) >> 0] | 0) | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
            break label$24;
           case 6:
            label$42 : {
             if (!(((HEAPU8[(global$3 + 12346 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
              break label$42
             }
             break label$24;
            }
            $314 = global$3;
            $316 = HEAPU8[($314 + 12345 | 0) >> 0] | 0;
            $327 = (HEAPU8[(($314 + 12352 | 0) + $316 | 0) >> 0] | 0) << 8 | 0 | (HEAPU8[(($314 + 12368 | 0) + $316 | 0) >> 0] | 0) | 0;
            label$43 : {
             label$44 : {
              label$45 : {
               label$46 : {
                if (!$327) {
                 break label$46
                }
                if (($327 | 0) == (32639 | 0)) {
                 break label$45
                }
                break label$44;
               }
               HEAP32[$4_1 >> 2] = 11;
               break label$43;
              }
              HEAP32[($4_1 + 4 | 0) >> 2] = $2(12 | 0) | 0;
              HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 13096 | 0) >> 2] | 0;
              HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0) >> 0] = 11;
              HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] = HEAPU8[(global$3 + 12345 | 0) >> 0] | 0;
              HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] = 2;
              HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 7 | 0) >> 0] = 0;
              HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
              HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
              break label$1;
             }
            }
            break label$24;
           default:
            break label$25;
           };
          }
         }
         label$47 : {
          if (!((HEAP32[$4_1 >> 2] | 0 | 0) != (255 | 0) & 1 | 0)) {
           break label$47
          }
          HEAP32[($4_1 + 4 | 0) >> 2] = $2(12 | 0) | 0;
          HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 13096 | 0) >> 2] | 0;
          HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0) >> 0] = HEAP32[$4_1 >> 2] | 0;
          HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] = HEAPU8[(global$3 + 12345 | 0) >> 0] | 0;
          HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
          HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 7 | 0) >> 0] = 0;
          HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
          HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
          break label$1;
         }
         break label$15;
        case 4:
         HEAP8[($4_1 + 17 | 0) >> 0] = (HEAPU8[($4_1 + 17 | 0) >> 0] | 0) & 127 | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $2(12 | 0) | 0;
         HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 13096 | 0) >> 2] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0) >> 0] = 9;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] = HEAPU8[(global$3 + 12345 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] = HEAPU8[($4_1 + 17 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 7 | 0) >> 0] = 0;
         HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         break label$1;
        case 5:
         break label$15;
        case 6:
         $399 = 1;
         $100(HEAP32[($4_1 + 24 | 0) >> 2] | 0 | 0, $4_1 + 16 | 0 | 0, $399 | 0, $399 | 0) | 0;
         HEAP8[($4_1 + 16 | 0) >> 0] = (HEAPU8[($4_1 + 16 | 0) >> 0] | 0) & 127 | 0;
         HEAP32[($4_1 + 4 | 0) >> 2] = $2(12 | 0) | 0;
         HEAP32[(HEAP32[($4_1 + 4 | 0) >> 2] | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 20 | 0) >> 2] | 0) + 13096 | 0) >> 2] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 5 | 0) >> 0] = 8;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 0] = HEAPU8[(global$3 + 12345 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 6 | 0) >> 0] = HEAPU8[($4_1 + 17 | 0) >> 0] | 0;
         HEAP8[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 7 | 0) >> 0] = HEAPU8[($4_1 + 16 | 0) >> 0] | 0;
         HEAP32[((HEAP32[($4_1 + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
         HEAP32[($4_1 + 28 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
         break label$1;
        default:
         break label$16;
        };
       }
      }
     }
    }
    continue label$2;
   };
  }
  $424 = HEAP32[($4_1 + 28 | 0) >> 2] | 0;
  global$0 = $4_1 + 32 | 0;
  return $424 | 0;
 }
 
 function $84($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $35_1 = 0.0, $13_1 = 0, $38_1 = 0.0, $22_1 = 0;
  $5_1 = global$0 - 32 | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAPF64[($5_1 + 8 | 0) >> 3] = +(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) * +(HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) * .065536 / +(HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0);
  $35_1 = +HEAPF64[($5_1 + 8 | 0) >> 3];
  label$1 : {
   label$2 : {
    if (!(Math_abs($35_1) < 2147483648.0)) {
     break label$2
    }
    $13_1 = ~~$35_1;
    break label$1;
   }
   $13_1 = -2147483648;
  }
  HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1080 | 0) >> 2] = $13_1 & 65535 | 0;
  $38_1 = +HEAPF64[($5_1 + 8 | 0) >> 3];
  label$3 : {
   label$4 : {
    if (!(Math_abs($38_1) < 2147483648.0)) {
     break label$4
    }
    $22_1 = ~~$38_1;
    break label$3;
   }
   $22_1 = -2147483648;
  }
  HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 1076 | 0) >> 2] = $22_1 >> 16 | 0;
  return;
 }
 
 function $85($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $9_1 = 0, $22_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : while (1) {
   $9_1 = 1;
   $100(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0, $3_1 + 7 | 0 | 0, $9_1 | 0, $9_1 | 0) | 0;
   HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + (((HEAPU8[($3_1 + 7 | 0) >> 0] | 0) & 255 | 0) & 127 | 0) | 0;
   label$2 : {
    if (((HEAPU8[($3_1 + 7 | 0) >> 0] | 0) & 255 | 0) & 128 | 0) {
     break label$2
    }
    $22_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
    global$0 = $3_1 + 16 | 0;
    return $22_1 | 0;
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 7 | 0;
   continue label$1;
  };
 }
 
 function $86($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $28_1 = 0, $49_1 = 0, $93_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $1_1;
  HEAP8[($6_1 + 19 | 0) >> 0] = $2_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $2((HEAP32[($6_1 + 20 | 0) >> 2] | 0) + 1 | 0 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) != ($100(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0, 1 | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $195(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 28 | 0) >> 2] = -1;
    break label$1;
   }
   HEAP8[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) >> 0] = 0;
   label$3 : {
    label$4 : while (1) {
     $28_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = $28_1 + -1 | 0;
     if (!$28_1) {
      break label$3
     }
     label$5 : {
      if (!(((HEAPU8[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) >> 0] | 0) & 255 | 0 | 0) < (32 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP8[((HEAP32[($6_1 + 8 | 0) >> 2] | 0) + (HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) >> 0] = 46;
     }
     continue label$4;
    };
   }
   $49_1 = (HEAPU8[($6_1 + 19 | 0) >> 0] | 0) + -1 | 0;
   label$6 : {
    label$7 : {
     switch ($49_1 | 0) {
     case 0:
      HEAP32[($6_1 + 4 | 0) >> 2] = 0;
      break label$6;
     case 1:
      HEAP32[($6_1 + 4 | 0) >> 2] = 1;
      break label$6;
     default:
      break label$7;
     };
    }
    $195(HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($6_1 + 8 | 0) >> 2] = 0;
   }
   label$10 : {
    if (!((HEAP32[($6_1 + 8 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$10
    }
    label$11 : {
     if (!((HEAP32[(((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 13104 | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$11
     }
     $195(HEAP32[(((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 13104 | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    }
    HEAP32[(((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 13104 | 0) + ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
   }
   HEAP32[($6_1 + 28 | 0) >> 2] = 0;
  }
  $93_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $93_1 | 0;
 }
 
 function $87($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $48_1 = 0, $161_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 4 | 0) >> 2] = ((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 20 | 0) >> 2] | 0, 236) | 0;
  label$1 : {
   label$2 : {
    if (HEAP32[((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0) {
     break label$2
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0) >> 12 | 0;
    label$3 : {
     label$4 : {
      if (!((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) >= (((HEAP32[((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 12 | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] = 0;
      HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] = ((HEAP32[((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >> 12 | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
      break label$3;
     }
     $48_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
     HEAP32[($48_1 + 16 | 0) >> 2] = (HEAP32[($48_1 + 16 | 0) >> 2] | 0) + ((HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0) << 12 | 0) | 0;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 12 | 0) >> 2] | 0) << 1 | 0) | 0;
    break label$1;
   }
   HEAP8[($5_1 + 11 | 0) >> 0] = HEAPU8[((HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 110 | 0) >> 0] | 0;
   label$5 : {
    if (!(HEAP32[((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 212 | 0) >> 2] | 0)) {
     break label$5
    }
    label$6 : {
     if (!(((HEAPU8[($5_1 + 11 | 0) >> 0] | 0) & 255 | 0) & 4 | 0)) {
      break label$6
     }
     label$7 : {
      if (((HEAPU8[($5_1 + 11 | 0) >> 0] | 0) & 255 | 0) & 64 | 0) {
       break label$7
      }
      if (((HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0) {
       break label$7
      }
      if (!(((HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) == (2 | 0) & 1 | 0)) {
       break label$6
      }
     }
     label$8 : {
      if (!(((HEAPU8[($5_1 + 11 | 0) >> 0] | 0) & 255 | 0) & 8 | 0)) {
       break label$8
      }
      HEAP32[($5_1 + 28 | 0) >> 2] = $88(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
      break label$1;
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $89(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $90(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   label$9 : {
    if (!(((HEAPU8[($5_1 + 11 | 0) >> 0] | 0) & 255 | 0) & 4 | 0)) {
     break label$9
    }
    label$10 : {
     if (((HEAPU8[($5_1 + 11 | 0) >> 0] | 0) & 255 | 0) & 64 | 0) {
      break label$10
     }
     if (((HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0) {
      break label$10
     }
     if (!(((HEAPU8[(HEAP32[($5_1 + 4 | 0) >> 2] | 0) >> 0] | 0) & 255 | 0 | 0) == (2 | 0) & 1 | 0)) {
      break label$9
     }
    }
    label$11 : {
     if (!(((HEAPU8[($5_1 + 11 | 0) >> 0] | 0) & 255 | 0) & 8 | 0)) {
      break label$11
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = $91(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
     break label$1;
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = $92(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0, HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) | 0;
    break label$1;
   }
   HEAP32[($5_1 + 28 | 0) >> 2] = $93(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) | 0;
  }
  $161_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $161_1 | 0;
 }
 
 function $88($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $32_1 = 0, $71_1 = 0, $93_1 = 0, $97_1 = 0, $101_1 = 0, $112_1 = 0, $135_1 = 0, $167_1 = 0, $189_1 = 0, $193_1 = 0, $197_1 = 0, $208_1 = 0, $111_1 = 0, $207_1 = 0, $261 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 216 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 1 | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 1 | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = 0;
  label$1 : while (1) {
   $32_1 = 0;
   label$2 : {
    if (!(HEAP32[($5_1 + 52 | 0) >> 2] | 0)) {
     break label$2
    }
    $32_1 = (HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) <= (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0);
   }
   label$3 : {
    if (!($32_1 & 1 | 0)) {
     break label$3
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0 | 0) / (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    label$4 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = 1;
      break label$5;
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) - (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
    label$7 : {
     label$8 : while (1) {
      $71_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = $71_1 + -1 | 0;
      if (!$71_1) {
       break label$7
      }
      HEAP16[($5_1 + 50 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
      HEAP16[($5_1 + 48 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
      $93_1 = 16;
      $97_1 = 16;
      $101_1 = 16;
      $111_1 = (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $93_1 | 0) >> $93_1 | 0) + (Math_imul((((HEAPU16[($5_1 + 48 | 0) >> 1] | 0) << $97_1 | 0) >> $97_1 | 0) - (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $101_1 | 0) >> $101_1 | 0) | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
      $112_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = $112_1 + 2 | 0;
      HEAP16[$112_1 >> 1] = $111_1;
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0;
      continue label$8;
     };
    }
    label$9 : {
     if (!(HEAP32[($5_1 + 4 | 0) >> 2] | 0)) {
      break label$9
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 212 | 0) >> 2] | 0;
     HEAP32[($5_1 + 40 | 0) >> 2] = $94(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = 0;
    }
    continue label$1;
   }
   break label$1;
  };
  label$10 : {
   label$11 : while (1) {
    if (!(HEAP32[($5_1 + 52 | 0) >> 2] | 0)) {
     break label$10
    }
    label$12 : {
     label$13 : {
      if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$13
      }
      $135_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
      break label$12;
     }
     $135_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
    }
    HEAP32[($5_1 + 8 | 0) >> 2] = (($135_1 - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0 | 0) / (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    label$14 : {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$14
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    }
    label$15 : {
     label$16 : {
      if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$16
      }
      HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = 1;
      break label$15;
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) - (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
    label$17 : {
     label$18 : while (1) {
      $167_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
      HEAP32[($5_1 + 8 | 0) >> 2] = $167_1 + -1 | 0;
      if (!$167_1) {
       break label$17
      }
      HEAP16[($5_1 + 50 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
      HEAP16[($5_1 + 48 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
      $189_1 = 16;
      $193_1 = 16;
      $197_1 = 16;
      $207_1 = (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $189_1 | 0) >> $189_1 | 0) + (Math_imul((((HEAPU16[($5_1 + 48 | 0) >> 1] | 0) << $193_1 | 0) >> $193_1 | 0) - (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $197_1 | 0) >> $197_1 | 0) | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
      $208_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = $208_1 + 2 | 0;
      HEAP16[$208_1 >> 1] = $207_1;
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0;
      continue label$18;
     };
    }
    label$19 : {
     if (!(HEAP32[($5_1 + 4 | 0) >> 2] | 0)) {
      break label$19
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 212 | 0) >> 2] | 0;
     HEAP32[($5_1 + 40 | 0) >> 2] = $94(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0 | 0) | 0;
     HEAP32[($5_1 + 4 | 0) >> 2] = 0;
    }
    label$20 : {
     label$21 : {
      if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$21
      }
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, -1);
      break label$20;
     }
     label$22 : {
      if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) <= (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$22
      }
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, -1);
     }
    }
    continue label$11;
   };
  }
  HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 216 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $261 = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  global$0 = $5_1 + 64 | 0;
  return $261 | 0;
 }
 
 function $89($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $67_1 = 0, $89_1 = 0, $93_1 = 0, $97_1 = 0, $108_1 = 0, $107_1 = 0, $129_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) - (HEAP32[(HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 216 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!(HEAP32[($5_1 + 52 | 0) >> 2] | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) - (HEAP32[($5_1 + 32 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (((HEAP32[($5_1 + 36 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0 | 0) / (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    label$4 : {
     if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    }
    label$5 : {
     label$6 : {
      if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = 1;
      break label$5;
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) - (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0;
    label$7 : {
     label$8 : while (1) {
      $67_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
      HEAP32[($5_1 + 16 | 0) >> 2] = $67_1 + -1 | 0;
      if (!$67_1) {
       break label$7
      }
      HEAP16[($5_1 + 50 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
      HEAP16[($5_1 + 48 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
      $89_1 = 16;
      $93_1 = 16;
      $97_1 = 16;
      $107_1 = (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $89_1 | 0) >> $89_1 | 0) + (Math_imul((((HEAPU16[($5_1 + 48 | 0) >> 1] | 0) << $93_1 | 0) >> $93_1 | 0) - (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $97_1 | 0) >> $97_1 | 0) | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
      $108_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = $108_1 + 2 | 0;
      HEAP16[$108_1 >> 1] = $107_1;
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0;
      continue label$8;
     };
    }
    label$9 : {
     if (!(HEAP32[($5_1 + 12 | 0) >> 2] | 0)) {
      break label$9
     }
     HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 212 | 0) >> 2] | 0;
     HEAP32[($5_1 + 40 | 0) >> 2] = $94(HEAP32[($5_1 + 60 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 56 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = 0;
    }
    continue label$2;
   };
  }
  HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 216 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  $129_1 = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  global$0 = $5_1 + 64 | 0;
  return $129_1 | 0;
 }
 
 function $90($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $39_1 = 0, $42_1 = 0, $70_1 = 0, $74_1 = 0, $78_1 = 0, $89_1 = 0, $117_1 = 0, $125_1 = 0, $88_1 = 0, $116_1 = 0, $135_1 = 0;
  $5_1 = global$0 - 48 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, 236) | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[$5_1 >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 216 | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 8 | 0) >> 2] = 0 - (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
  }
  label$2 : {
   label$3 : while (1) {
    $39_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $39_1 + -1 | 0;
    if (!$39_1) {
     break label$2
    }
    $42_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $42_1 + -1 | 0;
    label$4 : {
     if ($42_1) {
      break label$4
     }
     HEAP32[$5_1 >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 212 | 0) >> 2] | 0;
     HEAP32[($5_1 + 8 | 0) >> 2] = $94(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0, 0 | 0) | 0;
    }
    HEAP16[($5_1 + 34 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
    HEAP16[($5_1 + 32 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
    $70_1 = 16;
    $74_1 = 16;
    $78_1 = 16;
    $88_1 = (((HEAPU16[($5_1 + 34 | 0) >> 1] | 0) << $70_1 | 0) >> $70_1 | 0) + (Math_imul((((HEAPU16[($5_1 + 32 | 0) >> 1] | 0) << $74_1 | 0) >> $74_1 | 0) - (((HEAPU16[($5_1 + 34 | 0) >> 1] | 0) << $78_1 | 0) >> $78_1 | 0) | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
    $89_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $89_1 + 2 | 0;
    HEAP16[$89_1 >> 1] = $88_1;
    HEAP32[($5_1 + 12 | 0) >> 2] = (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + (HEAP32[($5_1 + 8 | 0) >> 2] | 0) | 0;
    label$5 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$5
     }
     label$6 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$6
      }
      $116_1 = HEAPU16[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
      $117_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
      HEAP32[($5_1 + 24 | 0) >> 2] = $117_1 + 2 | 0;
      HEAP16[$117_1 >> 1] = $116_1;
     }
     HEAP8[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 0] = 0;
     $125_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
     HEAP32[$125_1 >> 2] = (HEAP32[$125_1 >> 2] | 0) - ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0) | 0;
     break label$2;
    }
    continue label$3;
   };
  }
  HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 216 | 0) >> 2] = HEAP32[$5_1 >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  $135_1 = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  global$0 = $5_1 + 48 | 0;
  return $135_1 | 0;
 }
 
 function $91($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $53_1 = 0, $75_1 = 0, $79_1 = 0, $83_1 = 0, $94_1 = 0, $109_1 = 0, $130_1 = 0, $152_1 = 0, $156_1 = 0, $160_1 = 0, $171_1 = 0, $93_1 = 0, $170_1 = 0;
  $5_1 = global$0 - 64 | 0;
  HEAP32[($5_1 + 60 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 40 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 36 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 32 | 0) >> 2] = HEAP32[(HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) << 1 | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 32 | 0) >> 2] | 0) << 1 | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) <= (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = (((HEAP32[($5_1 + 32 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0 | 0) / (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
   label$2 : {
    label$3 : {
     if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
     HEAP32[($5_1 + 52 | 0) >> 2] = 0;
     break label$2;
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
   }
   label$4 : {
    label$5 : while (1) {
     $53_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = $53_1 + -1 | 0;
     if (!$53_1) {
      break label$4
     }
     HEAP16[($5_1 + 50 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
     HEAP16[($5_1 + 48 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
     $75_1 = 16;
     $79_1 = 16;
     $83_1 = 16;
     $93_1 = (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $75_1 | 0) >> $75_1 | 0) + (Math_imul((((HEAPU16[($5_1 + 48 | 0) >> 1] | 0) << $79_1 | 0) >> $79_1 | 0) - (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $83_1 | 0) >> $83_1 | 0) | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
     $94_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
     HEAP32[($5_1 + 28 | 0) >> 2] = $94_1 + 2 | 0;
     HEAP16[$94_1 >> 1] = $93_1;
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0;
     continue label$5;
    };
   }
  }
  label$6 : {
   label$7 : while (1) {
    if (!(HEAP32[($5_1 + 52 | 0) >> 2] | 0)) {
     break label$6
    }
    label$8 : {
     label$9 : {
      if (!((HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) > (0 | 0) & 1 | 0)) {
       break label$9
      }
      $109_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
      break label$8;
     }
     $109_1 = HEAP32[($5_1 + 32 | 0) >> 2] | 0;
    }
    HEAP32[($5_1 + 12 | 0) >> 2] = (($109_1 - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0 | 0) / (HEAP32[($5_1 + 40 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    label$10 : {
     label$11 : {
      if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 52 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$11
      }
      HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
      HEAP32[($5_1 + 52 | 0) >> 2] = 0;
      break label$10;
     }
     HEAP32[($5_1 + 52 | 0) >> 2] = (HEAP32[($5_1 + 52 | 0) >> 2] | 0) - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
    }
    label$12 : {
     label$13 : while (1) {
      $130_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $130_1 + -1 | 0;
      if (!$130_1) {
       break label$12
      }
      HEAP16[($5_1 + 50 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
      HEAP16[($5_1 + 48 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 24 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
      $152_1 = 16;
      $156_1 = 16;
      $160_1 = 16;
      $170_1 = (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $152_1 | 0) >> $152_1 | 0) + (Math_imul((((HEAPU16[($5_1 + 48 | 0) >> 1] | 0) << $156_1 | 0) >> $156_1 | 0) - (((HEAPU16[($5_1 + 50 | 0) >> 1] | 0) << $160_1 | 0) >> $160_1 | 0) | 0, (HEAP32[($5_1 + 44 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
      $171_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
      HEAP32[($5_1 + 28 | 0) >> 2] = $171_1 + 2 | 0;
      HEAP16[$171_1 >> 1] = $170_1;
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) + (HEAP32[($5_1 + 40 | 0) >> 2] | 0) | 0;
      continue label$13;
     };
    }
    label$14 : {
     label$15 : {
      if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$15
      }
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, -1);
      break label$14;
     }
     label$16 : {
      if (!((HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0) <= (HEAP32[($5_1 + 32 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$16
      }
      HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) - (HEAP32[($5_1 + 44 | 0) >> 2] | 0) | 0;
      HEAP32[($5_1 + 40 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, -1);
     }
    }
    continue label$7;
   };
  }
  HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 20 | 0) >> 2] = HEAP32[($5_1 + 40 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 44 | 0) >> 2] | 0;
  return HEAP32[((HEAP32[($5_1 + 60 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0 | 0;
 }
 
 function $92($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $53_1 = 0, $75_1 = 0, $79_1 = 0, $83_1 = 0, $94_1 = 0, $93_1 = 0;
  $5_1 = global$0 - 48 | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[(HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) >> 2] | 0) | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
  label$1 : {
   label$2 : while (1) {
    if (!(HEAP32[($5_1 + 36 | 0) >> 2] | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[($5_1 + 28 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) - (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0;
    }
    HEAP32[($5_1 + 4 | 0) >> 2] = (((HEAP32[($5_1 + 20 | 0) >> 2] | 0) - (HEAP32[($5_1 + 28 | 0) >> 2] | 0) | 0 | 0) / (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
    label$4 : {
     label$5 : {
      if (!((HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) > (HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) & 1 | 0)) {
       break label$5
      }
      HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
      HEAP32[($5_1 + 36 | 0) >> 2] = 0;
      break label$4;
     }
     HEAP32[($5_1 + 36 | 0) >> 2] = (HEAP32[($5_1 + 36 | 0) >> 2] | 0) - (HEAP32[($5_1 + 4 | 0) >> 2] | 0) | 0;
    }
    label$6 : {
     label$7 : while (1) {
      $53_1 = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
      HEAP32[($5_1 + 4 | 0) >> 2] = $53_1 + -1 | 0;
      if (!$53_1) {
       break label$6
      }
      HEAP16[($5_1 + 34 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
      HEAP16[($5_1 + 32 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
      $75_1 = 16;
      $79_1 = 16;
      $83_1 = 16;
      $93_1 = (((HEAPU16[($5_1 + 34 | 0) >> 1] | 0) << $75_1 | 0) >> $75_1 | 0) + (Math_imul((((HEAPU16[($5_1 + 32 | 0) >> 1] | 0) << $79_1 | 0) >> $79_1 | 0) - (((HEAPU16[($5_1 + 34 | 0) >> 1] | 0) << $83_1 | 0) >> $83_1 | 0) | 0, (HEAP32[($5_1 + 28 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
      $94_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
      HEAP32[($5_1 + 12 | 0) >> 2] = $94_1 + 2 | 0;
      HEAP16[$94_1 >> 1] = $93_1;
      HEAP32[($5_1 + 28 | 0) >> 2] = (HEAP32[($5_1 + 28 | 0) >> 2] | 0) + (HEAP32[($5_1 + 24 | 0) >> 2] | 0) | 0;
      continue label$7;
     };
    }
    continue label$2;
   };
  }
  HEAP32[((HEAP32[($5_1 + 40 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  return HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0 | 0;
 }
 
 function $93($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $56_1 = 0, $78_1 = 0, $82_1 = 0, $86_1 = 0, $97_1 = 0, $125_1 = 0, $133_1 = 0, $96_1 = 0, $124_1 = 0;
  $5_1 = global$0 - 48 | 0;
  HEAP32[($5_1 + 44 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 40 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 36 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = ((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1724 | 0) + Math_imul(HEAP32[($5_1 + 40 | 0) >> 2] | 0, 236) | 0;
  HEAP32[($5_1 + 24 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0;
  HEAP32[($5_1 + 20 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
  HEAP32[($5_1 + 16 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] | 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 20 | 0) >> 2] | 0;
  HEAP32[($5_1 + 8 | 0) >> 2] = HEAP32[((HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0;
  HEAP32[($5_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 36 | 0) >> 2] | 0) >> 2] | 0;
  label$1 : {
   if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = 0 - (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
  }
  HEAP32[$5_1 >> 2] = (((HEAP32[($5_1 + 8 | 0) >> 2] | 0) - (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0 | 0) / (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0) + 1 | 0;
  label$2 : {
   label$3 : {
    if (!((HEAP32[$5_1 >> 2] | 0 | 0) > (HEAP32[($5_1 + 4 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[$5_1 >> 2] = HEAP32[($5_1 + 4 | 0) >> 2] | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = 0;
    break label$2;
   }
   HEAP32[($5_1 + 4 | 0) >> 2] = (HEAP32[($5_1 + 4 | 0) >> 2] | 0) - (HEAP32[$5_1 >> 2] | 0) | 0;
  }
  label$4 : {
   label$5 : while (1) {
    $56_1 = HEAP32[$5_1 >> 2] | 0;
    HEAP32[$5_1 >> 2] = $56_1 + -1 | 0;
    if (!$56_1) {
     break label$4
    }
    HEAP16[($5_1 + 34 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
    HEAP16[($5_1 + 32 | 0) >> 1] = HEAPU16[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + ((((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
    $78_1 = 16;
    $82_1 = 16;
    $86_1 = 16;
    $96_1 = (((HEAPU16[($5_1 + 34 | 0) >> 1] | 0) << $78_1 | 0) >> $78_1 | 0) + (Math_imul((((HEAPU16[($5_1 + 32 | 0) >> 1] | 0) << $82_1 | 0) >> $82_1 | 0) - (((HEAPU16[($5_1 + 34 | 0) >> 1] | 0) << $86_1 | 0) >> $86_1 | 0) | 0, (HEAP32[($5_1 + 16 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
    $97_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $97_1 + 2 | 0;
    HEAP16[$97_1 >> 1] = $96_1;
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + (HEAP32[($5_1 + 12 | 0) >> 2] | 0) | 0;
    continue label$5;
   };
  }
  label$6 : {
   if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) >= (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
    break label$6
   }
   label$7 : {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) == (HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$7
    }
    $124_1 = HEAPU16[((HEAP32[($5_1 + 20 | 0) >> 2] | 0) + (((HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
    $125_1 = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
    HEAP32[($5_1 + 24 | 0) >> 2] = $125_1 + 2 | 0;
    HEAP16[$125_1 >> 1] = $124_1;
   }
   HEAP8[(HEAP32[($5_1 + 28 | 0) >> 2] | 0) >> 0] = 0;
   $133_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
   HEAP32[$133_1 >> 2] = (HEAP32[$133_1 >> 2] | 0) - ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) + 1 | 0) | 0;
  }
  HEAP32[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + 16 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
  return HEAP32[((HEAP32[($5_1 + 44 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0 | 0;
 }
 
 function $94($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $6_1 = 0, $7_1 = 0, $59_1 = 0, $79_1 = 0, $80_1 = 0, $192$hi = 0, $106_1 = 0, $119_1 = 0, $183_1 = 0.0, $137_1 = 0, $188_1 = 0.0, $151_1 = 0, $192_1 = 0, $436$hi = 0, $22_1 = 0, $154_1 = 0;
  $5_1 = global$0 - 64 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 56 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 52 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 48 | 0) >> 2] = $2_1;
  $6_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
  $7_1 = HEAP32[($6_1 + 208 | 0) >> 2] | 0;
  HEAP32[($6_1 + 208 | 0) >> 2] = $7_1 + 1 | 0;
  label$1 : {
   if (!(($7_1 | 0) >= (63 | 0) & 1 | 0)) {
    break label$1
   }
   HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 208 | 0) >> 2] = 0;
  }
  HEAP32[($5_1 + 40 | 0) >> 2] = $96(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0 | 0) | 0;
  label$2 : {
   label$3 : {
    if (!(HEAP32[(((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0)) {
     break label$3
    }
    label$4 : {
     if (!(HEAP32[($5_1 + 48 | 0) >> 2] | 0)) {
      break label$4
     }
     HEAP32[($5_1 + 60 | 0) >> 2] = 0 - (HEAP32[(((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) | 0;
     break label$2;
    }
    HEAP32[($5_1 + 60 | 0) >> 2] = HEAP32[(((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
    break label$2;
   }
   HEAP32[($5_1 + 44 | 0) >> 2] = ((HEAPU8[((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + 109 | 0) >> 0] | 0) & 255 | 0) << 7 | 0;
   label$5 : {
    if (!(HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0)) {
     break label$5
    }
    $59_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
    HEAP32[($59_1 + 56 | 0) >> 2] = (HEAP32[($59_1 + 56 | 0) >> 2] | 0) + (HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) | 0;
    label$6 : {
     label$7 : {
      if (!((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0 | 0) >= (65536 | 0) & 1 | 0)) {
       break label$7
      }
      HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 52 | 0) >> 2] = 0;
      break label$6;
     }
     HEAP32[($5_1 + 44 | 0) >> 2] = Math_imul(HEAP32[($5_1 + 44 | 0) >> 2] | 0, HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 56 | 0) >> 2] | 0);
     HEAP32[($5_1 + 44 | 0) >> 2] = (HEAP32[($5_1 + 44 | 0) >> 2] | 0) >> 16 | 0;
    }
   }
   $79_1 = HEAP32[($5_1 + 52 | 0) >> 2] | 0;
   $80_1 = HEAP32[($79_1 + 4 | 0) >> 2] | 0;
   HEAPF64[($5_1 + 24 | 0) >> 3] = +Math_fround(+(HEAP32[($80_1 + 12 | 0) >> 2] | 0 | 0) * +(HEAP32[($79_1 + 12 | 0) >> 2] | 0 | 0) / (+(HEAP32[($80_1 + 32 | 0) >> 2] | 0 | 0) * +(HEAP32[((HEAP32[($5_1 + 56 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0)) * 4096.0);
   $186($5_1 + 8 | 0 | 0, +(+$149(+(+((HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 208 | 0) >> 2] | 0) << 4 | 0 | 0) * .006135923151542565)) * +(HEAP32[($5_1 + 44 | 0) >> 2] | 0 | 0)));
   i64toi32_i32$2 = $5_1 + 16 | 0;
   i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $192_1 = i64toi32_i32$0;
   $192$hi = i64toi32_i32$1;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
   i64toi32_i32$0 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $436$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $192$hi;
   i64toi32_i32$0 = $436$hi;
   $22_1 = i64toi32_i32$1;
   i64toi32_i32$1 = $192$hi;
   HEAP32[($5_1 + 36 | 0) >> 2] = $185($22_1 | 0, i64toi32_i32$0 | 0, $192_1 | 0, i64toi32_i32$1 | 0) | 0;
   label$8 : {
    label$9 : {
     if (!((HEAP32[($5_1 + 36 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0)) {
      break label$9
     }
     HEAP32[($5_1 + 36 | 0) >> 2] = 0 - (HEAP32[($5_1 + 36 | 0) >> 2] | 0) | 0;
     $106_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
     HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 24 | 0) >> 3] / (+HEAPF64[(global$7 + (($106_1 >>> 2 | 0) & 2040 | 0) | 0) >> 3] * +HEAPF64[(global$8 + (($106_1 >> 13 | 0) << 3 | 0) | 0) >> 3]);
     break label$8;
    }
    $119_1 = HEAP32[($5_1 + 36 | 0) >> 2] | 0;
    HEAPF64[($5_1 + 24 | 0) >> 3] = +HEAPF64[($5_1 + 24 | 0) >> 3] * (+HEAPF64[(global$7 + (($119_1 >>> 2 | 0) & 2040 | 0) | 0) >> 3] * +HEAPF64[(global$8 + (($119_1 >> 13 | 0) << 3 | 0) | 0) >> 3]);
   }
   label$10 : {
    if (HEAP32[((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 52 | 0) >> 2] | 0) {
     break label$10
    }
    $183_1 = +HEAPF64[($5_1 + 24 | 0) >> 3];
    label$11 : {
     label$12 : {
      if (!(Math_abs($183_1) < 2147483648.0)) {
       break label$12
      }
      $137_1 = ~~$183_1;
      break label$11;
     }
     $137_1 = -2147483648;
    }
    HEAP32[(((HEAP32[($5_1 + 52 | 0) >> 2] | 0) + 80 | 0) + ((HEAP32[($5_1 + 40 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] = $137_1;
   }
   label$13 : {
    if (!(HEAP32[($5_1 + 48 | 0) >> 2] | 0)) {
     break label$13
    }
    HEAPF64[($5_1 + 24 | 0) >> 3] = -+HEAPF64[($5_1 + 24 | 0) >> 3];
   }
   $188_1 = +HEAPF64[($5_1 + 24 | 0) >> 3];
   label$14 : {
    label$15 : {
     if (!(Math_abs($188_1) < 2147483648.0)) {
      break label$15
     }
     $151_1 = ~~$188_1;
     break label$14;
    }
    $151_1 = -2147483648;
   }
   HEAP32[($5_1 + 60 | 0) >> 2] = $151_1;
  }
  $154_1 = HEAP32[($5_1 + 60 | 0) >> 2] | 0;
  global$0 = $5_1 + 64 | 0;
  return $154_1 | 0;
 }
 
 function $95($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $93_1 = 0, $223 = 0.0, $94_1 = 0, $97_1 = 0, $100_1 = 0, $7_1 = 0, $218 = 0.0, $24_1 = 0, $30_1 = 0, $41_1 = 0, $44_1 = 0, $47_1 = 0, $52_1 = 0, $71_1 = 0, $74_1 = 0, $88_1 = 0, $247$hi = 0, $248$hi = 0, $249$hi = 0, $250$hi = 0, $251$hi = 0, $95_1 = 0, $104_1 = 0, $234 = 0.0, $117_1 = 0, $120_1 = 0, $148_1 = 0, $152_1 = 0, $156_1 = 0, $167_1 = 0, $178_1 = 0, $239 = 0.0, $188_1 = 0, $244 = 0.0, $197_1 = 0, $46_1 = 0, $247 = 0, $48_1 = 0, $251 = 0, $502$hi = 0, $49_1 = 0, $166_1 = 0, $177_1 = 0;
  $4_1 = global$0 - 96 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 92 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 88 | 0) >> 2] = $1_1;
  HEAP32[($4_1 + 44 | 0) >> 2] = HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0;
  $7_1 = HEAP32[($4_1 + 88 | 0) >> 2] | 0;
  HEAPF64[($4_1 + 80 | 0) >> 3] = +(HEAP32[($7_1 + 12 | 0) >> 2] | 0 | 0) * +(HEAP32[(global$4 + ((HEAP8[($7_1 + 112 | 0) >> 0] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) / (+(HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 32 | 0) >> 2] | 0 | 0) * +(HEAP32[((HEAP32[($4_1 + 92 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0));
  $218 = +(HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0 | 0) / +HEAPF64[($4_1 + 80 | 0) >> 3];
  label$1 : {
   label$2 : {
    if (!(Math_abs($218) < 2147483648.0)) {
     break label$2
    }
    $24_1 = ~~$218;
    break label$1;
   }
   $24_1 = -2147483648;
  }
  HEAP32[($4_1 + 60 | 0) >> 2] = $24_1;
  $30_1 = $2((HEAP32[($4_1 + 60 | 0) >> 2] | 0) >> 11 | 0 | 0) | 0;
  HEAP32[($4_1 + 52 | 0) >> 2] = $30_1;
  HEAP32[($4_1 + 48 | 0) >> 2] = $30_1;
  HEAP32[($4_1 + 56 | 0) >> 2] = ((HEAP32[($4_1 + 60 | 0) >> 2] | 0) >> 12 | 0) - 1 | 0;
  $41_1 = ((HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - 4096 | 0 | 0) / (HEAP32[($4_1 + 56 | 0) >> 2] | 0 | 0) | 0;
  HEAP32[($4_1 + 68 | 0) >> 2] = $41_1;
  HEAP32[($4_1 + 64 | 0) >> 2] = $41_1;
  $44_1 = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + -1 | 0;
  HEAP32[($4_1 + 56 | 0) >> 2] = $44_1;
  label$3 : {
   if (!$44_1) {
    break label$3
   }
   $46_1 = HEAPU16[(HEAP32[($4_1 + 44 | 0) >> 2] | 0) >> 1] | 0;
   $47_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
   HEAP32[($4_1 + 48 | 0) >> 2] = $47_1 + 2 | 0;
   HEAP16[$47_1 >> 1] = $46_1;
  }
  label$4 : {
   label$5 : while (1) {
    $52_1 = (HEAP32[($4_1 + 56 | 0) >> 2] | 0) + -1 | 0;
    HEAP32[($4_1 + 56 | 0) >> 2] = $52_1;
    if (!$52_1) {
     break label$4
    }
    HEAP32[($4_1 + 32 | 0) >> 2] = (HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0;
    label$6 : {
     label$7 : {
      if (!((HEAP32[($4_1 + 32 | 0) >> 2] | 0) >>> 0 > (HEAP32[($4_1 + 44 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
       break label$7
      }
      $71_1 = 16;
      $74_1 = ((HEAPU16[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + -2 | 0) >> 1] | 0) << $71_1 | 0) >> $71_1 | 0;
      break label$6;
     }
     $74_1 = 0;
    }
    HEAP16[($4_1 + 42 | 0) >> 1] = $74_1;
    HEAP16[($4_1 + 40 | 0) >> 1] = HEAPU16[(HEAP32[($4_1 + 32 | 0) >> 2] | 0) >> 1] | 0;
    HEAP16[($4_1 + 38 | 0) >> 1] = HEAPU16[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 2 | 0) >> 1] | 0;
    HEAP16[($4_1 + 36 | 0) >> 1] = HEAPU16[((HEAP32[($4_1 + 32 | 0) >> 2] | 0) + 4 | 0) >> 1] | 0;
    $183($4_1 + 16 | 0 | 0, (HEAP32[($4_1 + 64 | 0) >> 2] | 0) & 4095 | 0 | 0);
    $88_1 = 8;
    i64toi32_i32$2 = ($4_1 + 16 | 0) + $88_1 | 0;
    i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $247 = i64toi32_i32$0;
    $247$hi = i64toi32_i32$1;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = HEAP32[($4_1 + 16 | 0) >> 2] | 0;
    i64toi32_i32$0 = HEAP32[($4_1 + 20 | 0) >> 2] | 0;
    $248$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 1072889856;
    $249$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $250$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $248$hi;
    i64toi32_i32$0 = $247$hi;
    i64toi32_i32$0 = $250$hi;
    i64toi32_i32$0 = $249$hi;
    i64toi32_i32$0 = $248$hi;
    $48_1 = i64toi32_i32$1;
    i64toi32_i32$1 = $247$hi;
    i64toi32_i32$2 = $250$hi;
    i64toi32_i32$3 = $249$hi;
    $189($4_1 | 0, $48_1 | 0, i64toi32_i32$0 | 0, $247 | 0, i64toi32_i32$1 | 0, 0 | 0, i64toi32_i32$2 | 0, 0 | 0, i64toi32_i32$3 | 0);
    i64toi32_i32$1 = $4_1 + $88_1 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$1 >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
    $251 = i64toi32_i32$3;
    $251$hi = i64toi32_i32$2;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$2 = HEAP32[$4_1 >> 2] | 0;
    i64toi32_i32$3 = HEAP32[($4_1 + 4 | 0) >> 2] | 0;
    $502$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $251$hi;
    i64toi32_i32$3 = $502$hi;
    $49_1 = i64toi32_i32$2;
    i64toi32_i32$2 = $251$hi;
    HEAPF64[($4_1 + 72 | 0) >> 3] = +Math_fround($188($49_1 | 0, i64toi32_i32$3 | 0, $251 | 0, i64toi32_i32$2 | 0));
    $93_1 = HEAP16[($4_1 + 40 | 0) >> 1] | 0;
    $223 = +HEAPF64[($4_1 + 72 | 0) >> 3];
    $94_1 = HEAP16[($4_1 + 42 | 0) >> 1] | 0;
    $95_1 = 1;
    $97_1 = 3;
    $100_1 = HEAP16[($4_1 + 38 | 0) >> 1] | 0;
    $104_1 = HEAP16[($4_1 + 36 | 0) >> 1] | 0;
    $234 = +($93_1 | 0) + $223 / 6.0 * (+((Math_imul($100_1, 6) - (($94_1 << $95_1 | 0) + Math_imul($93_1, $97_1) | 0) | 0) - $104_1 | 0 | 0) + $223 * (+(Math_imul(($94_1 - ($93_1 << $95_1 | 0) | 0) + $100_1 | 0, $97_1) | 0) + $223 * +((Math_imul($93_1 - $100_1 | 0, $97_1) - $94_1 | 0) + $104_1 | 0 | 0)));
    label$8 : {
     label$9 : {
      if (!(Math_abs($234) < 2147483648.0)) {
       break label$9
      }
      $117_1 = ~~$234;
      break label$8;
     }
     $117_1 = -2147483648;
    }
    $120_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
    HEAP32[($4_1 + 48 | 0) >> 2] = $120_1 + 2 | 0;
    HEAP16[$120_1 >> 1] = $117_1;
    HEAP32[($4_1 + 64 | 0) >> 2] = (HEAP32[($4_1 + 64 | 0) >> 2] | 0) + (HEAP32[($4_1 + 68 | 0) >> 2] | 0) | 0;
    continue label$5;
   };
  }
  label$10 : {
   label$11 : {
    if (!((HEAP32[($4_1 + 64 | 0) >> 2] | 0) & 4095 | 0)) {
     break label$11
    }
    HEAP16[($4_1 + 42 | 0) >> 1] = HEAPU16[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
    HEAP16[($4_1 + 40 | 0) >> 1] = HEAPU16[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + ((((HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 12 | 0) + 1 | 0) << 1 | 0) | 0) >> 1] | 0;
    $148_1 = 16;
    $152_1 = 16;
    $156_1 = 16;
    $166_1 = (((HEAPU16[($4_1 + 42 | 0) >> 1] | 0) << $148_1 | 0) >> $148_1 | 0) + (Math_imul((((HEAPU16[($4_1 + 40 | 0) >> 1] | 0) << $152_1 | 0) >> $152_1 | 0) - (((HEAPU16[($4_1 + 42 | 0) >> 1] | 0) << $156_1 | 0) >> $156_1 | 0) | 0, (HEAP32[($4_1 + 64 | 0) >> 2] | 0) & 4095 | 0) >>> 12 | 0) | 0;
    $167_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
    HEAP32[($4_1 + 48 | 0) >> 2] = $167_1 + 2 | 0;
    HEAP16[$167_1 >> 1] = $166_1;
    break label$10;
   }
   $177_1 = HEAPU16[((HEAP32[($4_1 + 44 | 0) >> 2] | 0) + (((HEAP32[($4_1 + 64 | 0) >> 2] | 0) >> 12 | 0) << 1 | 0) | 0) >> 1] | 0;
   $178_1 = HEAP32[($4_1 + 48 | 0) >> 2] | 0;
   HEAP32[($4_1 + 48 | 0) >> 2] = $178_1 + 2 | 0;
   HEAP16[$178_1 >> 1] = $177_1;
  }
  HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($4_1 + 60 | 0) >> 2] | 0;
  $239 = +(HEAP32[(HEAP32[($4_1 + 88 | 0) >> 2] | 0) >> 2] | 0 | 0) / +HEAPF64[($4_1 + 80 | 0) >> 3];
  label$12 : {
   label$13 : {
    if (!(Math_abs($239) < 2147483648.0)) {
     break label$13
    }
    $188_1 = ~~$239;
    break label$12;
   }
   $188_1 = -2147483648;
  }
  HEAP32[(HEAP32[($4_1 + 88 | 0) >> 2] | 0) >> 2] = $188_1;
  $244 = +(HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0) / +HEAPF64[($4_1 + 80 | 0) >> 3];
  label$14 : {
   label$15 : {
    if (!(Math_abs($244) < 2147483648.0)) {
     break label$15
    }
    $197_1 = ~~$244;
    break label$14;
   }
   $197_1 = -2147483648;
  }
  HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 4 | 0) >> 2] = $197_1;
  $195(HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 88 | 0) >> 2] | 0 | 0);
  HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 88 | 0) >> 2] = HEAP32[($4_1 + 52 | 0) >> 2] | 0;
  HEAP32[((HEAP32[($4_1 + 88 | 0) >> 2] | 0) + 12 | 0) >> 2] = 0;
  global$0 = $4_1 + 96 | 0;
  return;
 }
 
 function $96($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (16 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 15 - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   label$3 : {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) >= (48 | 0) & 1 | 0)) {
     break label$3
    }
    HEAP32[($3_1 + 12 | 0) >> 2] = 79 - (HEAP32[($3_1 + 8 | 0) >> 2] | 0) | 0;
    break label$1;
   }
   HEAP32[($3_1 + 12 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - 16 | 0;
  }
  return HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0;
 }
 
 function $97($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $38_1 = 0, $41_1 = 0;
  $6_1 = global$0 - 32 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($6_1 + 16 | 0) >> 2] = $3_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
  HEAP32[($6_1 + 8 | 0) >> 2] = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
  label$1 : {
   if (!(((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) >>> 0 > (HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) >>> 0 & 1 | 0)) {
    break label$1
   }
   HEAP32[($6_1 + 8 | 0) >> 2] = (((HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) - (HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0) | 0) >>> 0) / ((HEAP32[($6_1 + 20 | 0) >> 2] | 0) >>> 0) | 0;
  }
  $199(HEAP32[($6_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0, Math_imul(HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0) | 0;
  $38_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP32[($38_1 + 4 | 0) >> 2] = (HEAP32[($38_1 + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 20 | 0) >> 2] | 0) | 0;
  $41_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
  global$0 = $6_1 + 32 | 0;
  return $41_1 | 0;
 }
 
 function $98($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  label$1 : {
   if (!(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] | 0)) {
    break label$1
   }
   $195(HEAP32[(HEAP32[($3_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0);
  }
  $195(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $99($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $41_1 = 0, $47_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 8 | 0) >> 2] = $2(12 | 0) | 0;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $2(16 | 0) | 0;
   label$3 : {
    if (!((HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$3
    }
    $195(HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[(HEAP32[($5_1 + 12 | 0) >> 2] | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[($5_1 + 24 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = (HEAP32[($5_1 + 24 | 0) >> 2] | 0) + (HEAP32[($5_1 + 20 | 0) >> 2] | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
   HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 8 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
   $41_1 = global$10;
   HEAP32[(HEAP32[($5_1 + 8 | 0) >> 2] | 0) >> 2] = $41_1 + 0 | 0;
   HEAP32[((HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 4 | 0) >> 2] = $41_1 + 1 | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
  }
  $47_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $47_1 | 0;
 }
 
 function $100($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $14_1 = 0;
  $6_1 = global$0 - 16 | 0;
  global$0 = $6_1;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($6_1 + 8 | 0) >> 2] = $1_1;
  HEAP32[($6_1 + 4 | 0) >> 2] = $2_1;
  HEAP32[$6_1 >> 2] = $3_1;
  $14_1 = FUNCTION_TABLE[HEAP32[(HEAP32[($6_1 + 12 | 0) >> 2] | 0) >> 2] | 0 | 0](HEAP32[((HEAP32[($6_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 8 | 0) >> 2] | 0, HEAP32[($6_1 + 4 | 0) >> 2] | 0, HEAP32[$6_1 >> 2] | 0) | 0;
  global$0 = $6_1 + 16 | 0;
  return $14_1 | 0;
 }
 
 function $101($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0;
  $4_1 = global$0 - 1040 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 1036 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 1032 | 0) >> 2] = $1_1;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($4_1 + 1032 | 0) >> 2] | 0) >>> 0 > 0 >>> 0 & 1 | 0)) {
     break label$1
    }
    HEAP32[($4_1 + 1028 | 0) >> 2] = HEAP32[($4_1 + 1032 | 0) >> 2] | 0;
    label$3 : {
     if (!((HEAP32[($4_1 + 1028 | 0) >> 2] | 0) >>> 0 > 1024 >>> 0 & 1 | 0)) {
      break label$3
     }
     HEAP32[($4_1 + 1028 | 0) >> 2] = 1024;
    }
    HEAP32[($4_1 + 1032 | 0) >> 2] = (HEAP32[($4_1 + 1032 | 0) >> 2] | 0) - (HEAP32[($4_1 + 1028 | 0) >> 2] | 0) | 0;
    label$4 : {
     if (!((HEAP32[($4_1 + 1028 | 0) >> 2] | 0 | 0) != ($100(HEAP32[($4_1 + 1036 | 0) >> 2] | 0 | 0, $4_1 | 0, 1 | 0, HEAP32[($4_1 + 1028 | 0) >> 2] | 0 | 0) | 0 | 0) & 1 | 0)) {
      break label$4
     }
    }
    continue label$2;
   };
  }
  global$0 = $4_1 + 1040 | 0;
  return;
 }
 
 function $102($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $10_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($3_1 + 8 | 0) >> 2] = FUNCTION_TABLE[HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] | 0 | 0](HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) | 0;
  $195(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  $10_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
  global$0 = $3_1 + 16 | 0;
  return $10_1 | 0;
 }
 
 function $103() {
  var $2_1 = 0, $3_1 = 0, $7_1 = 0, $17_1 = 0, $9_1 = 0, $10_1 = 0, $6_1 = 0, $35_1 = 0, $4_1 = 0, $11_1 = 0, $19_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 516;
  $4_1 = $2($3_1 | 0) | 0;
  $6_1 = global$3;
  $7_1 = $6_1 + 12896 | 0;
  HEAP32[$7_1 >> 2] = $4_1;
  $9_1 = 0;
  $200(HEAP32[$7_1 >> 2] | 0 | 0, $9_1 | 0, $3_1 | 0) | 0;
  $10_1 = 3584;
  $11_1 = $2($10_1 | 0) | 0;
  HEAP32[(HEAP32[$7_1 >> 2] | 0) >> 2] = $11_1;
  $200(HEAP32[(HEAP32[$7_1 >> 2] | 0) >> 2] | 0 | 0, $9_1 | 0, $10_1 | 0) | 0;
  $17_1 = $6_1 + 13408 | 0;
  HEAP32[$17_1 >> 2] = $2($3_1 | 0) | 0;
  $200(HEAP32[$17_1 >> 2] | 0 | 0, $9_1 | 0, $3_1 | 0) | 0;
  $19_1 = $2($10_1 | 0) | 0;
  HEAP32[(HEAP32[$17_1 >> 2] | 0) >> 2] = $19_1;
  $200(HEAP32[(HEAP32[$17_1 >> 2] | 0) >> 2] | 0 | 0, 0 | 0, 3584 | 0) | 0;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
     break label$1
    }
    $35_1 = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0;
    HEAP32[(global$4 + $35_1 | 0) >> 2] = HEAP32[(global$9 + $35_1 | 0) >> 2] | 0;
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  global$0 = $2_1 + 16 | 0;
  return 0 | 0;
 }
 
 function $104($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $60_1 = 0, $41_1 = 0, $67_1 = 0;
  $3_1 = global$0 - 1056 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 1052 | 0) >> 2] = $0_1;
  label$1 : {
   if (!((HEAP32[($3_1 + 1052 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
    break label$1
   }
   if (!(($208(HEAP32[($3_1 + 1052 | 0) >> 2] | 0 | 0) | 0) >>> 0 < 1024 >>> 0 & 1 | 0)) {
    break label$1
   }
   $169($3_1 + 16 | 0 | 0, HEAP32[($3_1 + 1052 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 12 | 0) >> 2] = $164(HEAP32[($3_1 + 1052 | 0) >> 2] | 0 | 0, 47 | 0) | 0;
   label$2 : {
    if (!((HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP8[(($3_1 + 16 | 0) + ((HEAP32[($3_1 + 12 | 0) >> 2] | 0) - (HEAP32[($3_1 + 1052 | 0) >> 2] | 0) | 0) | 0) >> 0] = 0;
    $41_1 = HEAP32[global$6 >> 2] | 0;
    HEAP32[$3_1 >> 2] = $3_1 + 16 | 0;
    $127($41_1 | 0, global$3 + 1066 | 0 | 0, $3_1 | 0) | 0;
    $3($3_1 + 16 | 0 | 0);
   }
  }
  $103() | 0;
  label$3 : {
   label$4 : {
    if ((HEAP32[($3_1 + 1052 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0) {
     break label$4
    }
    $60_1 = 24;
    if (((HEAPU8[(HEAP32[($3_1 + 1052 | 0) >> 2] | 0) >> 0] | 0) << $60_1 | 0) >> $60_1 | 0) {
     break label$3
    }
   }
   HEAP32[($3_1 + 1052 | 0) >> 2] = global$3 + 1127 | 0;
  }
  $67_1 = $105(HEAP32[($3_1 + 1052 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $3_1 + 1056 | 0;
  return $67_1 | 0;
 }
 
 function $105($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0, $332 = 0, $444 = 0, $445 = 0, $541 = 0, $542 = 0, $101_1 = 0, $4_1 = 0, $23_1 = 0, $77_1 = 0, $111_1 = 0, $136_1 = 0, $374 = 0, $439 = 0, $536 = 0, $580 = 0, $591 = 0, $675 = 0, $742 = 0, $767 = 0, $801 = 0, $812 = 0, $869 = 0, $880 = 0, $961 = 0, $972 = 0, $983 = 0, $31_1 = 0, $60_1 = 0, $133_1 = 0, $190_1 = 0, $230 = 0, $272 = 0, $273 = 0, $313 = 0, $314 = 0, $362 = 0, $363 = 0, $390 = 0, $391 = 0, $416 = 0, $417 = 0, $440 = 0, $454 = 0, $487 = 0, $488 = 0, $513 = 0, $514 = 0, $537 = 0, $551 = 0, $601 = 0, $602 = 0, $625 = 0, $626 = 0, $642 = 0, $643 = 0, $750 = 0, $751 = 0, $752 = 0, $822 = 0, $823 = 0, $824 = 0, $890 = 0, $891 = 0, $993 = 0, $994 = 0, $1046 = 0, $1047 = 0, $1104 = 0, $1105 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1136 = 0;
  $3_1 = global$0 - 1424 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 1416 | 0) >> 2] = $0_1;
  $4_1 = 0;
  HEAP32[($3_1 + 328 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 312 | 0) >> 2] = $4_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[(global$3 + 14192 | 0) >> 2] | 0 | 0) > (50 | 0) & 1 | 0)) {
     break label$2
    }
    $127(HEAP32[global$6 >> 2] | 0 | 0, global$3 + 1271 | 0 | 0, 0 | 0) | 0;
    HEAP32[($3_1 + 1420 | 0) >> 2] = -1;
    break label$1;
   }
   $23_1 = $1(HEAP32[($3_1 + 1416 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 1412 | 0) >> 2] = $23_1;
   label$3 : {
    if (($23_1 | 0) != (0 | 0) & 1 | 0) {
     break label$3
    }
    $31_1 = HEAP32[global$6 >> 2] | 0;
    HEAP32[($3_1 + 304 | 0) >> 2] = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
    $127($31_1 | 0, global$3 + 1333 | 0 | 0, $3_1 + 304 | 0 | 0) | 0;
    HEAP32[($3_1 + 1420 | 0) >> 2] = -1;
    break label$1;
   }
   label$4 : {
    label$5 : while (1) {
     if (!(($106($3_1 + 384 | 0 | 0, 1024 | 0, HEAP32[($3_1 + 1412 | 0) >> 2] | 0 | 0) | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     HEAP32[($3_1 + 312 | 0) >> 2] = (HEAP32[($3_1 + 312 | 0) >> 2] | 0) + 1 | 0;
     $60_1 = $162($3_1 + 384 | 0 | 0, global$3 + 1366 | 0 | 0) | 0;
     HEAP32[($3_1 + 308 | 0) >> 2] = 0;
     HEAP32[($3_1 + 336 | 0) >> 2] = $60_1;
     label$6 : {
      if ((HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
       break label$6
      }
      continue label$5;
     }
     label$7 : {
      label$8 : {
       if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1394 | 0 | 0) | 0) {
        break label$8
       }
       HEAP32[($3_1 + 308 | 0) >> 2] = -1;
       break label$7;
      }
      $77_1 = 24;
      label$9 : {
       if (!((((HEAPU8[(HEAP32[($3_1 + 336 | 0) >> 2] | 0) >> 0] | 0) << $77_1 | 0) >> $77_1 | 0 | 0) == (35 | 0) & 1 | 0)) {
        break label$9
       }
       continue label$5;
      }
     }
     label$10 : while (1) {
      $101_1 = 0;
      label$11 : {
       if (!((HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 308 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
        break label$11
       }
       $111_1 = 24;
       $101_1 = 0;
       if (!((((HEAPU8[(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 308 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 0] | 0) << $111_1 | 0) >> $111_1 | 0 | 0) != (35 | 0) & 1 | 0)) {
        break label$11
       }
       $101_1 = (HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) < (10 | 0);
      }
      label$12 : {
       if (!($101_1 & 1 | 0)) {
        break label$12
       }
       $133_1 = $162(0 | 0, global$3 + 1366 | 0 | 0) | 0;
       $136_1 = (HEAP32[($3_1 + 308 | 0) >> 2] | 0) + 1 | 0;
       HEAP32[($3_1 + 308 | 0) >> 2] = $136_1;
       HEAP32[(($3_1 + 336 | 0) + ($136_1 << 2 | 0) | 0) >> 2] = $133_1;
       continue label$10;
      }
      break label$10;
     };
     label$13 : {
      label$14 : {
       label$15 : {
        if (!($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1437 | 0 | 0) | 0)) {
         break label$15
        }
        if (!($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1457 | 0 | 0) | 0)) {
         break label$15
        }
        if (!($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1479 | 0 | 0) | 0)) {
         break label$15
        }
        if (!($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1503 | 0 | 0) | 0)) {
         break label$15
        }
        if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1520 | 0 | 0) | 0) {
         break label$14
        }
       }
       break label$13;
      }
      label$16 : {
       label$17 : {
        if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1534 | 0 | 0) | 0) {
         break label$17
        }
        $127(HEAP32[global$6 >> 2] | 0 | 0, global$3 + 1569 | 0 | 0, 0 | 0) | 0;
        break label$16;
       }
       label$18 : {
        label$19 : {
         label$20 : {
          if (!($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1617 | 0 | 0) | 0)) {
           break label$20
          }
          if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1643 | 0 | 0) | 0) {
           break label$19
          }
         }
         $190_1 = HEAP32[global$6 >> 2] | 0;
         HEAP32[($3_1 + 288 | 0) >> 2] = HEAP32[($3_1 + 336 | 0) >> 2] | 0;
         $127($190_1 | 0, global$3 + 1680 | 0 | 0, $3_1 + 288 | 0 | 0) | 0;
         break label$18;
        }
        label$21 : {
         label$22 : {
          if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1723 | 0 | 0) | 0) {
           break label$22
          }
          $127(HEAP32[global$6 >> 2] | 0 | 0, global$3 + 1770 | 0 | 0, 0 | 0) | 0;
          break label$21;
         }
         label$23 : {
          label$24 : {
           if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1816 | 0 | 0) | 0) {
            break label$24
           }
           $127(HEAP32[global$6 >> 2] | 0 | 0, global$3 + 1852 | 0 | 0, 0 | 0) | 0;
           break label$23;
          }
          label$25 : {
           label$26 : {
            label$27 : {
             if (!($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1902 | 0 | 0) | 0)) {
              break label$27
             }
             if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 1926 | 0 | 0) | 0) {
              break label$26
             }
            }
            $230 = HEAP32[global$6 >> 2] | 0;
            HEAP32[($3_1 + 272 | 0) >> 2] = HEAP32[($3_1 + 336 | 0) >> 2] | 0;
            $127($230 | 0, global$3 + 1996 | 0 | 0, $3_1 + 272 | 0 | 0) | 0;
            break label$25;
           }
           label$28 : {
            label$29 : {
             if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 2040 | 0 | 0) | 0) {
              break label$29
             }
             $127(HEAP32[global$6 >> 2] | 0 | 0, global$3 + 2098 | 0 | 0, 0 | 0) | 0;
             break label$28;
            }
            label$30 : {
             label$31 : {
              if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 2147 | 0 | 0) | 0) {
               break label$31
              }
              $127(HEAP32[global$6 >> 2] | 0 | 0, global$3 + 2214 | 0 | 0, 0 | 0) | 0;
              break label$30;
             }
             label$32 : {
              label$33 : {
               if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 2258 | 0 | 0) | 0) {
                break label$33
               }
               label$34 : {
                if (!((HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
                 break label$34
                }
                $272 = HEAP32[global$6 >> 2] | 0;
                $273 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                HEAP32[($3_1 + 260 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                HEAP32[($3_1 + 256 | 0) >> 2] = $273;
                $127($272 | 0, global$3 + 2317 | 0 | 0, $3_1 + 256 | 0 | 0) | 0;
                HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                break label$1;
               }
               HEAP32[($3_1 + 324 | 0) >> 2] = 1;
               label$35 : {
                label$36 : while (1) {
                 if (!((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                  break label$35
                 }
                 $3(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
                 HEAP32[($3_1 + 324 | 0) >> 2] = (HEAP32[($3_1 + 324 | 0) >> 2] | 0) + 1 | 0;
                 continue label$36;
                };
               }
               break label$32;
              }
              label$37 : {
               label$38 : {
                if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 2350 | 0 | 0) | 0) {
                 break label$38
                }
                label$39 : {
                 if (!((HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
                  break label$39
                 }
                 $313 = HEAP32[global$6 >> 2] | 0;
                 $314 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                 HEAP32[($3_1 + 244 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                 HEAP32[($3_1 + 240 | 0) >> 2] = $314;
                 $127($313 | 0, global$3 + 2386 | 0 | 0, $3_1 + 240 | 0 | 0) | 0;
                 HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                 break label$1;
                }
                HEAP32[($3_1 + 324 | 0) >> 2] = 1;
                label$40 : {
                 label$41 : while (1) {
                  if (!((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                   break label$40
                  }
                  $332 = global$3 + 14192 | 0;
                  HEAP32[$332 >> 2] = (HEAP32[$332 >> 2] | 0) + 1 | 0;
                  $105(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) | 0;
                  HEAP32[$332 >> 2] = (HEAP32[$332 >> 2] | 0) + -1 | 0;
                  HEAP32[($3_1 + 324 | 0) >> 2] = (HEAP32[($3_1 + 324 | 0) >> 2] | 0) + 1 | 0;
                  continue label$41;
                 };
                }
                break label$37;
               }
               label$42 : {
                label$43 : {
                 if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 2446 | 0 | 0) | 0) {
                  break label$43
                 }
                 label$44 : {
                  if (!((HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) != (2 | 0) & 1 | 0)) {
                   break label$44
                  }
                  $362 = HEAP32[global$6 >> 2] | 0;
                  $363 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                  HEAP32[($3_1 + 228 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                  HEAP32[($3_1 + 224 | 0) >> 2] = $363;
                  $127($362 | 0, global$3 + 2515 | 0 | 0, $3_1 + 224 | 0 | 0) | 0;
                  HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                  break label$1;
                 }
                 $374 = global$3 + 13936 | 0;
                 $157($374 | 0, HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0, 255 | 0) | 0;
                 HEAP8[($374 + 255 | 0) >> 0] = 0;
                 break label$42;
                }
                label$45 : {
                 label$46 : {
                  if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 2565 | 0 | 0) | 0) {
                   break label$46
                  }
                  label$47 : {
                   if (!((HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
                    break label$47
                   }
                   $390 = HEAP32[global$6 >> 2] | 0;
                   $391 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 196 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 192 | 0) >> 2] = $391;
                   $127($390 | 0, global$3 + 2602 | 0 | 0, $3_1 + 192 | 0 | 0) | 0;
                   HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                   break label$1;
                  }
                  HEAP32[($3_1 + 324 | 0) >> 2] = $173(HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) | 0;
                  label$48 : {
                   label$49 : {
                    if ((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
                     break label$49
                    }
                    if (!((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) > (127 | 0) & 1 | 0)) {
                     break label$48
                    }
                   }
                   $416 = HEAP32[global$6 >> 2] | 0;
                   $417 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 212 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 208 | 0) >> 2] = $417;
                   $127($416 | 0, global$3 + 2675 | 0 | 0, $3_1 + 208 | 0 | 0) | 0;
                   HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                   break label$1;
                  }
                  label$50 : {
                   if ((HEAP32[((global$3 + 13408 | 0) + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                    break label$50
                   }
                   $439 = 516;
                   $440 = $2($439 | 0) | 0;
                   $444 = global$3 + 13408 | 0;
                   $445 = 2;
                   HEAP32[($444 + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << $445 | 0) | 0) >> 2] = $440;
                   $200(HEAP32[($444 + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << $445 | 0) | 0) >> 2] | 0 | 0, 0 | 0, $439 | 0) | 0;
                   $454 = $2(3584 | 0) | 0;
                   HEAP32[(HEAP32[($444 + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << $445 | 0) | 0) >> 2] | 0) >> 2] = $454;
                   $200(HEAP32[(HEAP32[($444 + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << $445 | 0) | 0) >> 2] | 0) >> 2] | 0 | 0, 0 | 0, 3584 | 0) | 0;
                  }
                  HEAP32[($3_1 + 328 | 0) >> 2] = HEAP32[((global$3 + 13408 | 0) + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
                  break label$45;
                 }
                 label$51 : {
                  label$52 : {
                   if ($163(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0, global$3 + 2724 | 0 | 0) | 0) {
                    break label$52
                   }
                   label$53 : {
                    if (!((HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0)) {
                     break label$53
                    }
                    $487 = HEAP32[global$6 >> 2] | 0;
                    $488 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                    HEAP32[($3_1 + 164 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                    HEAP32[($3_1 + 160 | 0) >> 2] = $488;
                    $127($487 | 0, global$3 + 2757 | 0 | 0, $3_1 + 160 | 0 | 0) | 0;
                    HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                    break label$1;
                   }
                   HEAP32[($3_1 + 324 | 0) >> 2] = $173(HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) | 0;
                   label$54 : {
                    label$55 : {
                     if ((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
                      break label$55
                     }
                     if (!((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) > (127 | 0) & 1 | 0)) {
                      break label$54
                     }
                    }
                    $513 = HEAP32[global$6 >> 2] | 0;
                    $514 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                    HEAP32[($3_1 + 180 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                    HEAP32[($3_1 + 176 | 0) >> 2] = $514;
                    $127($513 | 0, global$3 + 2809 | 0 | 0, $3_1 + 176 | 0 | 0) | 0;
                    HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                    break label$1;
                   }
                   label$56 : {
                    if ((HEAP32[((global$3 + 12896 | 0) + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                     break label$56
                    }
                    $536 = 516;
                    $537 = $2($536 | 0) | 0;
                    $541 = global$3 + 12896 | 0;
                    $542 = 2;
                    HEAP32[($541 + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << $542 | 0) | 0) >> 2] = $537;
                    $200(HEAP32[($541 + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << $542 | 0) | 0) >> 2] | 0 | 0, 0 | 0, $536 | 0) | 0;
                    $551 = $2(3584 | 0) | 0;
                    HEAP32[(HEAP32[($541 + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << $542 | 0) | 0) >> 2] | 0) >> 2] = $551;
                    $200(HEAP32[(HEAP32[($541 + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << $542 | 0) | 0) >> 2] | 0) >> 2] | 0 | 0, 0 | 0, 3584 | 0) | 0;
                   }
                   HEAP32[($3_1 + 328 | 0) >> 2] = HEAP32[((global$3 + 12896 | 0) + ((HEAP32[($3_1 + 324 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
                   break label$51;
                  }
                  label$57 : {
                   label$58 : {
                    if ((HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) < (2 | 0) & 1 | 0) {
                     break label$58
                    }
                    $580 = 24;
                    if ((((HEAPU8[(HEAP32[($3_1 + 336 | 0) >> 2] | 0) >> 0] | 0) << $580 | 0) >> $580 | 0 | 0) < (48 | 0) & 1 | 0) {
                     break label$58
                    }
                    $591 = 24;
                    if (!((((HEAPU8[(HEAP32[($3_1 + 336 | 0) >> 2] | 0) >> 0] | 0) << $591 | 0) >> $591 | 0 | 0) > (57 | 0) & 1 | 0)) {
                     break label$57
                    }
                   }
                   $601 = HEAP32[global$6 >> 2] | 0;
                   $602 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 4 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                   HEAP32[$3_1 >> 2] = $602;
                   $127($601 | 0, global$3 + 2859 | 0 | 0, $3_1 | 0) | 0;
                   HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                   break label$1;
                  }
                  HEAP32[($3_1 + 324 | 0) >> 2] = $173(HEAP32[($3_1 + 336 | 0) >> 2] | 0 | 0) | 0;
                  label$59 : {
                   label$60 : {
                    if ((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
                     break label$60
                    }
                    if (!((HEAP32[($3_1 + 324 | 0) >> 2] | 0 | 0) > (127 | 0) & 1 | 0)) {
                     break label$59
                    }
                   }
                   $625 = HEAP32[global$6 >> 2] | 0;
                   $626 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 20 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 16 | 0) >> 2] = $626;
                   $127($625 | 0, global$3 + 2961 | 0 | 0, $3_1 + 16 | 0 | 0) | 0;
                   HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                   break label$1;
                  }
                  label$61 : {
                   if ((HEAP32[($3_1 + 328 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
                    break label$61
                   }
                   $642 = HEAP32[global$6 >> 2] | 0;
                   $643 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 148 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                   HEAP32[($3_1 + 144 | 0) >> 2] = $643;
                   $127($642 | 0, global$3 + 3013 | 0 | 0, $3_1 + 144 | 0 | 0) | 0;
                   HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                   break label$1;
                  }
                  label$62 : {
                   if (!((HEAP32[((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
                    break label$62
                   }
                   $195(HEAP32[((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0);
                  }
                  $675 = $2(($208(HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) | 0) + 1 | 0 | 0) | 0;
                  HEAP32[((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) >> 2] = $675;
                  $169($675 | 0, HEAP32[($3_1 + 340 | 0) >> 2] | 0 | 0) | 0;
                  HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] = -1;
                  HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 20 | 0) >> 2] = -1;
                  HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 16 | 0) >> 2] = -1;
                  HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 12 | 0) >> 2] = -1;
                  HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] = -1;
                  HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] = -1;
                  HEAP32[($3_1 + 320 | 0) >> 2] = 2;
                  label$63 : {
                   label$64 : while (1) {
                    if (!((HEAP32[($3_1 + 320 | 0) >> 2] | 0 | 0) < (HEAP32[($3_1 + 308 | 0) >> 2] | 0 | 0) & 1 | 0)) {
                     break label$63
                    }
                    $742 = $165(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 320 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, 61 | 0) | 0;
                    HEAP32[($3_1 + 332 | 0) >> 2] = $742;
                    label$65 : {
                     if (($742 | 0) != (0 | 0) & 1 | 0) {
                      break label$65
                     }
                     $750 = HEAP32[global$6 >> 2] | 0;
                     $751 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                     $752 = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                     HEAP32[($3_1 + 136 | 0) >> 2] = HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 320 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
                     HEAP32[($3_1 + 132 | 0) >> 2] = $752;
                     HEAP32[($3_1 + 128 | 0) >> 2] = $751;
                     $127($750 | 0, global$3 + 3094 | 0 | 0, $3_1 + 128 | 0 | 0) | 0;
                     HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                     break label$1;
                    }
                    $767 = HEAP32[($3_1 + 332 | 0) >> 2] | 0;
                    HEAP32[($3_1 + 332 | 0) >> 2] = $767 + 1 | 0;
                    HEAP8[$767 >> 0] = 0;
                    label$66 : {
                     label$67 : {
                      if ($163(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 320 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, global$3 + 3128 | 0 | 0) | 0) {
                       break label$67
                      }
                      HEAP32[($3_1 + 316 | 0) >> 2] = $173(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0) | 0;
                      label$68 : {
                       label$69 : {
                        if ((HEAP32[($3_1 + 316 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
                         break label$69
                        }
                        if ((HEAP32[($3_1 + 316 | 0) >> 2] | 0 | 0) > (800 | 0) & 1 | 0) {
                         break label$69
                        }
                        $801 = 24;
                        if ((((HEAPU8[(HEAP32[($3_1 + 332 | 0) >> 2] | 0) >> 0] | 0) << $801 | 0) >> $801 | 0 | 0) < (48 | 0) & 1 | 0) {
                         break label$69
                        }
                        $812 = 24;
                        if (!((((HEAPU8[(HEAP32[($3_1 + 332 | 0) >> 2] | 0) >> 0] | 0) << $812 | 0) >> $812 | 0 | 0) > (57 | 0) & 1 | 0)) {
                         break label$68
                        }
                       }
                       $822 = HEAP32[global$6 >> 2] | 0;
                       $823 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                       $824 = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                       HEAP32[($3_1 + 120 | 0) >> 2] = 800;
                       HEAP32[($3_1 + 116 | 0) >> 2] = $824;
                       HEAP32[($3_1 + 112 | 0) >> 2] = $823;
                       $127($822 | 0, global$3 + 3146 | 0 | 0, $3_1 + 112 | 0 | 0) | 0;
                       HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                       break label$1;
                      }
                      HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 8 | 0) >> 2] = HEAP32[($3_1 + 316 | 0) >> 2] | 0;
                      break label$66;
                     }
                     label$70 : {
                      label$71 : {
                       if ($163(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 320 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, global$3 + 3199 | 0 | 0) | 0) {
                        break label$71
                       }
                       HEAP32[($3_1 + 316 | 0) >> 2] = $173(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0) | 0;
                       label$72 : {
                        label$73 : {
                         if ((HEAP32[($3_1 + 316 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
                          break label$73
                         }
                         if ((HEAP32[($3_1 + 316 | 0) >> 2] | 0 | 0) > (127 | 0) & 1 | 0) {
                          break label$73
                         }
                         $869 = 24;
                         if ((((HEAPU8[(HEAP32[($3_1 + 332 | 0) >> 2] | 0) >> 0] | 0) << $869 | 0) >> $869 | 0 | 0) < (48 | 0) & 1 | 0) {
                          break label$73
                         }
                         $880 = 24;
                         if (!((((HEAPU8[(HEAP32[($3_1 + 332 | 0) >> 2] | 0) >> 0] | 0) << $880 | 0) >> $880 | 0 | 0) > (57 | 0) & 1 | 0)) {
                          break label$72
                         }
                        }
                        $890 = HEAP32[global$6 >> 2] | 0;
                        $891 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                        HEAP32[($3_1 + 100 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                        HEAP32[($3_1 + 96 | 0) >> 2] = $891;
                        $127($890 | 0, global$3 + 3219 | 0 | 0, $3_1 + 96 | 0 | 0) | 0;
                        HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                        break label$1;
                       }
                       HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 4 | 0) >> 2] = HEAP32[($3_1 + 316 | 0) >> 2] | 0;
                       break label$70;
                      }
                      label$74 : {
                       label$75 : {
                        if ($163(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 320 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, global$3 + 3264 | 0 | 0) | 0) {
                         break label$75
                        }
                        label$76 : {
                         label$77 : {
                          if ($163(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0, global$3 + 3272 | 0 | 0) | 0) {
                           break label$77
                          }
                          HEAP32[($3_1 + 316 | 0) >> 2] = 64;
                          break label$76;
                         }
                         label$78 : {
                          label$79 : {
                           if ($163(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0, global$3 + 3283 | 0 | 0) | 0) {
                            break label$79
                           }
                           HEAP32[($3_1 + 316 | 0) >> 2] = 0;
                           break label$78;
                          }
                          label$80 : {
                           label$81 : {
                            if ($163(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0, global$3 + 3293 | 0 | 0) | 0) {
                             break label$81
                            }
                            HEAP32[($3_1 + 316 | 0) >> 2] = 127;
                            break label$80;
                           }
                           HEAP32[($3_1 + 316 | 0) >> 2] = (Math_imul(($173(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0) | 0) + 100 | 0, 100) | 0) / (157 | 0) | 0;
                          }
                         }
                        }
                        label$82 : {
                         label$83 : {
                          if ((HEAP32[($3_1 + 316 | 0) >> 2] | 0 | 0) < (0 | 0) & 1 | 0) {
                           break label$83
                          }
                          if ((HEAP32[($3_1 + 316 | 0) >> 2] | 0 | 0) > (127 | 0) & 1 | 0) {
                           break label$83
                          }
                          if (HEAP32[($3_1 + 316 | 0) >> 2] | 0) {
                           break label$82
                          }
                          $961 = 24;
                          if (!((((HEAPU8[(HEAP32[($3_1 + 332 | 0) >> 2] | 0) >> 0] | 0) << $961 | 0) >> $961 | 0 | 0) != (45 | 0) & 1 | 0)) {
                           break label$82
                          }
                          $972 = 24;
                          if ((((HEAPU8[(HEAP32[($3_1 + 332 | 0) >> 2] | 0) >> 0] | 0) << $972 | 0) >> $972 | 0 | 0) < (48 | 0) & 1 | 0) {
                           break label$83
                          }
                          $983 = 24;
                          if (!((((HEAPU8[(HEAP32[($3_1 + 332 | 0) >> 2] | 0) >> 0] | 0) << $983 | 0) >> $983 | 0 | 0) > (57 | 0) & 1 | 0)) {
                           break label$82
                          }
                         }
                         $993 = HEAP32[global$6 >> 2] | 0;
                         $994 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                         HEAP32[($3_1 + 84 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                         HEAP32[($3_1 + 80 | 0) >> 2] = $994;
                         $127($993 | 0, global$3 + 3317 | 0 | 0, $3_1 + 80 | 0 | 0) | 0;
                         HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                         break label$1;
                        }
                        HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 12 | 0) >> 2] = HEAP32[($3_1 + 316 | 0) >> 2] | 0;
                        break label$74;
                       }
                       label$84 : {
                        label$85 : {
                         if ($163(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 320 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, global$3 + 3392 | 0 | 0) | 0) {
                          break label$85
                         }
                         label$86 : {
                          label$87 : {
                           if ($163(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0, global$3 + 3413 | 0 | 0) | 0) {
                            break label$87
                           }
                           HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 20 | 0) >> 2] = 0;
                           break label$86;
                          }
                          label$88 : {
                           label$89 : {
                            if ($163(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0, global$3 + 3425 | 0 | 0) | 0) {
                             break label$89
                            }
                            HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 16 | 0) >> 2] = 0;
                            break label$88;
                           }
                           $1046 = HEAP32[global$6 >> 2] | 0;
                           $1047 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                           HEAP32[($3_1 + 68 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                           HEAP32[($3_1 + 64 | 0) >> 2] = $1047;
                           $127($1046 | 0, global$3 + 3448 | 0 | 0, $3_1 + 64 | 0 | 0) | 0;
                           HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                           break label$1;
                          }
                         }
                         break label$84;
                        }
                        label$90 : {
                         label$91 : {
                          if ($163(HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 320 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0, global$3 + 3487 | 0 | 0) | 0) {
                           break label$91
                          }
                          label$92 : {
                           label$93 : {
                            if ($163(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0, global$3 + 3413 | 0 | 0) | 0) {
                             break label$93
                            }
                            HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 20 | 0) >> 2] = 1;
                            break label$92;
                           }
                           label$94 : {
                            label$95 : {
                             if ($163(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0, global$3 + 3425 | 0 | 0) | 0) {
                              break label$95
                             }
                             HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 16 | 0) >> 2] = 1;
                             break label$94;
                            }
                            label$96 : {
                             label$97 : {
                              if ($163(HEAP32[($3_1 + 332 | 0) >> 2] | 0 | 0, global$3 + 3498 | 0 | 0) | 0) {
                               break label$97
                              }
                              HEAP32[(((HEAP32[(HEAP32[($3_1 + 328 | 0) >> 2] | 0) >> 2] | 0) + Math_imul(HEAP32[($3_1 + 324 | 0) >> 2] | 0, 28) | 0) + 24 | 0) >> 2] = 1;
                              break label$96;
                             }
                             $1104 = HEAP32[global$6 >> 2] | 0;
                             $1105 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                             HEAP32[($3_1 + 52 | 0) >> 2] = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                             HEAP32[($3_1 + 48 | 0) >> 2] = $1105;
                             $127($1104 | 0, global$3 + 3523 | 0 | 0, $3_1 + 48 | 0 | 0) | 0;
                             HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                             break label$1;
                            }
                           }
                          }
                          break label$90;
                         }
                         $1114 = HEAP32[global$6 >> 2] | 0;
                         $1115 = HEAP32[($3_1 + 1416 | 0) >> 2] | 0;
                         $1116 = HEAP32[($3_1 + 312 | 0) >> 2] | 0;
                         HEAP32[($3_1 + 40 | 0) >> 2] = HEAP32[(($3_1 + 336 | 0) + ((HEAP32[($3_1 + 320 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0;
                         HEAP32[($3_1 + 36 | 0) >> 2] = $1116;
                         HEAP32[($3_1 + 32 | 0) >> 2] = $1115;
                         $127($1114 | 0, global$3 + 3094 | 0 | 0, $3_1 + 32 | 0 | 0) | 0;
                         HEAP32[($3_1 + 1420 | 0) >> 2] = -2;
                         break label$1;
                        }
                       }
                      }
                     }
                    }
                    HEAP32[($3_1 + 320 | 0) >> 2] = (HEAP32[($3_1 + 320 | 0) >> 2] | 0) + 1 | 0;
                    continue label$64;
                   };
                  }
                 }
                }
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
     continue label$5;
    };
   }
   $119(HEAP32[($3_1 + 1412 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($3_1 + 1420 | 0) >> 2] = 0;
  }
  $1136 = HEAP32[($3_1 + 1420 | 0) >> 2] | 0;
  global$0 = $3_1 + 1424 | 0;
  return $1136 | 0;
 }
 
 function $106($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $16_1 = 0, $31_1 = 0, $43_1 = 0, $56_1 = 0, $79_1 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 28 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $2_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = 0;
  HEAP32[($5_1 + 12 | 0) >> 2] = 0;
  label$1 : while (1) {
   $16_1 = 0;
   label$2 : {
    if (!((HEAP32[($5_1 + 16 | 0) >> 2] | 0 | 0) < (HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) & 1 | 0)) {
     break label$2
    }
    $16_1 = (HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) != (0 | 0) ^ -1 | 0;
   }
   label$3 : {
    if (!($16_1 & 1 | 0)) {
     break label$3
    }
    $31_1 = 1;
    label$4 : {
     if (!(($122((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0 | 0, $31_1 | 0, $31_1 | 0, HEAP32[($5_1 + 20 | 0) >> 2] | 0 | 0) | 0 | 0) != (1 | 0) & 1 | 0)) {
      break label$4
     }
     break label$3;
    }
    $43_1 = 24;
    label$5 : {
     label$6 : {
      if ((((HEAPU8[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0) << $43_1 | 0) >> $43_1 | 0 | 0) == (10 | 0) & 1 | 0) {
       break label$6
      }
      $56_1 = 24;
      if (!((((HEAPU8[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0) >> 0] | 0) << $56_1 | 0) >> $56_1 | 0 | 0) == (13 | 0) & 1 | 0)) {
       break label$5
      }
     }
     HEAP8[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0) >> 0] = 0;
     HEAP32[($5_1 + 12 | 0) >> 2] = 1;
    }
    HEAP32[($5_1 + 16 | 0) >> 2] = (HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 1 | 0;
    continue label$1;
   }
   break label$1;
  };
  HEAP8[((HEAP32[($5_1 + 28 | 0) >> 2] | 0) + (HEAP32[($5_1 + 16 | 0) >> 2] | 0) | 0) >> 0] = 0;
  label$7 : {
   label$8 : {
    if (!(HEAP32[($5_1 + 16 | 0) >> 2] | 0)) {
     break label$8
    }
    $79_1 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
    break label$7;
   }
   $79_1 = 0;
  }
  global$0 = $5_1 + 32 | 0;
  return $79_1 | 0;
 }
 
 function $107($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $10_1 = 0;
  $6_1 = global$0 - 16 | 0;
  HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
  HEAP16[($6_1 + 10 | 0) >> 1] = $1_1;
  HEAP8[($6_1 + 9 | 0) >> 0] = $2_1;
  HEAP16[($6_1 + 6 | 0) >> 1] = $3_1;
  $10_1 = global$3 + 13920 | 0;
  HEAP32[$10_1 >> 2] = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
  HEAP16[($10_1 + 4 | 0) >> 1] = HEAPU16[($6_1 + 10 | 0) >> 1] | 0;
  HEAP8[($10_1 + 6 | 0) >> 0] = HEAPU8[($6_1 + 9 | 0) >> 0] | 0;
  HEAP16[($10_1 + 8 | 0) >> 1] = HEAPU16[($6_1 + 6 | 0) >> 1] | 0;
  return $10_1 | 0;
 }
 
 function $108($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $5_1 = 0, $176_1 = 0, $47_1 = 0, $93_1 = 0, $43_1 = 0, $50_1 = 0, $89_1 = 0, $96_1 = 0, $147_1 = 0, $157_1 = 0, $171_1 = 0, $294 = 0, $44_1 = 0, $90_1 = 0, $216 = 0, $226 = 0, $281 = 0, $314 = 0;
  $5_1 = global$0 - 32 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 24 | 0) >> 2] = $0_1;
  HEAP32[($5_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($5_1 + 16 | 0) >> 2] = $2_1;
  label$1 : {
   label$2 : {
    if (!((HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0) == (0 | 0) & 1 | 0)) {
     break label$2
    }
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   HEAP32[($5_1 + 12 | 0) >> 2] = $2(14164 | 0) | 0;
   $200(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, 14164 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 24 | 0) >> 2] = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
   HEAP32[($5_1 + 8 | 0) >> 2] = 0;
   label$3 : {
    label$4 : while (1) {
     if (!((HEAP32[($5_1 + 8 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
      break label$3
     }
     label$5 : {
      if (!((HEAP32[((global$3 + 12896 | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$5
      }
      $43_1 = 516;
      $44_1 = $2($43_1 | 0) | 0;
      $47_1 = 2;
      $50_1 = 28;
      HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << $47_1 | 0) | 0) + $50_1 | 0) >> 2] = $44_1;
      $200(HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << $47_1 | 0) | 0) + $50_1 | 0) >> 2] | 0 | 0, 0 | 0, $43_1 | 0) | 0;
      HEAP32[(HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[((global$3 + 12896 | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << $47_1 | 0) | 0) >> 2] | 0) >> 2] | 0;
     }
     label$6 : {
      if (!((HEAP32[((global$3 + 13408 | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$6
      }
      $89_1 = 516;
      $90_1 = $2($89_1 | 0) | 0;
      $93_1 = 2;
      $96_1 = 540;
      HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << $93_1 | 0) | 0) + $96_1 | 0) >> 2] = $90_1;
      $200(HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << $93_1 | 0) | 0) + $96_1 | 0) >> 2] | 0 | 0, 0 | 0, $89_1 | 0) | 0;
      HEAP32[(HEAP32[(((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 2] = HEAP32[(HEAP32[((global$3 + 13408 | 0) + ((HEAP32[($5_1 + 8 | 0) >> 2] | 0) << $93_1 | 0) | 0) >> 2] | 0) >> 2] | 0;
     }
     HEAP32[($5_1 + 8 | 0) >> 2] = (HEAP32[($5_1 + 8 | 0) >> 2] | 0) + 1 | 0;
     continue label$4;
    };
   }
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 20 | 0) >> 2] = 70;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13052 | 0) >> 2] = 32;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13056 | 0) >> 2] = 33280;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 4 | 0) >> 2] = HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] = 0;
   label$7 : {
    if (!((((HEAPU16[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 1] | 0) & 65535 | 0) & 255 | 0 | 0) == (16 | 0) & 1 | 0)) {
     break label$7
    }
    $147_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($147_1 + 8 | 0) >> 2] = HEAP32[($147_1 + 8 | 0) >> 2] | 0 | 4 | 0;
   }
   label$8 : {
    if (!(((HEAPU16[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 1] | 0) & 65535 | 0) & 32768 | 0)) {
     break label$8
    }
    $157_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($157_1 + 8 | 0) >> 2] = HEAP32[($157_1 + 8 | 0) >> 2] | 0 | 2 | 0;
   }
   label$9 : {
    if (!(((HEAPU8[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 6 | 0) >> 0] | 0) & 255 | 0 | 0) == (1 | 0) & 1 | 0)) {
     break label$9
    }
    $171_1 = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
    HEAP32[($171_1 + 8 | 0) >> 2] = HEAP32[($171_1 + 8 | 0) >> 2] | 0 | 1 | 0;
   }
   $176_1 = HEAPU16[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 4 | 0) >> 1] | 0;
   label$10 : {
    label$11 : {
     label$12 : {
      label$13 : {
       label$14 : {
        label$15 : {
         if (($176_1 | 0) == (8 | 0)) {
          break label$15
         }
         if (($176_1 | 0) == (16 | 0)) {
          break label$12
         }
         label$16 : {
          if (($176_1 | 0) == (32776 | 0)) {
           break label$16
          }
          if (($176_1 | 0) == (32784 | 0)) {
           break label$14
          }
          if (($176_1 | 0) == (36880 | 0)) {
           break label$13
          }
          break label$11;
         }
         HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1060 | 0) >> 2] = global$11;
         break label$10;
        }
        HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1060 | 0) >> 2] = global$12;
        break label$10;
       }
       HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1060 | 0) >> 2] = global$13;
       break label$10;
      }
      HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1060 | 0) >> 2] = global$14;
      break label$10;
     }
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1060 | 0) >> 2] = global$15;
     break label$10;
    }
    $127(HEAP32[global$6 >> 2] | 0 | 0, global$3 + 1210 | 0 | 0, 0 | 0) | 0;
    HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1060 | 0) >> 2] = global$15;
   }
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1064 | 0) >> 2] = (HEAPU16[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 1] | 0) & 65535 | 0;
   $216 = $2(((HEAPU16[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 1] | 0) & 65535 | 0) << 1 | 0 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1068 | 0) >> 2] = $216;
   $226 = $2((((HEAPU16[((HEAP32[($5_1 + 16 | 0) >> 2] | 0) + 8 | 0) >> 1] | 0) & 65535 | 0) << 1 | 0) << 2 | 0 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1072 | 0) >> 2] = $226;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 12 | 0) >> 2] = Math_imul((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 1 | 0 ? 1 : 2, (HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 8 | 0) >> 2] | 0) & 4 | 0 ? 2 : 1);
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13060 | 0) >> 2] = (HEAP32[(HEAP32[($5_1 + 16 | 0) >> 2] | 0) >> 2] | 0 | 0) / (1e3 | 0) | 0;
   label$17 : {
    label$18 : {
     if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0 | 0) < (1 | 0) & 1 | 0)) {
      break label$18
     }
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13060 | 0) >> 2] = 1;
     break label$17;
    }
    label$19 : {
     if (!((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13060 | 0) >> 2] | 0 | 0) > (255 | 0) & 1 | 0)) {
      break label$19
     }
     HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13060 | 0) >> 2] = 255;
    }
   }
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13064 | 0) >> 2] = 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13068 | 0) >> 2] = 0;
   $281 = $79(HEAP32[($5_1 + 24 | 0) >> 2] | 0 | 0, HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13100 | 0 | 0, (HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13072 | 0 | 0) | 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13076 | 0) >> 2] = $281;
   label$20 : {
    if ((HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 13076 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0) {
     break label$20
    }
    $195(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0);
    HEAP32[($5_1 + 28 | 0) >> 2] = 0;
    break label$1;
   }
   $294 = 0;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1052 | 0) >> 2] = $294;
   HEAP32[((HEAP32[($5_1 + 12 | 0) >> 2] | 0) + 1056 | 0) >> 2] = $294;
   label$21 : {
    if (!(((HEAPU8[(global$3 + 13936 | 0) >> 0] | 0) & 255 | 0 | 0) != (0 & 255 | 0 | 0) & 1 | 0)) {
     break label$21
    }
    $20(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0, global$3 + 13936 | 0 | 0) | 0;
   }
   $15(HEAP32[($5_1 + 12 | 0) >> 2] | 0 | 0) | 0;
   HEAP32[($5_1 + 28 | 0) >> 2] = HEAP32[($5_1 + 12 | 0) >> 2] | 0;
  }
  $314 = HEAP32[($5_1 + 28 | 0) >> 2] | 0;
  global$0 = $5_1 + 32 | 0;
  return $314 | 0;
 }
 
 function $109($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $8_1 = 0;
  $4_1 = global$0 - 16 | 0;
  global$0 = $4_1;
  HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
  HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
  $8_1 = $108(HEAP32[($4_1 + 12 | 0) >> 2] | 0 | 0, 0 | 0, HEAP32[($4_1 + 8 | 0) >> 2] | 0 | 0) | 0;
  global$0 = $4_1 + 16 | 0;
  return $8_1 | 0;
 }
 
 function $110($0_1) {
  $0_1 = $0_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
  $17(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     $195(HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 28 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    }
    label$4 : {
     if (!((HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$4
     }
     $195(HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 540 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $195(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1072 | 0) >> 2] | 0 | 0);
  $195(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 1068 | 0) >> 2] | 0 | 0);
  $195(HEAP32[((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13076 | 0) >> 2] | 0 | 0);
  HEAP32[($3_1 + 8 | 0) >> 2] = 0;
  label$5 : {
   label$6 : while (1) {
    if (!((HEAP32[($3_1 + 8 | 0) >> 2] | 0) >>> 0 < 8 >>> 0 & 1 | 0)) {
     break label$5
    }
    label$7 : {
     if (!((HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13104 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$7
     }
     $195(HEAP32[(((HEAP32[($3_1 + 12 | 0) >> 2] | 0) + 13104 | 0) + ((HEAP32[($3_1 + 8 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    }
    HEAP32[($3_1 + 8 | 0) >> 2] = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) + 1 | 0;
    continue label$6;
   };
  }
  $195(HEAP32[($3_1 + 12 | 0) >> 2] | 0 | 0);
  global$0 = $3_1 + 16 | 0;
  return;
 }
 
 function $111() {
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = 0;
  label$1 : {
   label$2 : while (1) {
    if (!((HEAP32[($2_1 + 12 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
     break label$1
    }
    label$3 : {
     if (!((HEAP32[((global$3 + 12896 | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$3
     }
     HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[(HEAP32[((global$3 + 12896 | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 2] | 0;
     label$4 : {
      if (!((HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$4
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = 0;
      label$5 : {
       label$6 : while (1) {
        if (!((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
         break label$5
        }
        label$7 : {
         if (!((HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($2_1 + 8 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$7
         }
         $195(HEAP32[((HEAP32[($2_1 + 4 | 0) >> 2] | 0) + Math_imul(HEAP32[($2_1 + 8 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0);
        }
        HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 1 | 0;
        continue label$6;
       };
      }
      $195(HEAP32[($2_1 + 4 | 0) >> 2] | 0 | 0);
     }
     $195(HEAP32[((global$3 + 12896 | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    }
    label$8 : {
     if (!((HEAP32[((global$3 + 13408 | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
      break label$8
     }
     HEAP32[$2_1 >> 2] = HEAP32[(HEAP32[((global$3 + 13408 | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0) >> 2] | 0;
     label$9 : {
      if (!((HEAP32[$2_1 >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
       break label$9
      }
      HEAP32[($2_1 + 8 | 0) >> 2] = 0;
      label$10 : {
       label$11 : while (1) {
        if (!((HEAP32[($2_1 + 8 | 0) >> 2] | 0 | 0) < (128 | 0) & 1 | 0)) {
         break label$10
        }
        label$12 : {
         if (!((HEAP32[((HEAP32[$2_1 >> 2] | 0) + Math_imul(HEAP32[($2_1 + 8 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0) != (0 | 0) & 1 | 0)) {
          break label$12
         }
         $195(HEAP32[((HEAP32[$2_1 >> 2] | 0) + Math_imul(HEAP32[($2_1 + 8 | 0) >> 2] | 0, 28) | 0) >> 2] | 0 | 0);
        }
        HEAP32[($2_1 + 8 | 0) >> 2] = (HEAP32[($2_1 + 8 | 0) >> 2] | 0) + 1 | 0;
        continue label$11;
       };
      }
      $195(HEAP32[$2_1 >> 2] | 0 | 0);
     }
     $195(HEAP32[((global$3 + 13408 | 0) + ((HEAP32[($2_1 + 12 | 0) >> 2] | 0) << 2 | 0) | 0) >> 2] | 0 | 0);
    }
    HEAP32[($2_1 + 12 | 0) >> 2] = (HEAP32[($2_1 + 12 | 0) >> 2] | 0) + 1 | 0;
    continue label$2;
   };
  }
  $4();
  global$0 = $2_1 + 16 | 0;
  return;
 }
 
 function $112($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0, $4_1 = 0, $3_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($165(8229 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
      break label$3
     }
     HEAP32[($174() | 0) >> 2] = 28;
     break label$2;
    }
    $3_1 = $120($1_1 | 0) | 0;
    HEAP32[$2_1 >> 2] = 438;
    $4_1 = 0;
    $0_1 = $172(fimport$0($0_1 | 0, $3_1 | 32768 | 0 | 0, $2_1 | 0) | 0 | 0) | 0;
    if (($0_1 | 0) < (0 | 0)) {
     break label$1
    }
    $4_1 = $145($0_1 | 0, $1_1 | 0) | 0;
    if ($4_1) {
     break label$1
    }
    fimport$1($0_1 | 0) | 0;
   }
   $4_1 = 0;
  }
  global$0 = $2_1 + 16 | 0;
  return $4_1 | 0;
 }
 
 function $113($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $13_1 = 0, $14_1 = 0, $11_1 = 0, $11$hi = 0;
  label$1 : {
   if (($2_1 | 0) != (1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$1 = (HEAP32[($0_1 + 8 | 0) >> 2] | 0) - (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$3 = $11_1;
   i64toi32_i32$5 = (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
   i64toi32_i32$5 = i64toi32_i32$0 - i64toi32_i32$5 | 0;
   $1_1 = i64toi32_i32$2 - i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$5;
  }
  label$2 : {
   label$3 : {
    if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
     break label$3
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    if (!(HEAP32[($0_1 + 20 | 0) >> 2] | 0)) {
     break label$2
    }
   }
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$5 = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, $1_1, i64toi32_i32$5, $2_1) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$3 = 0;
   if ((i64toi32_i32$2 | 0) < (i64toi32_i32$5 | 0)) {
    $12_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$5 | 0)) {
     if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
      $13_1 = 0
     } else {
      $13_1 = 1
     }
     $14_1 = $13_1;
    } else {
     $14_1 = 0
    }
    $12_1 = $14_1;
   }
   if ($12_1) {
    break label$2
   }
   i64toi32_i32$2 = $0_1;
   i64toi32_i32$0 = 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = 0;
   HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$0;
   HEAP32[$0_1 >> 2] = (HEAP32[$0_1 >> 2] | 0) & -17 | 0;
   return 0 | 0;
  }
  return -1 | 0;
 }
 
 function $114($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, $3_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
    break label$1
   }
   i64toi32_i32$0 = $1$hi;
   return $113($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
  }
  $3_1 = $206($0_1 | 0) | 0;
  i64toi32_i32$0 = $1$hi;
  $2_1 = $113($0_1 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0;
  label$2 : {
   if (!$3_1) {
    break label$2
   }
   $207($0_1 | 0);
  }
  return $2_1 | 0;
 }
 
 function $115($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0;
  i64toi32_i32$1 = $1_1;
  i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
  return $114($0_1 | 0, i64toi32_i32$1 | 0, i64toi32_i32$0 | 0, $2_1 | 0) | 0 | 0;
 }
 
 function $116() {
  $180(14196 | 0);
  return 14204 | 0;
 }
 
 function $117() {
  $181(14196 | 0);
 }
 
 function $118($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $119($0_1) {
  $0_1 = $0_1 | 0;
  var $5_1 = 0, $4_1 = 0, $3_1 = 0, $1_1 = 0, $2_1 = 0;
  $1_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $1_1 = $206($0_1 | 0) | 0;
  }
  $118($0_1 | 0);
  label$2 : {
   $2_1 = (HEAP32[$0_1 >> 2] | 0) & 1 | 0;
   if ($2_1) {
    break label$2
   }
   $3_1 = $116() | 0;
   label$3 : {
    $4_1 = HEAP32[($0_1 + 52 | 0) >> 2] | 0;
    if (!$4_1) {
     break label$3
    }
    HEAP32[($4_1 + 56 | 0) >> 2] = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
   }
   label$4 : {
    $5_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
    if (!$5_1) {
     break label$4
    }
    HEAP32[($5_1 + 52 | 0) >> 2] = $4_1;
   }
   label$5 : {
    if ((HEAP32[$3_1 >> 2] | 0 | 0) != ($0_1 | 0)) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = $5_1;
   }
   $117();
  }
  $3_1 = $123($0_1 | 0) | 0;
  $4_1 = FUNCTION_TABLE[HEAP32[($0_1 + 12 | 0) >> 2] | 0 | 0]($0_1) | 0;
  label$6 : {
   $5_1 = HEAP32[($0_1 + 96 | 0) >> 2] | 0;
   if (!$5_1) {
    break label$6
   }
   $195($5_1 | 0);
  }
  label$7 : {
   label$8 : {
    if ($2_1) {
     break label$8
    }
    $195($0_1 | 0);
    break label$7;
   }
   if (!$1_1) {
    break label$7
   }
   $207($0_1 | 0);
  }
  return $4_1 | $3_1 | 0 | 0;
 }
 
 function $120($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = 2;
  label$1 : {
   if ($165($0_1 | 0, 43 | 0) | 0) {
    break label$1
   }
   $1_1 = (HEAPU8[$0_1 >> 0] | 0 | 0) != (114 | 0);
  }
  $1_1 = $165($0_1 | 0, 120 | 0) | 0 ? $1_1 | 128 | 0 : $1_1;
  $1_1 = $165($0_1 | 0, 101 | 0) | 0 ? $1_1 | 524288 | 0 : $1_1;
  $0_1 = HEAPU8[$0_1 >> 0] | 0;
  $1_1 = ($0_1 | 0) == (114 | 0) ? $1_1 : $1_1 | 64 | 0;
  $1_1 = ($0_1 | 0) == (119 | 0) ? $1_1 | 512 | 0 : $1_1;
  return (($0_1 | 0) == (97 | 0) ? $1_1 | 1024 | 0 : $1_1) | 0;
 }
 
 function $121($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = 0;
  label$2 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 4 | 0)) {
    break label$2
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  $2_1 = (HEAP32[($0_1 + 44 | 0) >> 2] | 0) + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = $2_1;
  HEAP32[($0_1 + 4 | 0) >> 2] = $2_1;
  return ($1_1 << 27 | 0) >> 31 | 0 | 0;
 }
 
 function $122($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var $6_1 = 0, $8_1 = 0, $5_1 = 0, $4_1 = 0, $7_1 = 0;
  $4_1 = 0;
  label$1 : {
   if ((HEAP32[($3_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $4_1 = $206($3_1 | 0) | 0;
  }
  $5_1 = Math_imul($2_1, $1_1);
  $6_1 = HEAPU8[($3_1 + 74 | 0) >> 0] | 0;
  HEAP8[($3_1 + 74 | 0) >> 0] = $6_1 + -1 | 0 | $6_1 | 0;
  label$2 : {
   label$3 : {
    $7_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    $6_1 = (HEAP32[($3_1 + 8 | 0) >> 2] | 0) - $7_1 | 0;
    if (($6_1 | 0) >= (1 | 0)) {
     break label$3
    }
    $6_1 = $5_1;
    break label$2;
   }
   $8_1 = $6_1 >>> 0 < $5_1 >>> 0 ? $6_1 : $5_1;
   $199($0_1 | 0, $7_1 | 0, $8_1 | 0) | 0;
   HEAP32[($3_1 + 4 | 0) >> 2] = (HEAP32[($3_1 + 4 | 0) >> 2] | 0) + $8_1 | 0;
   $6_1 = $5_1 - $8_1 | 0;
   $0_1 = $0_1 + $8_1 | 0;
  }
  label$4 : {
   if (!$6_1) {
    break label$4
   }
   label$5 : while (1) {
    label$6 : {
     label$7 : {
      if ($121($3_1 | 0) | 0) {
       break label$7
      }
      $8_1 = FUNCTION_TABLE[HEAP32[($3_1 + 32 | 0) >> 2] | 0 | 0]($3_1, $0_1, $6_1) | 0;
      if (($8_1 + 1 | 0) >>> 0 > 1 >>> 0) {
       break label$6
      }
     }
     label$8 : {
      if (!$4_1) {
       break label$8
      }
      $207($3_1 | 0);
     }
     return (($5_1 - $6_1 | 0) >>> 0) / ($1_1 >>> 0) | 0 | 0;
    }
    $0_1 = $0_1 + $8_1 | 0;
    $6_1 = $6_1 - $8_1 | 0;
    if ($6_1) {
     continue label$5
    }
    break label$5;
   };
  }
  $0_1 = $1_1 ? $2_1 : 0;
  label$9 : {
   if (!$4_1) {
    break label$9
   }
   $207($3_1 | 0);
  }
  return $0_1 | 0;
 }
 
 function $123($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $1_1 = 0;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    label$3 : {
     if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) > (-1 | 0)) {
      break label$3
     }
     return $124($0_1 | 0) | 0 | 0;
    }
    $1_1 = $206($0_1 | 0) | 0;
    $2_1 = $124($0_1 | 0) | 0;
    if (!$1_1) {
     break label$1
    }
    $207($0_1 | 0);
    return $2_1 | 0;
   }
   $2_1 = 0;
   label$4 : {
    if (!(HEAP32[(0 + 12328 | 0) >> 2] | 0)) {
     break label$4
    }
    $2_1 = $123(HEAP32[(0 + 12328 | 0) >> 2] | 0 | 0) | 0;
   }
   label$5 : {
    $0_1 = HEAP32[($116() | 0) >> 2] | 0;
    if (!$0_1) {
     break label$5
    }
    label$6 : while (1) {
     $1_1 = 0;
     label$7 : {
      if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
       break label$7
      }
      $1_1 = $206($0_1 | 0) | 0;
     }
     label$8 : {
      if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
       break label$8
      }
      $2_1 = $124($0_1 | 0) | 0 | $2_1 | 0;
     }
     label$9 : {
      if (!$1_1) {
       break label$9
      }
      $207($0_1 | 0);
     }
     $0_1 = HEAP32[($0_1 + 56 | 0) >> 2] | 0;
     if ($0_1) {
      continue label$6
     }
     break label$6;
    };
   }
   $117();
  }
  return $2_1 | 0;
 }
 
 function $124($0_1) {
  $0_1 = $0_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $1_1 = 0, $2_1 = 0;
  label$1 : {
   if ((HEAP32[($0_1 + 20 | 0) >> 2] | 0) >>> 0 <= (HEAP32[($0_1 + 28 | 0) >> 2] | 0) >>> 0) {
    break label$1
   }
   FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
   if (HEAP32[($0_1 + 20 | 0) >> 2] | 0) {
    break label$1
   }
   return -1 | 0;
  }
  label$2 : {
   $1_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
   $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
   if ($1_1 >>> 0 >= $2_1 >>> 0) {
    break label$2
   }
   i64toi32_i32$1 = $1_1 - $2_1 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
   i64toi32_i32$0 = FUNCTION_TABLE[HEAP32[($0_1 + 40 | 0) >> 2] | 0 | 0]($0_1, i64toi32_i32$1, i64toi32_i32$0, 1) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  }
  HEAP32[($0_1 + 28 | 0) >> 2] = 0;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 16 | 0) >> 2] = 0;
  HEAP32[($0_1 + 20 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$0 = $0_1;
  i64toi32_i32$1 = 0;
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = i64toi32_i32$1;
  return 0 | 0;
 }
 
 function $125($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0, $8_1 = 0, $9_1 = 0, $6_1 = 0, $7_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  $4_1 = HEAP32[($0_1 + 28 | 0) >> 2] | 0;
  HEAP32[($3_1 + 16 | 0) >> 2] = $4_1;
  $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $2_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
  $1_1 = $5_1 - $4_1 | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
  $6_1 = $1_1 + $2_1 | 0;
  $7_1 = 2;
  $1_1 = $3_1 + 16 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($182(fimport$2(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
       break label$4
      }
      label$5 : while (1) {
       $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($4_1 | 0)) {
        break label$3
       }
       if (($4_1 | 0) <= (-1 | 0)) {
        break label$2
       }
       $8_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
       $5_1 = $4_1 >>> 0 > $8_1 >>> 0;
       $9_1 = $1_1 + ($5_1 << 3 | 0) | 0;
       $8_1 = $4_1 - ($5_1 ? $8_1 : 0) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) + $8_1 | 0;
       $9_1 = $1_1 + ($5_1 ? 12 : 4) | 0;
       HEAP32[$9_1 >> 2] = (HEAP32[$9_1 >> 2] | 0) - $8_1 | 0;
       $6_1 = $6_1 - $4_1 | 0;
       $1_1 = $5_1 ? $1_1 + 8 | 0 : $1_1;
       $7_1 = $7_1 - $5_1 | 0;
       if (!($182(fimport$2(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, $7_1 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0)) {
        continue label$5
       }
       break label$5;
      };
     }
     if (($6_1 | 0) != (-1 | 0)) {
      break label$2
     }
    }
    $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
    HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
    $4_1 = $2_1;
    break label$1;
   }
   $4_1 = 0;
   HEAP32[($0_1 + 28 | 0) >> 2] = 0;
   HEAP32[($0_1 + 16 | 0) >> 2] = 0;
   HEAP32[($0_1 + 20 | 0) >> 2] = 0;
   HEAP32[$0_1 >> 2] = HEAP32[$0_1 >> 2] | 0 | 32 | 0;
   if (($7_1 | 0) == (2 | 0)) {
    break label$1
   }
   $4_1 = $2_1 - (HEAP32[($1_1 + 4 | 0) >> 2] | 0) | 0;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $126($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  i64toi32_i32$0 = $1$hi;
  $0_1 = $182($214(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $1_1 | 0, i64toi32_i32$0 | 0, $2_1 & 255 | 0 | 0, $3_1 + 8 | 0 | 0) | 0 | 0) | 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 8 | 0) >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 12 | 0) >> 2] | 0;
  $1_1 = i64toi32_i32$0;
  $1$hi = i64toi32_i32$1;
  global$0 = i64toi32_i32$2 + 16 | 0;
  i64toi32_i32$1 = -1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$3 = $0_1 ? -1 : $1_1;
  i64toi32_i32$2 = $0_1 ? i64toi32_i32$1 : i64toi32_i32$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$2;
  return i64toi32_i32$3 | 0;
 }
 
 function $127($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = global$0 - 16 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 12 | 0) >> 2] = $2_1;
  $2_1 = $137($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  global$0 = $3_1 + 16 | 0;
  return $2_1 | 0;
 }
 
 function $128($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0, $6_1 = 0, $7_1 = 0;
  $5_1 = global$0 - 208 | 0;
  global$0 = $5_1;
  HEAP32[($5_1 + 204 | 0) >> 2] = $2_1;
  $2_1 = 0;
  $200($5_1 + 160 | 0 | 0, 0 | 0, 40 | 0) | 0;
  HEAP32[($5_1 + 200 | 0) >> 2] = HEAP32[($5_1 + 204 | 0) >> 2] | 0;
  label$1 : {
   label$2 : {
    if (($129(0 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0 | 0) >= (0 | 0)) {
     break label$2
    }
    $1_1 = -1;
    break label$1;
   }
   label$3 : {
    if ((HEAP32[($0_1 + 76 | 0) >> 2] | 0 | 0) < (0 | 0)) {
     break label$3
    }
    $2_1 = $206($0_1 | 0) | 0;
   }
   $6_1 = HEAP32[$0_1 >> 2] | 0;
   label$4 : {
    if ((HEAP8[($0_1 + 74 | 0) >> 0] | 0 | 0) > (0 | 0)) {
     break label$4
    }
    HEAP32[$0_1 >> 2] = $6_1 & -33 | 0;
   }
   $6_1 = $6_1 & 32 | 0;
   label$5 : {
    label$6 : {
     if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
      break label$6
     }
     $1_1 = $129($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
     break label$5;
    }
    HEAP32[($0_1 + 48 | 0) >> 2] = 80;
    HEAP32[($0_1 + 16 | 0) >> 2] = $5_1 + 80 | 0;
    HEAP32[($0_1 + 28 | 0) >> 2] = $5_1;
    HEAP32[($0_1 + 20 | 0) >> 2] = $5_1;
    $7_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $5_1;
    $1_1 = $129($0_1 | 0, $1_1 | 0, $5_1 + 200 | 0 | 0, $5_1 + 80 | 0 | 0, $5_1 + 160 | 0 | 0, $3_1 | 0, $4_1 | 0) | 0;
    if (!$7_1) {
     break label$5
    }
    FUNCTION_TABLE[HEAP32[($0_1 + 36 | 0) >> 2] | 0 | 0]($0_1, 0, 0) | 0;
    HEAP32[($0_1 + 48 | 0) >> 2] = 0;
    HEAP32[($0_1 + 44 | 0) >> 2] = $7_1;
    HEAP32[($0_1 + 28 | 0) >> 2] = 0;
    HEAP32[($0_1 + 16 | 0) >> 2] = 0;
    $3_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
    HEAP32[($0_1 + 20 | 0) >> 2] = 0;
    $1_1 = $3_1 ? $1_1 : -1;
   }
   $3_1 = HEAP32[$0_1 >> 2] | 0;
   HEAP32[$0_1 >> 2] = $3_1 | $6_1 | 0;
   $1_1 = $3_1 & 32 | 0 ? -1 : $1_1;
   if (!$2_1) {
    break label$1
   }
   $207($0_1 | 0);
  }
  global$0 = $5_1 + 208 | 0;
  return $1_1 | 0;
 }
 
 function $129($0_1, $1_1, $2_1, $3_1, $4_1, $5_1, $6_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  $6_1 = $6_1 | 0;
  var $7_1 = 0, $13_1 = 0, $14_1 = 0, i64toi32_i32$1 = 0, $19_1 = 0, $15_1 = 0, $12_1 = 0, $20_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, $17_1 = 0, $11_1 = 0, $18_1 = 0, $16_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $9_1 = 0, $22_1 = 0, $22$hi = 0, $10_1 = 0, $21_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $8_1 = 0, $274 = 0;
  $7_1 = global$0 - 80 | 0;
  global$0 = $7_1;
  HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
  $8_1 = $7_1 + 55 | 0;
  $9_1 = $7_1 + 56 | 0;
  $10_1 = 0;
  $11_1 = 0;
  $1_1 = 0;
  label$1 : {
   label$2 : while (1) {
    label$3 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$3
     }
     label$4 : {
      if (($1_1 | 0) <= (2147483647 - $11_1 | 0 | 0)) {
       break label$4
      }
      HEAP32[($174() | 0) >> 2] = 61;
      $11_1 = -1;
      break label$3;
     }
     $11_1 = $1_1 + $11_1 | 0;
    }
    $12_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
    $1_1 = $12_1;
    label$5 : {
     label$6 : {
      label$7 : {
       label$8 : {
        label$9 : {
         $13_1 = HEAPU8[$1_1 >> 0] | 0;
         if (!$13_1) {
          break label$9
         }
         label$10 : while (1) {
          label$11 : {
           label$12 : {
            label$13 : {
             $13_1 = $13_1 & 255 | 0;
             if ($13_1) {
              break label$13
             }
             $13_1 = $1_1;
             break label$12;
            }
            if (($13_1 | 0) != (37 | 0)) {
             break label$11
            }
            $13_1 = $1_1;
            label$14 : while (1) {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (37 | 0)) {
              break label$12
             }
             $14_1 = $1_1 + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
             $13_1 = $13_1 + 1 | 0;
             $15_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
             $1_1 = $14_1;
             if (($15_1 | 0) == (37 | 0)) {
              continue label$14
             }
             break label$14;
            };
           }
           $1_1 = $13_1 - $12_1 | 0;
           label$15 : {
            if (!$0_1) {
             break label$15
            }
            $130($0_1 | 0, $12_1 | 0, $1_1 | 0);
           }
           if ($1_1) {
            continue label$2
           }
           $16_1 = -1;
           $13_1 = 1;
           $14_1 = $179(HEAP8[((HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0) >> 0] | 0 | 0) | 0;
           $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           label$16 : {
            if (!$14_1) {
             break label$16
            }
            if ((HEAPU8[($1_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
             break label$16
            }
            $16_1 = (HEAP8[($1_1 + 1 | 0) >> 0] | 0) + -48 | 0;
            $10_1 = 1;
            $13_1 = 3;
           }
           $1_1 = $1_1 + $13_1 | 0;
           HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
           $17_1 = 0;
           label$17 : {
            label$18 : {
             $15_1 = HEAP8[$1_1 >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 <= 31 >>> 0) {
              break label$18
             }
             $13_1 = $1_1;
             break label$17;
            }
            $17_1 = 0;
            $13_1 = $1_1;
            $14_1 = 1 << $14_1 | 0;
            if (!($14_1 & 75913 | 0)) {
             break label$17
            }
            label$19 : while (1) {
             $13_1 = $1_1 + 1 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $13_1;
             $17_1 = $14_1 | $17_1 | 0;
             $15_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
             $14_1 = $15_1 + -32 | 0;
             if ($14_1 >>> 0 >= 32 >>> 0) {
              break label$17
             }
             $1_1 = $13_1;
             $14_1 = 1 << $14_1 | 0;
             if ($14_1 & 75913 | 0) {
              continue label$19
             }
             break label$19;
            };
           }
           label$20 : {
            label$21 : {
             if (($15_1 | 0) != (42 | 0)) {
              break label$21
             }
             label$22 : {
              label$23 : {
               if (!($179(HEAP8[($13_1 + 1 | 0) >> 0] | 0 | 0) | 0)) {
                break label$23
               }
               $13_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
               if ((HEAPU8[($13_1 + 2 | 0) >> 0] | 0 | 0) != (36 | 0)) {
                break label$23
               }
               HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
               $1_1 = $13_1 + 3 | 0;
               $18_1 = HEAP32[((((HEAP8[($13_1 + 1 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
               $10_1 = 1;
               break label$22;
              }
              if ($10_1) {
               break label$8
              }
              $10_1 = 0;
              $18_1 = 0;
              label$24 : {
               if (!$0_1) {
                break label$24
               }
               $1_1 = HEAP32[$2_1 >> 2] | 0;
               HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
               $18_1 = HEAP32[$1_1 >> 2] | 0;
              }
              $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 1 | 0;
             }
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             if (($18_1 | 0) > (-1 | 0)) {
              break label$20
             }
             $18_1 = 0 - $18_1 | 0;
             $17_1 = $17_1 | 8192 | 0;
             break label$20;
            }
            $18_1 = $131($7_1 + 76 | 0 | 0) | 0;
            if (($18_1 | 0) < (0 | 0)) {
             break label$8
            }
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $19_1 = -1;
           label$25 : {
            if ((HEAPU8[$1_1 >> 0] | 0 | 0) != (46 | 0)) {
             break label$25
            }
            label$26 : {
             if ((HEAPU8[($1_1 + 1 | 0) >> 0] | 0 | 0) != (42 | 0)) {
              break label$26
             }
             label$27 : {
              if (!($179(HEAP8[($1_1 + 2 | 0) >> 0] | 0 | 0) | 0)) {
               break label$27
              }
              $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              if ((HEAPU8[($1_1 + 3 | 0) >> 0] | 0 | 0) != (36 | 0)) {
               break label$27
              }
              HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 2 | 0) + $4_1 | 0) + -192 | 0) >> 2] = 10;
              $19_1 = HEAP32[((((HEAP8[($1_1 + 2 | 0) >> 0] | 0) << 3 | 0) + $3_1 | 0) + -384 | 0) >> 2] | 0;
              $1_1 = $1_1 + 4 | 0;
              HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
              break label$25;
             }
             if ($10_1) {
              break label$8
             }
             label$28 : {
              label$29 : {
               if ($0_1) {
                break label$29
               }
               $19_1 = 0;
               break label$28;
              }
              $1_1 = HEAP32[$2_1 >> 2] | 0;
              HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
              $19_1 = HEAP32[$1_1 >> 2] | 0;
             }
             $1_1 = (HEAP32[($7_1 + 76 | 0) >> 2] | 0) + 2 | 0;
             HEAP32[($7_1 + 76 | 0) >> 2] = $1_1;
             break label$25;
            }
            HEAP32[($7_1 + 76 | 0) >> 2] = $1_1 + 1 | 0;
            $19_1 = $131($7_1 + 76 | 0 | 0) | 0;
            $1_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
           }
           $13_1 = 0;
           label$30 : while (1) {
            $14_1 = $13_1;
            $20_1 = -1;
            if (((HEAP8[$1_1 >> 0] | 0) + -65 | 0) >>> 0 > 57 >>> 0) {
             break label$1
            }
            $15_1 = $1_1 + 1 | 0;
            HEAP32[($7_1 + 76 | 0) >> 2] = $15_1;
            $13_1 = HEAP8[$1_1 >> 0] | 0;
            $1_1 = $15_1;
            $13_1 = HEAPU8[(($13_1 + Math_imul($14_1, 58) | 0) + 8191 | 0) >> 0] | 0;
            if (($13_1 + -1 | 0) >>> 0 < 8 >>> 0) {
             continue label$30
            }
            break label$30;
           };
           label$31 : {
            label$32 : {
             label$33 : {
              if (($13_1 | 0) == (19 | 0)) {
               break label$33
              }
              if (!$13_1) {
               break label$1
              }
              label$34 : {
               if (($16_1 | 0) < (0 | 0)) {
                break label$34
               }
               HEAP32[($4_1 + ($16_1 << 2 | 0) | 0) >> 2] = $13_1;
               i64toi32_i32$2 = $3_1 + ($16_1 << 3 | 0) | 0;
               i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
               i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
               $274 = i64toi32_i32$0;
               i64toi32_i32$0 = $7_1;
               HEAP32[($7_1 + 64 | 0) >> 2] = $274;
               HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$1;
               break label$32;
              }
              if (!$0_1) {
               break label$5
              }
              $132($7_1 + 64 | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
              $15_1 = HEAP32[($7_1 + 76 | 0) >> 2] | 0;
              break label$31;
             }
             $20_1 = -1;
             if (($16_1 | 0) > (-1 | 0)) {
              break label$1
             }
            }
            $1_1 = 0;
            if (!$0_1) {
             continue label$2
            }
           }
           $21_1 = $17_1 & -65537 | 0;
           $13_1 = $17_1 & 8192 | 0 ? $21_1 : $17_1;
           $20_1 = 0;
           $16_1 = 8192;
           $17_1 = $9_1;
           label$35 : {
            label$36 : {
             label$37 : {
              label$38 : {
               label$39 : {
                label$40 : {
                 label$41 : {
                  label$42 : {
                   label$43 : {
                    label$44 : {
                     label$45 : {
                      label$46 : {
                       label$47 : {
                        label$48 : {
                         label$49 : {
                          label$50 : {
                           $1_1 = HEAP8[($15_1 + -1 | 0) >> 0] | 0;
                           $1_1 = $14_1 ? (($1_1 & 15 | 0 | 0) == (3 | 0) ? $1_1 & -33 | 0 : $1_1) : $1_1;
                           switch ($1_1 + -88 | 0 | 0) {
                           case 11:
                            break label$35;
                           case 9:
                           case 13:
                           case 14:
                           case 15:
                            break label$36;
                           case 27:
                            break label$41;
                           case 12:
                           case 17:
                            break label$44;
                           case 23:
                            break label$45;
                           case 0:
                           case 32:
                            break label$46;
                           case 24:
                            break label$47;
                           case 22:
                            break label$48;
                           case 29:
                            break label$49;
                           case 1:
                           case 2:
                           case 3:
                           case 4:
                           case 5:
                           case 6:
                           case 7:
                           case 8:
                           case 10:
                           case 16:
                           case 18:
                           case 19:
                           case 20:
                           case 21:
                           case 25:
                           case 26:
                           case 28:
                           case 30:
                           case 31:
                            break label$6;
                           default:
                            break label$50;
                           };
                          }
                          $17_1 = $9_1;
                          label$51 : {
                           switch ($1_1 + -65 | 0 | 0) {
                           case 0:
                           case 4:
                           case 5:
                           case 6:
                            break label$36;
                           case 2:
                            break label$39;
                           case 1:
                           case 3:
                            break label$6;
                           default:
                            break label$51;
                           };
                          }
                          if (($1_1 | 0) == (83 | 0)) {
                           break label$40
                          }
                          break label$7;
                         }
                         $20_1 = 0;
                         $16_1 = 8192;
                         i64toi32_i32$2 = $7_1;
                         i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                         i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                         $22_1 = i64toi32_i32$1;
                         $22$hi = i64toi32_i32$0;
                         break label$43;
                        }
                        $1_1 = 0;
                        label$52 : {
                         switch ($14_1 & 255 | 0 | 0) {
                         case 0:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 1:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 2:
                          i64toi32_i32$1 = $11_1;
                          i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                          i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                          HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                          HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                          continue label$2;
                         case 3:
                          HEAP16[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 1] = $11_1;
                          continue label$2;
                         case 4:
                          HEAP8[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 0] = $11_1;
                          continue label$2;
                         case 6:
                          HEAP32[(HEAP32[($7_1 + 64 | 0) >> 2] | 0) >> 2] = $11_1;
                          continue label$2;
                         case 7:
                          break label$52;
                         default:
                          continue label$2;
                         };
                        }
                        i64toi32_i32$1 = $11_1;
                        i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
                        i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                        HEAP32[i64toi32_i32$1 >> 2] = $11_1;
                        HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
                        continue label$2;
                       }
                       $19_1 = $19_1 >>> 0 > 8 >>> 0 ? $19_1 : 8;
                       $13_1 = $13_1 | 8 | 0;
                       $1_1 = 120;
                      }
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      $12_1 = $133(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0, $1_1 & 32 | 0 | 0) | 0;
                      $20_1 = 0;
                      $16_1 = 8192;
                      i64toi32_i32$2 = $7_1;
                      i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                      i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                      if (!(i64toi32_i32$1 | i64toi32_i32$0 | 0)) {
                       break label$42
                      }
                      if (!($13_1 & 8 | 0)) {
                       break label$42
                      }
                      $16_1 = ($1_1 >>> 4 | 0) + 8192 | 0;
                      $20_1 = 2;
                      break label$42;
                     }
                     $20_1 = 0;
                     $16_1 = 8192;
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$0 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$1 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $12_1 = $134(i64toi32_i32$0 | 0, i64toi32_i32$1 | 0, $9_1 | 0) | 0;
                     if (!($13_1 & 8 | 0)) {
                      break label$42
                     }
                     $1_1 = $9_1 - $12_1 | 0;
                     $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1 + 1 | 0;
                     break label$42;
                    }
                    label$59 : {
                     i64toi32_i32$2 = $7_1;
                     i64toi32_i32$1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                     i64toi32_i32$0 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                     $22_1 = i64toi32_i32$1;
                     $22$hi = i64toi32_i32$0;
                     i64toi32_i32$2 = i64toi32_i32$1;
                     i64toi32_i32$1 = -1;
                     i64toi32_i32$3 = -1;
                     if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
                      $30_1 = 1
                     } else {
                      if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
                       if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
                        $31_1 = 0
                       } else {
                        $31_1 = 1
                       }
                       $32_1 = $31_1;
                      } else {
                       $32_1 = 0
                      }
                      $30_1 = $32_1;
                     }
                     if ($30_1) {
                      break label$59
                     }
                     i64toi32_i32$2 = $22$hi;
                     i64toi32_i32$2 = 0;
                     i64toi32_i32$3 = 0;
                     i64toi32_i32$0 = $22$hi;
                     i64toi32_i32$1 = $22_1;
                     i64toi32_i32$5 = (i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
                     i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
                     $22_1 = i64toi32_i32$3 - i64toi32_i32$1 | 0;
                     $22$hi = i64toi32_i32$5;
                     i64toi32_i32$3 = $7_1;
                     HEAP32[($7_1 + 64 | 0) >> 2] = $22_1;
                     HEAP32[($7_1 + 68 | 0) >> 2] = i64toi32_i32$5;
                     $20_1 = 1;
                     $16_1 = 8192;
                     break label$43;
                    }
                    label$60 : {
                     if (!($13_1 & 2048 | 0)) {
                      break label$60
                     }
                     $20_1 = 1;
                     $16_1 = 8193;
                     break label$43;
                    }
                    $20_1 = $13_1 & 1 | 0;
                    $16_1 = $20_1 ? 8194 : 8192;
                   }
                   i64toi32_i32$5 = $22$hi;
                   $12_1 = $135($22_1 | 0, i64toi32_i32$5 | 0, $9_1 | 0) | 0;
                  }
                  $13_1 = ($19_1 | 0) > (-1 | 0) ? $13_1 & -65537 | 0 : $13_1;
                  label$61 : {
                   i64toi32_i32$2 = $7_1;
                   i64toi32_i32$5 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                   i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
                   $22_1 = i64toi32_i32$5;
                   $22$hi = i64toi32_i32$3;
                   i64toi32_i32$2 = i64toi32_i32$5;
                   i64toi32_i32$5 = 0;
                   i64toi32_i32$1 = 0;
                   if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$5 | 0) | 0) {
                    break label$61
                   }
                   if ($19_1) {
                    break label$61
                   }
                   $19_1 = 0;
                   $12_1 = $9_1;
                   break label$7;
                  }
                  i64toi32_i32$2 = $22$hi;
                  $1_1 = ($9_1 - $12_1 | 0) + !($22_1 | i64toi32_i32$2 | 0) | 0;
                  $19_1 = ($19_1 | 0) > ($1_1 | 0) ? $19_1 : $1_1;
                  break label$7;
                 }
                 $20_1 = 0;
                 $1_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 $12_1 = $1_1 ? $1_1 : 8243;
                 $1_1 = $166($12_1 | 0, 0 | 0, $19_1 | 0) | 0;
                 $17_1 = $1_1 ? $1_1 : $12_1 + $19_1 | 0;
                 $13_1 = $21_1;
                 $19_1 = $1_1 ? $1_1 - $12_1 | 0 : $19_1;
                 break label$6;
                }
                label$62 : {
                 if (!$19_1) {
                  break label$62
                 }
                 $14_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
                 break label$38;
                }
                $1_1 = 0;
                $136($0_1 | 0, 32 | 0, $18_1 | 0, 0 | 0, $13_1 | 0);
                break label$37;
               }
               HEAP32[($7_1 + 12 | 0) >> 2] = 0;
               i64toi32_i32$1 = $7_1;
               i64toi32_i32$2 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
               i64toi32_i32$3 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
               HEAP32[($7_1 + 8 | 0) >> 2] = i64toi32_i32$2;
               HEAP32[($7_1 + 64 | 0) >> 2] = $7_1 + 8 | 0;
               $19_1 = -1;
               $14_1 = $7_1 + 8 | 0;
              }
              $1_1 = 0;
              label$63 : {
               label$64 : while (1) {
                $15_1 = HEAP32[$14_1 >> 2] | 0;
                if (!$15_1) {
                 break label$63
                }
                label$65 : {
                 $15_1 = $175($7_1 + 4 | 0 | 0, $15_1 | 0) | 0;
                 $12_1 = ($15_1 | 0) < (0 | 0);
                 if ($12_1) {
                  break label$65
                 }
                 if ($15_1 >>> 0 > ($19_1 - $1_1 | 0) >>> 0) {
                  break label$65
                 }
                 $14_1 = $14_1 + 4 | 0;
                 $1_1 = $15_1 + $1_1 | 0;
                 if ($19_1 >>> 0 > $1_1 >>> 0) {
                  continue label$64
                 }
                 break label$63;
                }
                break label$64;
               };
               $20_1 = -1;
               if ($12_1) {
                break label$1
               }
              }
              $136($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 | 0);
              label$66 : {
               if ($1_1) {
                break label$66
               }
               $1_1 = 0;
               break label$37;
              }
              $14_1 = 0;
              $15_1 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
              label$67 : while (1) {
               $12_1 = HEAP32[$15_1 >> 2] | 0;
               if (!$12_1) {
                break label$37
               }
               $12_1 = $175($7_1 + 4 | 0 | 0, $12_1 | 0) | 0;
               $14_1 = $12_1 + $14_1 | 0;
               if (($14_1 | 0) > ($1_1 | 0)) {
                break label$37
               }
               $130($0_1 | 0, $7_1 + 4 | 0 | 0, $12_1 | 0);
               $15_1 = $15_1 + 4 | 0;
               if ($14_1 >>> 0 < $1_1 >>> 0) {
                continue label$67
               }
               break label$67;
              };
             }
             $136($0_1 | 0, 32 | 0, $18_1 | 0, $1_1 | 0, $13_1 ^ 8192 | 0 | 0);
             $1_1 = ($18_1 | 0) > ($1_1 | 0) ? $18_1 : $1_1;
             continue label$2;
            }
            $1_1 = FUNCTION_TABLE[$5_1 | 0]($0_1, +HEAPF64[($7_1 + 64 | 0) >> 3], $18_1, $19_1, $13_1, $1_1) | 0;
            continue label$2;
           }
           i64toi32_i32$1 = $7_1;
           i64toi32_i32$3 = HEAP32[($7_1 + 64 | 0) >> 2] | 0;
           i64toi32_i32$2 = HEAP32[($7_1 + 68 | 0) >> 2] | 0;
           HEAP8[($7_1 + 55 | 0) >> 0] = i64toi32_i32$3;
           $19_1 = 1;
           $12_1 = $8_1;
           $17_1 = $9_1;
           $13_1 = $21_1;
           break label$6;
          }
          $14_1 = $1_1 + 1 | 0;
          HEAP32[($7_1 + 76 | 0) >> 2] = $14_1;
          $13_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
          $1_1 = $14_1;
          continue label$10;
         };
        }
        $20_1 = $11_1;
        if ($0_1) {
         break label$1
        }
        if (!$10_1) {
         break label$5
        }
        $1_1 = 1;
        label$68 : {
         label$69 : while (1) {
          $13_1 = HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0;
          if (!$13_1) {
           break label$68
          }
          $132($3_1 + ($1_1 << 3 | 0) | 0 | 0, $13_1 | 0, $2_1 | 0, $6_1 | 0);
          $20_1 = 1;
          $1_1 = $1_1 + 1 | 0;
          if (($1_1 | 0) != (10 | 0)) {
           continue label$69
          }
          break label$1;
         };
        }
        $20_1 = 1;
        if ($1_1 >>> 0 >= 10 >>> 0) {
         break label$1
        }
        label$70 : while (1) {
         if (HEAP32[($4_1 + ($1_1 << 2 | 0) | 0) >> 2] | 0) {
          break label$8
         }
         $20_1 = 1;
         $1_1 = $1_1 + 1 | 0;
         if (($1_1 | 0) == (10 | 0)) {
          break label$1
         }
         continue label$70;
        };
       }
       $20_1 = -1;
       break label$1;
      }
      $17_1 = $9_1;
     }
     $15_1 = $17_1 - $12_1 | 0;
     $17_1 = ($19_1 | 0) < ($15_1 | 0) ? $15_1 : $19_1;
     $14_1 = $20_1 + $17_1 | 0;
     $1_1 = ($18_1 | 0) < ($14_1 | 0) ? $14_1 : $18_1;
     $136($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 | 0);
     $130($0_1 | 0, $16_1 | 0, $20_1 | 0);
     $136($0_1 | 0, 48 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 65536 | 0 | 0);
     $136($0_1 | 0, 48 | 0, $17_1 | 0, $15_1 | 0, 0 | 0);
     $130($0_1 | 0, $12_1 | 0, $15_1 | 0);
     $136($0_1 | 0, 32 | 0, $1_1 | 0, $14_1 | 0, $13_1 ^ 8192 | 0 | 0);
     continue label$2;
    }
    break label$2;
   };
   $20_1 = 0;
  }
  global$0 = $7_1 + 80 | 0;
  return $20_1 | 0;
 }
 
 function $130($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  label$1 : {
   if ((HEAPU8[$0_1 >> 0] | 0) & 32 | 0) {
    break label$1
   }
   $202($1_1 | 0, $2_1 | 0, $0_1 | 0) | 0;
  }
 }
 
 function $131($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = 0;
  label$1 : {
   if (!($179(HEAP8[(HEAP32[$0_1 >> 2] | 0) >> 0] | 0 | 0) | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAP32[$0_1 >> 2] | 0;
    $3_1 = HEAP8[$2_1 >> 0] | 0;
    HEAP32[$0_1 >> 2] = $2_1 + 1 | 0;
    $1_1 = ($3_1 + Math_imul($1_1, 10) | 0) + -48 | 0;
    if ($179(HEAP8[($2_1 + 1 | 0) >> 0] | 0 | 0) | 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $132($0_1, $1_1, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $23_1 = 0, $31_1 = 0, $41_1 = 0, $49_1 = 0, $57_1 = 0, $65_1 = 0, $73_1 = 0;
  label$1 : {
   if ($1_1 >>> 0 > 20 >>> 0) {
    break label$1
   }
   label$2 : {
    switch ($1_1 + -9 | 0 | 0) {
    case 0:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     HEAP32[$0_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     return;
    case 1:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = i64toi32_i32$0 >> 31 | 0;
     $23_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $23_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 2:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$0 = 0;
     $31_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $31_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 3:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     i64toi32_i32$0 = HEAP32[$1_1 >> 2] | 0;
     i64toi32_i32$1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $41_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $41_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 4:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP16[$1_1 >> 1] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $49_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $49_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 5:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU16[$1_1 >> 1] | 0;
     i64toi32_i32$1 = 0;
     $57_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $57_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 6:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$1 = HEAP8[$1_1 >> 0] | 0;
     i64toi32_i32$0 = i64toi32_i32$1 >> 31 | 0;
     $65_1 = i64toi32_i32$1;
     i64toi32_i32$1 = $0_1;
     HEAP32[i64toi32_i32$1 >> 2] = $65_1;
     HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
     return;
    case 7:
     $1_1 = HEAP32[$2_1 >> 2] | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 4 | 0;
     i64toi32_i32$0 = HEAPU8[$1_1 >> 0] | 0;
     i64toi32_i32$1 = 0;
     $73_1 = i64toi32_i32$0;
     i64toi32_i32$0 = $0_1;
     HEAP32[i64toi32_i32$0 >> 2] = $73_1;
     HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
     return;
    case 8:
     $1_1 = ((HEAP32[$2_1 >> 2] | 0) + 7 | 0) & -8 | 0;
     HEAP32[$2_1 >> 2] = $1_1 + 8 | 0;
     HEAPF64[$0_1 >> 3] = +HEAPF64[$1_1 >> 3];
     return;
    case 9:
     break label$2;
    default:
     break label$1;
    };
   }
   FUNCTION_TABLE[$3_1 | 0]($0_1, $2_1);
  }
 }
 
 function $133($0_1, $0$hi, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $10_1 = 0, $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = HEAPU8[(($0_1 & 15 | 0) + 8720 | 0) >> 0] | 0 | $2_1 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 15;
    $3_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $10_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $10_1;
    $0$hi = i64toi32_i32$0;
    if ($3_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $134($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $9_1 = 0, $2_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $0$hi;
   if (!($0_1 | i64toi32_i32$0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$0 = $0$hi;
    HEAP8[$1_1 >> 0] = $0_1 & 7 | 0 | 48 | 0;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 7;
    $2_1 = i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = 3;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $9_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     $9_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $0_1 = $9_1;
    $0$hi = i64toi32_i32$0;
    if ($2_1) {
     continue label$2
    }
    break label$2;
   };
  }
  return $1_1 | 0;
 }
 
 function $135($0_1, $0$hi, $1_1) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $3_1 = 0, i64toi32_i32$3 = 0, $2_1 = 0, i64toi32_i32$5 = 0, $2$hi = 0, $4_1 = 0, $16_1 = 0, $16$hi = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$1 = 1;
    i64toi32_i32$3 = 0;
    if (i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$2 = $0$hi;
    $2_1 = $0_1;
    $2$hi = i64toi32_i32$2;
    break label$1;
   }
   label$3 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_udiv($0_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $2_1 = i64toi32_i32$0;
    $2$hi = i64toi32_i32$2;
    i64toi32_i32$0 = 0;
    i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, 10 | 0, i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
    $16_1 = i64toi32_i32$0;
    $16$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$0 = $16$hi;
    i64toi32_i32$1 = $16_1;
    i64toi32_i32$5 = ($0_1 >>> 0 < i64toi32_i32$1 >>> 0) + i64toi32_i32$0 | 0;
    i64toi32_i32$5 = i64toi32_i32$2 - i64toi32_i32$5 | 0;
    HEAP8[$1_1 >> 0] = $0_1 - i64toi32_i32$1 | 0 | 48 | 0;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$5 = i64toi32_i32$2;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$3 = 9;
    i64toi32_i32$1 = -1;
    $3_1 = $0$hi >>> 0 > i64toi32_i32$3 >>> 0 | (($0$hi | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$2 = $2$hi;
    $0_1 = $2_1;
    $0$hi = i64toi32_i32$2;
    if ($3_1) {
     continue label$3
    }
    break label$3;
   };
  }
  label$4 : {
   i64toi32_i32$2 = $2$hi;
   $3_1 = $2_1;
   if (!$3_1) {
    break label$4
   }
   label$5 : while (1) {
    $1_1 = $1_1 + -1 | 0;
    $4_1 = ($3_1 >>> 0) / (10 >>> 0) | 0;
    HEAP8[$1_1 >> 0] = $3_1 - Math_imul($4_1, 10) | 0 | 48 | 0;
    $5_1 = $3_1 >>> 0 > 9 >>> 0;
    $3_1 = $4_1;
    if ($5_1) {
     continue label$5
    }
    break label$5;
   };
  }
  return $1_1 | 0;
 }
 
 function $136($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $5_1 = 0;
  $5_1 = global$0 - 256 | 0;
  global$0 = $5_1;
  label$1 : {
   if ($4_1 & 73728 | 0) {
    break label$1
   }
   if (($2_1 | 0) <= ($3_1 | 0)) {
    break label$1
   }
   $2_1 = $2_1 - $3_1 | 0;
   $3_1 = $2_1 >>> 0 < 256 >>> 0;
   $200($5_1 | 0, $1_1 & 255 | 0 | 0, ($3_1 ? $2_1 : 256) | 0) | 0;
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : while (1) {
     $130($0_1 | 0, $5_1 | 0, 256 | 0);
     $2_1 = $2_1 + -256 | 0;
     if ($2_1 >>> 0 > 255 >>> 0) {
      continue label$3
     }
     break label$3;
    };
   }
   $130($0_1 | 0, $5_1 | 0, $2_1 | 0);
  }
  global$0 = $5_1 + 256 | 0;
 }
 
 function $137($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  return $128($0_1 | 0, $1_1 | 0, $2_1 | 0, 11 | 0, 12 | 0) | 0 | 0;
 }
 
 function $138($0_1, $1_1, $2_1, $3_1, $4_1, $5_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  $5_1 = $5_1 | 0;
  var $11_1 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $23_1 = 0, $10_1 = 0, i64toi32_i32$1 = 0, $14_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, $21_1 = 0, i64toi32_i32$2 = 0, $22_1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, $16_1 = 0, $12_1 = 0, $26_1 = 0.0, $8_1 = 0, $24_1 = 0, $19_1 = 0, $24$hi = 0, $13_1 = 0, $15_1 = 0, $9_1 = 0, $20_1 = 0, $7_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $25$hi = 0, $48_1 = 0, $25_1 = 0, $162_1 = 0, $164$hi = 0, $166$hi = 0, $168_1 = 0, $168$hi = 0, $170$hi = 0, $174_1 = 0, $174$hi = 0, $372 = 0.0, $817 = 0;
  $6_1 = global$0 - 560 | 0;
  global$0 = $6_1;
  $7_1 = 0;
  HEAP32[($6_1 + 44 | 0) >> 2] = 0;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $140(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$0;
    $24$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$1 | 0) > (i64toi32_i32$0 | 0)) {
     $45_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $46_1 = 0
      } else {
       $46_1 = 1
      }
      $47_1 = $46_1;
     } else {
      $47_1 = 0
     }
     $45_1 = $47_1;
    }
    if ($45_1) {
     break label$2
    }
    $8_1 = 1;
    $9_1 = 8202;
    $1_1 = -$1_1;
    i64toi32_i32$2 = $140(+$1_1) | 0;
    i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
    $24_1 = i64toi32_i32$2;
    $24$hi = i64toi32_i32$1;
    break label$1;
   }
   label$3 : {
    if (!($4_1 & 2048 | 0)) {
     break label$3
    }
    $8_1 = 1;
    $9_1 = 8205;
    break label$1;
   }
   $8_1 = $4_1 & 1 | 0;
   $9_1 = $8_1 ? 8208 : 8203;
   $7_1 = !$8_1;
  }
  label$4 : {
   label$5 : {
    i64toi32_i32$1 = $24$hi;
    i64toi32_i32$3 = $24_1;
    i64toi32_i32$2 = 2146435072;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
    i64toi32_i32$3 = 2146435072;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$2 | 0) != (i64toi32_i32$3 | 0) | 0) {
     break label$5
    }
    $10_1 = $8_1 + 3 | 0;
    $136($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 & -65537 | 0 | 0);
    $130($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $11_1 = $5_1 & 32 | 0;
    $130($0_1 | 0, ($1_1 != $1_1 ? ($11_1 ? 8221 : 8233) : $11_1 ? 8225 : 8237) | 0, 3 | 0);
    $136($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $12_1 = $6_1 + 16 | 0;
   label$6 : {
    label$7 : {
     label$8 : {
      label$9 : {
       $1_1 = +$148(+$1_1, $6_1 + 44 | 0 | 0);
       $1_1 = $1_1 + $1_1;
       if ($1_1 == 0.0) {
        break label$9
       }
       $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
       HEAP32[($6_1 + 44 | 0) >> 2] = $11_1 + -1 | 0;
       $13_1 = $5_1 | 32 | 0;
       if (($13_1 | 0) != (97 | 0)) {
        break label$8
       }
       break label$6;
      }
      $13_1 = $5_1 | 32 | 0;
      if (($13_1 | 0) == (97 | 0)) {
       break label$6
      }
      $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
      $15_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
      break label$7;
     }
     $15_1 = $11_1 + -29 | 0;
     HEAP32[($6_1 + 44 | 0) >> 2] = $15_1;
     $14_1 = ($3_1 | 0) < (0 | 0) ? 6 : $3_1;
     $1_1 = $1_1 * 268435456.0;
    }
    $16_1 = ($15_1 | 0) < (0 | 0) ? $6_1 + 48 | 0 : $6_1 + 336 | 0;
    $17_1 = $16_1;
    label$10 : while (1) {
     label$11 : {
      label$12 : {
       if (!($1_1 < 4294967296.0 & $1_1 >= 0.0 | 0)) {
        break label$12
       }
       $11_1 = ~~$1_1 >>> 0;
       break label$11;
      }
      $11_1 = 0;
     }
     HEAP32[$17_1 >> 2] = $11_1;
     $17_1 = $17_1 + 4 | 0;
     $1_1 = ($1_1 - +($11_1 >>> 0)) * 1.0e9;
     if ($1_1 != 0.0) {
      continue label$10
     }
     break label$10;
    };
    label$13 : {
     label$14 : {
      if (($15_1 | 0) >= (1 | 0)) {
       break label$14
      }
      $3_1 = $15_1;
      $11_1 = $17_1;
      $18_1 = $16_1;
      break label$13;
     }
     $18_1 = $16_1;
     $3_1 = $15_1;
     label$15 : while (1) {
      $3_1 = ($3_1 | 0) < (29 | 0) ? $3_1 : 29;
      label$16 : {
       $11_1 = $17_1 + -4 | 0;
       if ($11_1 >>> 0 < $18_1 >>> 0) {
        break label$16
       }
       i64toi32_i32$1 = 0;
       $25_1 = $3_1;
       $25$hi = i64toi32_i32$1;
       i64toi32_i32$1 = 0;
       $24_1 = 0;
       $24$hi = i64toi32_i32$1;
       label$17 : while (1) {
        $162_1 = $11_1;
        i64toi32_i32$0 = $11_1;
        i64toi32_i32$1 = HEAP32[$11_1 >> 2] | 0;
        i64toi32_i32$2 = 0;
        $164$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $25$hi;
        i64toi32_i32$2 = $164$hi;
        i64toi32_i32$0 = i64toi32_i32$1;
        i64toi32_i32$1 = $25$hi;
        i64toi32_i32$3 = $25_1;
        i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
        }
        $166$hi = i64toi32_i32$1;
        i64toi32_i32$1 = $24$hi;
        i64toi32_i32$2 = $24_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$3 = -1;
        i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
        $168_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
        $168$hi = i64toi32_i32$0;
        i64toi32_i32$0 = $166$hi;
        i64toi32_i32$1 = $48_1;
        i64toi32_i32$2 = $168$hi;
        i64toi32_i32$3 = $168_1;
        i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
        i64toi32_i32$5 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
        if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
         i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
        }
        $24_1 = i64toi32_i32$4;
        $24$hi = i64toi32_i32$5;
        $170$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_udiv(i64toi32_i32$4 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $24_1 = i64toi32_i32$1;
        $24$hi = i64toi32_i32$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$1 = __wasm_i64_mul($24_1 | 0, i64toi32_i32$5 | 0, 1e9 | 0, i64toi32_i32$1 | 0) | 0;
        i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
        $174_1 = i64toi32_i32$1;
        $174$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $170$hi;
        i64toi32_i32$0 = i64toi32_i32$4;
        i64toi32_i32$1 = $174$hi;
        i64toi32_i32$3 = $174_1;
        i64toi32_i32$2 = i64toi32_i32$0 - i64toi32_i32$3 | 0;
        i64toi32_i32$4 = (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        HEAP32[$162_1 >> 2] = i64toi32_i32$2;
        $11_1 = $11_1 + -4 | 0;
        if ($11_1 >>> 0 >= $18_1 >>> 0) {
         continue label$17
        }
        break label$17;
       };
       i64toi32_i32$4 = $24$hi;
       $11_1 = $24_1;
       if (!$11_1) {
        break label$16
       }
       $18_1 = $18_1 + -4 | 0;
       HEAP32[$18_1 >> 2] = $11_1;
      }
      label$18 : {
       label$19 : while (1) {
        $11_1 = $17_1;
        if ($11_1 >>> 0 <= $18_1 >>> 0) {
         break label$18
        }
        $17_1 = $11_1 + -4 | 0;
        if (!(HEAP32[$17_1 >> 2] | 0)) {
         continue label$19
        }
        break label$19;
       };
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) - $3_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $17_1 = $11_1;
      if (($3_1 | 0) > (0 | 0)) {
       continue label$15
      }
      break label$15;
     };
    }
    $17_1 = ($14_1 + 25 | 0 | 0) / (9 | 0) | 0;
    label$20 : {
     if (($3_1 | 0) > (-1 | 0)) {
      break label$20
     }
     $19_1 = $17_1 + 1 | 0;
     $20_1 = ($13_1 | 0) == (102 | 0);
     label$21 : while (1) {
      $17_1 = 0 - $3_1 | 0;
      $10_1 = ($17_1 | 0) < (9 | 0) ? $17_1 : 9;
      label$22 : {
       label$23 : {
        if ($18_1 >>> 0 >= $11_1 >>> 0) {
         break label$23
        }
        $21_1 = 1e9 >>> $10_1 | 0;
        $22_1 = (-1 << $10_1 | 0) ^ -1 | 0;
        $3_1 = 0;
        $17_1 = $18_1;
        label$24 : while (1) {
         $23_1 = HEAP32[$17_1 >> 2] | 0;
         HEAP32[$17_1 >> 2] = ($23_1 >>> $10_1 | 0) + $3_1 | 0;
         $3_1 = Math_imul($23_1 & $22_1 | 0, $21_1);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 < $11_1 >>> 0) {
          continue label$24
         }
         break label$24;
        };
        $17_1 = HEAP32[$18_1 >> 2] | 0;
        if (!$3_1) {
         break label$22
        }
        HEAP32[$11_1 >> 2] = $3_1;
        $11_1 = $11_1 + 4 | 0;
        break label$22;
       }
       $17_1 = HEAP32[$18_1 >> 2] | 0;
      }
      $3_1 = (HEAP32[($6_1 + 44 | 0) >> 2] | 0) + $10_1 | 0;
      HEAP32[($6_1 + 44 | 0) >> 2] = $3_1;
      $18_1 = $18_1 + (!$17_1 << 2 | 0) | 0;
      $17_1 = $20_1 ? $16_1 : $18_1;
      $11_1 = (($11_1 - $17_1 | 0) >> 2 | 0 | 0) > ($19_1 | 0) ? $17_1 + ($19_1 << 2 | 0) | 0 : $11_1;
      if (($3_1 | 0) < (0 | 0)) {
       continue label$21
      }
      break label$21;
     };
    }
    $17_1 = 0;
    label$25 : {
     if ($18_1 >>> 0 >= $11_1 >>> 0) {
      break label$25
     }
     $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
     $3_1 = 10;
     $23_1 = HEAP32[$18_1 >> 2] | 0;
     if ($23_1 >>> 0 < 10 >>> 0) {
      break label$25
     }
     label$26 : while (1) {
      $17_1 = $17_1 + 1 | 0;
      $3_1 = Math_imul($3_1, 10);
      if ($23_1 >>> 0 >= $3_1 >>> 0) {
       continue label$26
      }
      break label$26;
     };
    }
    label$27 : {
     $3_1 = ($14_1 - (($13_1 | 0) == (102 | 0) ? 0 : $17_1) | 0) - (($13_1 | 0) == (103 | 0) & ($14_1 | 0) != (0 | 0) | 0) | 0;
     if (($3_1 | 0) >= (Math_imul(($11_1 - $16_1 | 0) >> 2 | 0, 9) + -9 | 0 | 0)) {
      break label$27
     }
     $23_1 = $3_1 + 9216 | 0;
     $21_1 = ($23_1 | 0) / (9 | 0) | 0;
     $10_1 = (($21_1 << 2 | 0) + (($6_1 + 48 | 0) + (($15_1 | 0) < (0 | 0) ? 4 : 292) | 0) | 0) + -4096 | 0;
     $3_1 = 10;
     label$28 : {
      $23_1 = $23_1 - Math_imul($21_1, 9) | 0;
      if (($23_1 | 0) > (7 | 0)) {
       break label$28
      }
      label$29 : while (1) {
       $3_1 = Math_imul($3_1, 10);
       $23_1 = $23_1 + 1 | 0;
       if (($23_1 | 0) != (8 | 0)) {
        continue label$29
       }
       break label$29;
      };
     }
     $22_1 = $10_1 + 4 | 0;
     label$30 : {
      label$31 : {
       $23_1 = HEAP32[$10_1 >> 2] | 0;
       $19_1 = ($23_1 >>> 0) / ($3_1 >>> 0) | 0;
       $21_1 = $23_1 - Math_imul($19_1, $3_1) | 0;
       if ($21_1) {
        break label$31
       }
       if (($22_1 | 0) == ($11_1 | 0)) {
        break label$30
       }
      }
      $372 = ($22_1 | 0) == ($11_1 | 0) ? 1.0 : 1.5;
      $22_1 = $3_1 >>> 1 | 0;
      $26_1 = $21_1 >>> 0 < $22_1 >>> 0 ? .5 : ($21_1 | 0) == ($22_1 | 0) ? $372 : 1.5;
      $1_1 = $19_1 & 1 | 0 ? 9007199254740994.0 : 9007199254740992.0;
      label$32 : {
       if ($7_1) {
        break label$32
       }
       if ((HEAPU8[$9_1 >> 0] | 0 | 0) != (45 | 0)) {
        break label$32
       }
       $26_1 = -$26_1;
       $1_1 = -$1_1;
      }
      $23_1 = $23_1 - $21_1 | 0;
      HEAP32[$10_1 >> 2] = $23_1;
      if ($1_1 + $26_1 == $1_1) {
       break label$30
      }
      $17_1 = $23_1 + $3_1 | 0;
      HEAP32[$10_1 >> 2] = $17_1;
      label$33 : {
       if ($17_1 >>> 0 < 1e9 >>> 0) {
        break label$33
       }
       label$34 : while (1) {
        HEAP32[$10_1 >> 2] = 0;
        label$35 : {
         $10_1 = $10_1 + -4 | 0;
         if ($10_1 >>> 0 >= $18_1 >>> 0) {
          break label$35
         }
         $18_1 = $18_1 + -4 | 0;
         HEAP32[$18_1 >> 2] = 0;
        }
        $17_1 = (HEAP32[$10_1 >> 2] | 0) + 1 | 0;
        HEAP32[$10_1 >> 2] = $17_1;
        if ($17_1 >>> 0 > 999999999 >>> 0) {
         continue label$34
        }
        break label$34;
       };
      }
      $17_1 = Math_imul(($16_1 - $18_1 | 0) >> 2 | 0, 9);
      $3_1 = 10;
      $23_1 = HEAP32[$18_1 >> 2] | 0;
      if ($23_1 >>> 0 < 10 >>> 0) {
       break label$30
      }
      label$36 : while (1) {
       $17_1 = $17_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if ($23_1 >>> 0 >= $3_1 >>> 0) {
        continue label$36
       }
       break label$36;
      };
     }
     $3_1 = $10_1 + 4 | 0;
     $11_1 = $11_1 >>> 0 > $3_1 >>> 0 ? $3_1 : $11_1;
    }
    label$37 : {
     label$38 : while (1) {
      $23_1 = $11_1;
      $3_1 = $11_1 >>> 0 <= $18_1 >>> 0;
      if ($3_1) {
       break label$37
      }
      $11_1 = $23_1 + -4 | 0;
      if (!(HEAP32[$11_1 >> 2] | 0)) {
       continue label$38
      }
      break label$38;
     };
    }
    label$39 : {
     label$40 : {
      if (($13_1 | 0) == (103 | 0)) {
       break label$40
      }
      $22_1 = $4_1 & 8 | 0;
      break label$39;
     }
     $11_1 = $14_1 ? $14_1 : 1;
     $10_1 = ($11_1 | 0) > ($17_1 | 0) & ($17_1 | 0) > (-5 | 0) | 0;
     $14_1 = ($10_1 ? $17_1 ^ -1 | 0 : -1) + $11_1 | 0;
     $5_1 = ($10_1 ? -1 : -2) + $5_1 | 0;
     $22_1 = $4_1 & 8 | 0;
     if ($22_1) {
      break label$39
     }
     $11_1 = -9;
     label$41 : {
      if ($3_1) {
       break label$41
      }
      $10_1 = HEAP32[($23_1 + -4 | 0) >> 2] | 0;
      if (!$10_1) {
       break label$41
      }
      $3_1 = 10;
      $11_1 = 0;
      if (($10_1 >>> 0) % (10 >>> 0) | 0) {
       break label$41
      }
      label$42 : while (1) {
       $21_1 = $11_1;
       $11_1 = $11_1 + 1 | 0;
       $3_1 = Math_imul($3_1, 10);
       if (!(($10_1 >>> 0) % ($3_1 >>> 0) | 0)) {
        continue label$42
       }
       break label$42;
      };
      $11_1 = $21_1 ^ -1 | 0;
     }
     $3_1 = Math_imul(($23_1 - $16_1 | 0) >> 2 | 0, 9);
     label$43 : {
      if (($5_1 & -33 | 0 | 0) != (70 | 0)) {
       break label$43
      }
      $22_1 = 0;
      $11_1 = ($3_1 + $11_1 | 0) + -9 | 0;
      $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
      $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
      break label$39;
     }
     $22_1 = 0;
     $11_1 = (($17_1 + $3_1 | 0) + $11_1 | 0) + -9 | 0;
     $11_1 = ($11_1 | 0) > (0 | 0) ? $11_1 : 0;
     $14_1 = ($14_1 | 0) < ($11_1 | 0) ? $14_1 : $11_1;
    }
    $19_1 = ($14_1 | $22_1 | 0 | 0) != (0 | 0);
    label$44 : {
     label$45 : {
      $3_1 = $5_1 & -33 | 0;
      if (($3_1 | 0) != (70 | 0)) {
       break label$45
      }
      $11_1 = ($17_1 | 0) > (0 | 0) ? $17_1 : 0;
      break label$44;
     }
     label$46 : {
      $11_1 = $17_1 >> 31 | 0;
      i64toi32_i32$4 = 0;
      $11_1 = $135(($17_1 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$4 | 0, $12_1 | 0) | 0;
      if (($12_1 - $11_1 | 0 | 0) > (1 | 0)) {
       break label$46
      }
      label$47 : while (1) {
       $11_1 = $11_1 + -1 | 0;
       HEAP8[$11_1 >> 0] = 48;
       if (($12_1 - $11_1 | 0 | 0) < (2 | 0)) {
        continue label$47
       }
       break label$47;
      };
     }
     $20_1 = $11_1 + -2 | 0;
     HEAP8[$20_1 >> 0] = $5_1;
     HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
     $11_1 = $12_1 - $20_1 | 0;
    }
    $10_1 = ((($8_1 + $14_1 | 0) + $19_1 | 0) + $11_1 | 0) + 1 | 0;
    $136($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
    $130($0_1 | 0, $9_1 | 0, $8_1 | 0);
    $136($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
    label$48 : {
     label$49 : {
      label$50 : {
       label$51 : {
        if (($3_1 | 0) != (70 | 0)) {
         break label$51
        }
        $21_1 = $6_1 + 16 | 0 | 8 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $18_1 = $18_1 >>> 0 > $16_1 >>> 0 ? $16_1 : $18_1;
        $17_1 = $18_1;
        label$52 : while (1) {
         i64toi32_i32$5 = $17_1;
         i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
         i64toi32_i32$0 = 0;
         $11_1 = $135(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
         label$53 : {
          label$54 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$54
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$53
           }
           label$55 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$55
            }
            break label$53;
           };
          }
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$53
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $21_1;
         }
         $130($0_1 | 0, $11_1 | 0, $3_1 - $11_1 | 0 | 0);
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 <= $16_1 >>> 0) {
          continue label$52
         }
         break label$52;
        };
        $11_1 = 0;
        if (!$19_1) {
         break label$49
        }
        $130($0_1 | 0, 8241 | 0, 1 | 0);
        if ($17_1 >>> 0 >= $23_1 >>> 0) {
         break label$50
        }
        if (($14_1 | 0) < (1 | 0)) {
         break label$50
        }
        label$56 : while (1) {
         label$57 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$0 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$4 = 0;
          $11_1 = $135(i64toi32_i32$0 | 0, i64toi32_i32$4 | 0, $3_1 | 0) | 0;
          if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
           break label$57
          }
          label$58 : while (1) {
           $11_1 = $11_1 + -1 | 0;
           HEAP8[$11_1 >> 0] = 48;
           if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
            continue label$58
           }
           break label$58;
          };
         }
         $130($0_1 | 0, $11_1 | 0, (($14_1 | 0) < (9 | 0) ? $14_1 : 9) | 0);
         $11_1 = $14_1 + -9 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $23_1 >>> 0) {
          break label$49
         }
         $18_1 = ($14_1 | 0) > (9 | 0);
         $14_1 = $11_1;
         if ($18_1) {
          continue label$56
         }
         break label$49;
        };
       }
       label$59 : {
        if (($14_1 | 0) < (0 | 0)) {
         break label$59
        }
        $21_1 = $23_1 >>> 0 > $18_1 >>> 0 ? $23_1 : $18_1 + 4 | 0;
        $3_1 = $6_1 + 16 | 0 | 9 | 0;
        $16_1 = $6_1 + 16 | 0 | 8 | 0;
        $17_1 = $18_1;
        label$60 : while (1) {
         label$61 : {
          i64toi32_i32$5 = $17_1;
          i64toi32_i32$4 = HEAP32[$17_1 >> 2] | 0;
          i64toi32_i32$0 = 0;
          $11_1 = $135(i64toi32_i32$4 | 0, i64toi32_i32$0 | 0, $3_1 | 0) | 0;
          if (($11_1 | 0) != ($3_1 | 0)) {
           break label$61
          }
          HEAP8[($6_1 + 24 | 0) >> 0] = 48;
          $11_1 = $16_1;
         }
         label$62 : {
          label$63 : {
           if (($17_1 | 0) == ($18_1 | 0)) {
            break label$63
           }
           if ($11_1 >>> 0 <= ($6_1 + 16 | 0) >>> 0) {
            break label$62
           }
           label$64 : while (1) {
            $11_1 = $11_1 + -1 | 0;
            HEAP8[$11_1 >> 0] = 48;
            if ($11_1 >>> 0 > ($6_1 + 16 | 0) >>> 0) {
             continue label$64
            }
            break label$62;
           };
          }
          $130($0_1 | 0, $11_1 | 0, 1 | 0);
          $11_1 = $11_1 + 1 | 0;
          label$65 : {
           if (($14_1 | 0) > (0 | 0)) {
            break label$65
           }
           if (!$22_1) {
            break label$62
           }
          }
          $130($0_1 | 0, 8241 | 0, 1 | 0);
         }
         $23_1 = $3_1 - $11_1 | 0;
         $130($0_1 | 0, $11_1 | 0, (($14_1 | 0) > ($23_1 | 0) ? $23_1 : $14_1) | 0);
         $14_1 = $14_1 - $23_1 | 0;
         $17_1 = $17_1 + 4 | 0;
         if ($17_1 >>> 0 >= $21_1 >>> 0) {
          break label$59
         }
         if (($14_1 | 0) > (-1 | 0)) {
          continue label$60
         }
         break label$60;
        };
       }
       $136($0_1 | 0, 48 | 0, $14_1 + 18 | 0 | 0, 18 | 0, 0 | 0);
       $130($0_1 | 0, $20_1 | 0, $12_1 - $20_1 | 0 | 0);
       break label$48;
      }
      $11_1 = $14_1;
     }
     $136($0_1 | 0, 48 | 0, $11_1 + 9 | 0 | 0, 9 | 0, 0 | 0);
    }
    $136($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
    break label$4;
   }
   $14_1 = $9_1 + ((($5_1 << 26 | 0) >> 31 | 0) & 9 | 0) | 0;
   label$66 : {
    if ($3_1 >>> 0 > 11 >>> 0) {
     break label$66
    }
    $11_1 = 12 - $3_1 | 0;
    if (!$11_1) {
     break label$66
    }
    $26_1 = 8.0;
    label$67 : while (1) {
     $26_1 = $26_1 * 16.0;
     $11_1 = $11_1 + -1 | 0;
     if ($11_1) {
      continue label$67
     }
     break label$67;
    };
    label$68 : {
     if ((HEAPU8[$14_1 >> 0] | 0 | 0) != (45 | 0)) {
      break label$68
     }
     $1_1 = -($26_1 + (-$1_1 - $26_1));
     break label$66;
    }
    $1_1 = $1_1 + $26_1 - $26_1;
   }
   label$69 : {
    $11_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
    $817 = $11_1;
    $11_1 = $11_1 >> 31 | 0;
    i64toi32_i32$0 = 0;
    $11_1 = $135(($817 + $11_1 | 0) ^ $11_1 | 0 | 0, i64toi32_i32$0 | 0, $12_1 | 0) | 0;
    if (($11_1 | 0) != ($12_1 | 0)) {
     break label$69
    }
    HEAP8[($6_1 + 15 | 0) >> 0] = 48;
    $11_1 = $6_1 + 15 | 0;
   }
   $22_1 = $8_1 | 2 | 0;
   $18_1 = $5_1 & 32 | 0;
   $17_1 = HEAP32[($6_1 + 44 | 0) >> 2] | 0;
   $21_1 = $11_1 + -2 | 0;
   HEAP8[$21_1 >> 0] = $5_1 + 15 | 0;
   HEAP8[($11_1 + -1 | 0) >> 0] = ($17_1 | 0) < (0 | 0) ? 45 : 43;
   $23_1 = $4_1 & 8 | 0;
   $17_1 = $6_1 + 16 | 0;
   label$70 : while (1) {
    $11_1 = $17_1;
    label$71 : {
     label$72 : {
      if (!(Math_abs($1_1) < 2147483648.0)) {
       break label$72
      }
      $17_1 = ~~$1_1;
      break label$71;
     }
     $17_1 = -2147483648;
    }
    HEAP8[$11_1 >> 0] = HEAPU8[($17_1 + 8720 | 0) >> 0] | 0 | $18_1 | 0;
    $1_1 = ($1_1 - +($17_1 | 0)) * 16.0;
    label$73 : {
     $17_1 = $11_1 + 1 | 0;
     if (($17_1 - ($6_1 + 16 | 0) | 0 | 0) != (1 | 0)) {
      break label$73
     }
     label$74 : {
      if ($1_1 != 0.0) {
       break label$74
      }
      if (($3_1 | 0) > (0 | 0)) {
       break label$74
      }
      if (!$23_1) {
       break label$73
      }
     }
     HEAP8[($11_1 + 1 | 0) >> 0] = 46;
     $17_1 = $11_1 + 2 | 0;
    }
    if ($1_1 != 0.0) {
     continue label$70
    }
    break label$70;
   };
   label$75 : {
    label$76 : {
     if (!$3_1) {
      break label$76
     }
     if ((($17_1 - ($6_1 + 16 | 0) | 0) + -2 | 0 | 0) >= ($3_1 | 0)) {
      break label$76
     }
     $11_1 = (($3_1 + $12_1 | 0) - $21_1 | 0) + 2 | 0;
     break label$75;
    }
    $11_1 = ($12_1 - (($6_1 + 16 | 0) + $21_1 | 0) | 0) + $17_1 | 0;
   }
   $10_1 = $11_1 + $22_1 | 0;
   $136($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 | 0);
   $130($0_1 | 0, $14_1 | 0, $22_1 | 0);
   $136($0_1 | 0, 48 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 65536 | 0 | 0);
   $17_1 = $17_1 - ($6_1 + 16 | 0) | 0;
   $130($0_1 | 0, $6_1 + 16 | 0 | 0, $17_1 | 0);
   $18_1 = $12_1 - $21_1 | 0;
   $136($0_1 | 0, 48 | 0, $11_1 - ($17_1 + $18_1 | 0) | 0 | 0, 0 | 0, 0 | 0);
   $130($0_1 | 0, $21_1 | 0, $18_1 | 0);
   $136($0_1 | 0, 32 | 0, $2_1 | 0, $10_1 | 0, $4_1 ^ 8192 | 0 | 0);
  }
  global$0 = $6_1 + 560 | 0;
  return (($10_1 | 0) < ($2_1 | 0) ? $2_1 : $10_1) | 0;
 }
 
 function $139($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $2_1 = 0, $12_1 = 0, $12$hi = 0, $15_1 = 0, $15$hi = 0;
  $2_1 = ((HEAP32[$1_1 >> 2] | 0) + 7 | 0) & -8 | 0;
  HEAP32[$1_1 >> 2] = $2_1 + 16 | 0;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$0 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $12_1 = i64toi32_i32$0;
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$2 = i64toi32_i32$2 + 8 | 0;
  i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
  i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
  $15_1 = i64toi32_i32$1;
  $15$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $12$hi;
  i64toi32_i32$1 = $15$hi;
  HEAPF64[$0_1 >> 3] = +$187($12_1 | 0, i64toi32_i32$0 | 0, $15_1 | 0, i64toi32_i32$1 | 0);
 }
 
 function $140($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  wasm2js_scratch_store_f64(+$0_1);
  i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
  i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function $141($0_1) {
  $0_1 = $0_1 | 0;
  return $0_1 | 0;
 }
 
 function $142($0_1) {
  $0_1 = $0_1 | 0;
  return fimport$1($141(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0) | 0 | 0) | 0 | 0;
 }
 
 function $143($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0, $6_1 = 0;
  $3_1 = global$0 - 32 | 0;
  global$0 = $3_1;
  HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
  $4_1 = HEAP32[($0_1 + 48 | 0) >> 2] | 0;
  HEAP32[($3_1 + 20 | 0) >> 2] = $2_1 - (($4_1 | 0) != (0 | 0)) | 0;
  $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($3_1 + 28 | 0) >> 2] = $4_1;
  HEAP32[($3_1 + 24 | 0) >> 2] = $5_1;
  $4_1 = -1;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($182(fimport$5(HEAP32[($0_1 + 60 | 0) >> 2] | 0 | 0, $3_1 + 16 | 0 | 0, 2 | 0, $3_1 + 12 | 0 | 0) | 0 | 0) | 0) {
      break label$3
     }
     $4_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
     if (($4_1 | 0) > (0 | 0)) {
      break label$2
     }
    }
    HEAP32[$0_1 >> 2] = ($4_1 & 48 | 0) ^ 16 | 0 | (HEAP32[$0_1 >> 2] | 0) | 0;
    break label$1;
   }
   $6_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
   if ($4_1 >>> 0 <= $6_1 >>> 0) {
    break label$1
   }
   $5_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
   HEAP32[($0_1 + 4 | 0) >> 2] = $5_1;
   HEAP32[($0_1 + 8 | 0) >> 2] = $5_1 + ($4_1 - $6_1 | 0) | 0;
   label$4 : {
    if (!(HEAP32[($0_1 + 48 | 0) >> 2] | 0)) {
     break label$4
    }
    HEAP32[($0_1 + 4 | 0) >> 2] = $5_1 + 1 | 0;
    HEAP8[(($2_1 + $1_1 | 0) + -1 | 0) >> 0] = HEAPU8[$5_1 >> 0] | 0;
   }
   $4_1 = $2_1;
  }
  global$0 = $3_1 + 32 | 0;
  return $4_1 | 0;
 }
 
 function $144($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = $116() | 0;
  HEAP32[($0_1 + 56 | 0) >> 2] = HEAP32[$1_1 >> 2] | 0;
  label$1 : {
   $2_1 = HEAP32[$1_1 >> 2] | 0;
   if (!$2_1) {
    break label$1
   }
   HEAP32[($2_1 + 52 | 0) >> 2] = $0_1;
  }
  HEAP32[$1_1 >> 2] = $0_1;
  $117();
  return $0_1 | 0;
 }
 
 function $145($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      if ($165(8229 | 0, HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
       break label$4
      }
      HEAP32[($174() | 0) >> 2] = 28;
      break label$3;
     }
     $3_1 = $194(1176 | 0) | 0;
     if ($3_1) {
      break label$2
     }
    }
    $3_1 = 0;
    break label$1;
   }
   $200($3_1 | 0, 0 | 0, 144 | 0) | 0;
   label$5 : {
    if ($165($1_1 | 0, 43 | 0) | 0) {
     break label$5
    }
    HEAP32[$3_1 >> 2] = (HEAPU8[$1_1 >> 0] | 0 | 0) == (114 | 0) ? 8 : 4;
   }
   label$6 : {
    label$7 : {
     if ((HEAPU8[$1_1 >> 0] | 0 | 0) == (97 | 0)) {
      break label$7
     }
     $1_1 = HEAP32[$3_1 >> 2] | 0;
     break label$6;
    }
    label$8 : {
     $1_1 = fimport$3($0_1 | 0, 3 | 0, 0 | 0) | 0;
     if ($1_1 & 1024 | 0) {
      break label$8
     }
     HEAP32[($2_1 + 16 | 0) >> 2] = $1_1 | 1024 | 0;
     fimport$3($0_1 | 0, 4 | 0, $2_1 + 16 | 0 | 0) | 0;
    }
    $1_1 = HEAP32[$3_1 >> 2] | 0 | 128 | 0;
    HEAP32[$3_1 >> 2] = $1_1;
   }
   HEAP8[($3_1 + 75 | 0) >> 0] = 255;
   HEAP32[($3_1 + 48 | 0) >> 2] = 1024;
   HEAP32[($3_1 + 60 | 0) >> 2] = $0_1;
   HEAP32[($3_1 + 44 | 0) >> 2] = $3_1 + 152 | 0;
   label$9 : {
    if ($1_1 & 8 | 0) {
     break label$9
    }
    HEAP32[$2_1 >> 2] = $2_1 + 24 | 0;
    if (fimport$4($0_1 | 0, 21523 | 0, $2_1 | 0) | 0) {
     break label$9
    }
    HEAP8[($3_1 + 75 | 0) >> 0] = 10;
   }
   HEAP32[($3_1 + 40 | 0) >> 2] = 10;
   HEAP32[($3_1 + 36 | 0) >> 2] = 9;
   HEAP32[($3_1 + 32 | 0) >> 2] = 13;
   HEAP32[($3_1 + 12 | 0) >> 2] = 8;
   label$10 : {
    if (HEAP32[(14220 + 4 | 0) >> 2] | 0) {
     break label$10
    }
    HEAP32[($3_1 + 76 | 0) >> 2] = -1;
   }
   $3_1 = $144($3_1 | 0) | 0;
  }
  global$0 = $2_1 + 32 | 0;
  return $3_1 | 0;
 }
 
 function $146($0_1) {
  $0_1 = +$0_1;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3_1 = 0.0, $1_1 = 0, $1$hi = 0, $14_1 = 0, $2_1 = 0, $15_1 = 0, $17_1 = 0, $19_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $16_1 = 0.0, $18_1 = 0.0, $42_1 = 0.0, $44_1 = 0.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $1_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $14_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $14_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $14_1 & 2047 | 0;
   if ($2_1 >>> 0 > 1074 >>> 0) {
    break label$1
   }
   label$2 : {
    if ($2_1 >>> 0 > 1021 >>> 0) {
     break label$2
    }
    return +($0_1 * 0.0);
   }
   label$3 : {
    label$4 : {
     $16_1 = $0_1;
     $18_1 = -$0_1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$3 = -1;
     if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
      $15_1 = 1
     } else {
      if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
        $17_1 = 0
       } else {
        $17_1 = 1
       }
       $19_1 = $17_1;
      } else {
       $19_1 = 0
      }
      $15_1 = $19_1;
     }
     $0_1 = $15_1 ? $16_1 : $18_1;
     $3_1 = $0_1 + 4503599627370496.0 + -4503599627370496.0 - $0_1;
     if (!($3_1 > .5)) {
      break label$4
     }
     $0_1 = $0_1 + $3_1 + -1.0;
     break label$3;
    }
    $0_1 = $0_1 + $3_1;
    if (!($3_1 <= -.5)) {
     break label$3
    }
    $0_1 = $0_1 + 1.0;
   }
   $42_1 = $0_1;
   $44_1 = -$0_1;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$3 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$2 = -1;
   if ((i64toi32_i32$0 | 0) > (i64toi32_i32$1 | 0)) {
    $20_1 = 1
   } else {
    if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$2 >>> 0) {
      $21_1 = 0
     } else {
      $21_1 = 1
     }
     $22_1 = $21_1;
    } else {
     $22_1 = 0
    }
    $20_1 = $22_1;
   }
   $0_1 = $20_1 ? $42_1 : $44_1;
  }
  return +$0_1;
 }
 
 function $147($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0.0, $10_1 = 0, $11_1 = 0, $12_1 = 0, $4_1 = 0.0, $7_1 = 0, $7$hi = 0, $9_1 = 0, $5_1 = 0.0, $14_1 = 0, $3_1 = 0.0, $15_1 = 0, $16_1 = 0, $8_1 = 0, $6_1 = 0.0, $8$hi = 0, $13_1 = 0, $51_1 = 0, $52_1 = 0, $53_1 = 0, $54_1 = 0, $55_1 = 0, $17_1 = 0, $56_1 = 0, $57_1 = 0, $58_1 = 0, $59_1 = 0, $60_1 = 0, $61_1 = 0, $62_1 = 0, $63_1 = 0, $64_1 = 0, $65_1 = 0, $66_1 = 0, $67_1 = 0, $68_1 = 0, $69_1 = 0, $70_1 = 0, $71_1 = 0, $72_1 = 0, $73_1 = 0, $74_1 = 0, $75_1 = 0, $76_1 = 0, $77_1 = 0, $78_1 = 0, $79_1 = 0, $80_1 = 0, $81_1 = 0, $82_1 = 0, $83_1 = 0, $84_1 = 0, $85_1 = 0, $86_1 = 0, $87_1 = 0, $88_1 = 0, $89_1 = 0, $90_1 = 0, $91_1 = 0, $92_1 = 0, $107_1 = 0.0, $112_1 = 0.0, $142_1 = 0.0, $143_1 = 0.0, $190_1 = 0.0, $193_1 = 0.0, $273 = 0.0, $277 = 0.0, $280$hi = 0, $283 = 0, $283$hi = 0, $289 = 0.0, $293 = 0.0, $323 = 0.0, $333 = 0.0, $392 = 0.0, $402 = 0.0, $503 = 0, $504 = 0, $508 = 0.0, $509 = 0.0, $523 = 0, $566 = 0.0, $593$hi = 0, $595 = 0, $595$hi = 0;
  $2_1 = 1.0;
  label$1 : {
   wasm2js_scratch_store_f64(+$1_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $7$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $51_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $51_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $9_1 = $51_1;
   $10_1 = $9_1 & 2147483647 | 0;
   i64toi32_i32$1 = $7$hi;
   $11_1 = $7_1;
   if (!($10_1 | $11_1 | 0)) {
    break label$1
   }
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $8_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $8$hi = i64toi32_i32$1;
   $12_1 = $8_1;
   label$2 : {
    i64toi32_i32$0 = $12_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $52_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $52_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $13_1 = $52_1;
    if (($13_1 | 0) != (1072693248 | 0)) {
     break label$2
    }
    if (!$12_1) {
     break label$1
    }
   }
   label$3 : {
    label$4 : {
     $14_1 = $13_1 & 2147483647 | 0;
     if ($14_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (($14_1 | 0) == (2146435072 | 0) & ($12_1 | 0) != (0 | 0) | 0) {
      break label$4
     }
     if ($10_1 >>> 0 > 2146435072 >>> 0) {
      break label$4
     }
     if (($10_1 | 0) != (2146435072 | 0)) {
      break label$3
     }
     if (!$11_1) {
      break label$3
     }
    }
    return +($0_1 + $1_1);
   }
   label$5 : {
    label$6 : {
     label$7 : {
      label$8 : {
       i64toi32_i32$2 = $8$hi;
       i64toi32_i32$1 = $8_1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$3 = -1;
       if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
        $53_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
          $54_1 = 0
         } else {
          $54_1 = 1
         }
         $55_1 = $54_1;
        } else {
         $55_1 = 0
        }
        $53_1 = $55_1;
       }
       if ($53_1) {
        break label$8
       }
       $15_1 = 2;
       if ($10_1 >>> 0 > 1128267775 >>> 0) {
        break label$7
       }
       if ($10_1 >>> 0 < 1072693248 >>> 0) {
        break label$8
       }
       $16_1 = $10_1 >>> 20 | 0;
       label$9 : {
        if ($10_1 >>> 0 < 1094713344 >>> 0) {
         break label$9
        }
        $15_1 = 0;
        $16_1 = 1075 - $16_1 | 0;
        $17_1 = $11_1 >>> $16_1 | 0;
        if (($17_1 << $16_1 | 0 | 0) != ($11_1 | 0)) {
         break label$7
        }
        $15_1 = 2 - ($17_1 & 1 | 0) | 0;
        break label$7;
       }
       $15_1 = 0;
       if ($11_1) {
        break label$5
       }
       $15_1 = 0;
       $11_1 = 1043 - $16_1 | 0;
       $16_1 = $10_1 >>> $11_1 | 0;
       if (($16_1 << $11_1 | 0 | 0) != ($10_1 | 0)) {
        break label$6
       }
       $15_1 = 2 - ($16_1 & 1 | 0) | 0;
       break label$6;
      }
      $15_1 = 0;
     }
     if ($11_1) {
      break label$5
     }
    }
    label$10 : {
     if (($10_1 | 0) != (2146435072 | 0)) {
      break label$10
     }
     if (!($14_1 + -1072693248 | 0 | $12_1 | 0)) {
      break label$1
     }
     label$11 : {
      if ($14_1 >>> 0 < 1072693248 >>> 0) {
       break label$11
      }
      $107_1 = $1_1;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = -1;
      i64toi32_i32$0 = -1;
      if ((i64toi32_i32$1 | 0) > (i64toi32_i32$2 | 0)) {
       $56_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) >= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 <= i64toi32_i32$0 >>> 0) {
         $57_1 = 0
        } else {
         $57_1 = 1
        }
        $58_1 = $57_1;
       } else {
        $58_1 = 0
       }
       $56_1 = $58_1;
      }
      return +($56_1 ? $107_1 : 0.0);
     }
     $112_1 = -$1_1;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = -1;
     if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
      $59_1 = 1
     } else {
      if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
       if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
        $60_1 = 0
       } else {
        $60_1 = 1
       }
       $61_1 = $60_1;
      } else {
       $61_1 = 0
      }
      $59_1 = $61_1;
     }
     return +($59_1 ? 0.0 : $112_1);
    }
    label$12 : {
     if (($10_1 | 0) != (1072693248 | 0)) {
      break label$12
     }
     label$13 : {
      i64toi32_i32$0 = $7$hi;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$3 = -1;
      i64toi32_i32$1 = -1;
      if ((i64toi32_i32$0 | 0) < (i64toi32_i32$3 | 0)) {
       $62_1 = 1
      } else {
       if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$3 | 0)) {
        if (i64toi32_i32$2 >>> 0 > i64toi32_i32$1 >>> 0) {
         $63_1 = 0
        } else {
         $63_1 = 1
        }
        $64_1 = $63_1;
       } else {
        $64_1 = 0
       }
       $62_1 = $64_1;
      }
      if ($62_1) {
       break label$13
      }
      return +$0_1;
     }
     return +(1.0 / $0_1);
    }
    label$14 : {
     if (($9_1 | 0) != (1073741824 | 0)) {
      break label$14
     }
     return +($0_1 * $0_1);
    }
    if (($9_1 | 0) != (1071644672 | 0)) {
     break label$5
    }
    i64toi32_i32$2 = $8$hi;
    i64toi32_i32$1 = $8_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
     $65_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
       $66_1 = 0
      } else {
       $66_1 = 1
      }
      $67_1 = $66_1;
     } else {
      $67_1 = 0
     }
     $65_1 = $67_1;
    }
    if ($65_1) {
     break label$5
    }
    return +(+$154(+$0_1));
   }
   $2_1 = +$156(+$0_1);
   label$15 : {
    if ($12_1) {
     break label$15
    }
    label$16 : {
     if (($13_1 & 1073741823 | 0 | 0) == (1072693248 | 0)) {
      break label$16
     }
     if ($14_1) {
      break label$15
     }
    }
    $142_1 = 1.0 / $2_1;
    $143_1 = $2_1;
    i64toi32_i32$1 = $7$hi;
    i64toi32_i32$3 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
     $68_1 = 1
    } else {
     if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
      if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
       $69_1 = 0
      } else {
       $69_1 = 1
      }
      $70_1 = $69_1;
     } else {
      $70_1 = 0
     }
     $68_1 = $70_1;
    }
    $2_1 = $68_1 ? $142_1 : $143_1;
    i64toi32_i32$3 = $8$hi;
    i64toi32_i32$0 = $8_1;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = -1;
    if ((i64toi32_i32$3 | 0) > (i64toi32_i32$1 | 0)) {
     $71_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) >= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$2 >>> 0) {
       $72_1 = 0
      } else {
       $72_1 = 1
      }
      $73_1 = $72_1;
     } else {
      $73_1 = 0
     }
     $71_1 = $73_1;
    }
    if ($71_1) {
     break label$1
    }
    label$17 : {
     if ($15_1 | ($14_1 + -1072693248 | 0) | 0) {
      break label$17
     }
     $1_1 = $2_1 - $2_1;
     return +($1_1 / $1_1);
    }
    return +(($15_1 | 0) == (1 | 0) ? -$2_1 : $2_1);
   }
   $3_1 = 1.0;
   label$18 : {
    i64toi32_i32$0 = $8$hi;
    i64toi32_i32$2 = $8_1;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$0 | 0) > (i64toi32_i32$3 | 0)) {
     $74_1 = 1
    } else {
     if ((i64toi32_i32$0 | 0) >= (i64toi32_i32$3 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $75_1 = 0
      } else {
       $75_1 = 1
      }
      $76_1 = $75_1;
     } else {
      $76_1 = 0
     }
     $74_1 = $76_1;
    }
    if ($74_1) {
     break label$18
    }
    label$19 : {
     switch ($15_1 | 0) {
     case 0:
      $1_1 = $0_1 - $0_1;
      return +($1_1 / $1_1);
     case 1:
      break label$19;
     default:
      break label$18;
     };
    }
    $3_1 = -1.0;
   }
   label$21 : {
    label$22 : {
     if ($10_1 >>> 0 < 1105199105 >>> 0) {
      break label$22
     }
     label$23 : {
      if ($10_1 >>> 0 < 1139802113 >>> 0) {
       break label$23
      }
      label$24 : {
       if ($14_1 >>> 0 > 1072693247 >>> 0) {
        break label$24
       }
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$0 = 0;
       i64toi32_i32$3 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$0 | 0)) {
        $77_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$0 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0) {
          $78_1 = 0
         } else {
          $78_1 = 1
         }
         $79_1 = $78_1;
        } else {
         $79_1 = 0
        }
        $77_1 = $79_1;
       }
       return +($77_1 ? infinity : 0.0);
      }
      return +(($9_1 | 0) > (0 | 0) ? infinity : 0.0);
     }
     label$25 : {
      if ($14_1 >>> 0 > 1072693246 >>> 0) {
       break label$25
      }
      $190_1 = $3_1 * 1.e+300 * 1.e+300;
      $193_1 = $3_1 * 1.0e-300 * 1.0e-300;
      i64toi32_i32$1 = $7$hi;
      i64toi32_i32$3 = $7_1;
      i64toi32_i32$2 = 0;
      i64toi32_i32$0 = 0;
      if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
       $80_1 = 1
      } else {
       if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
        if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$0 >>> 0) {
         $81_1 = 0
        } else {
         $81_1 = 1
        }
        $82_1 = $81_1;
       } else {
        $82_1 = 0
       }
       $80_1 = $82_1;
      }
      return +($80_1 ? $190_1 : $193_1);
     }
     label$26 : {
      if ($14_1 >>> 0 < 1072693249 >>> 0) {
       break label$26
      }
      return +(($9_1 | 0) > (0 | 0) ? $3_1 * 1.e+300 * 1.e+300 : $3_1 * 1.0e-300 * 1.0e-300);
     }
     $0_1 = $2_1 + -1.0;
     $2_1 = $0_1 * 1.9259629911266175e-08 + $0_1 * $0_1 * (.5 - $0_1 * ($0_1 * -.25 + .3333333333333333)) * -1.4426950408889634;
     $4_1 = $0_1 * 1.4426950216293335;
     wasm2js_scratch_store_f64(+($2_1 + $4_1));
     i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
     i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
     i64toi32_i32$1 = -1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $4_1 = $2_1 - ($0_1 - $4_1);
     break label$21;
    }
    $0_1 = $2_1 * 9007199254740992.0;
    $10_1 = $14_1 >>> 0 < 1048576 >>> 0;
    $2_1 = $10_1 ? $0_1 : $2_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $83_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $83_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
    }
    $9_1 = $10_1 ? $83_1 : $14_1;
    $11_1 = $9_1 & 1048575 | 0;
    $12_1 = $11_1 | 1072693248 | 0;
    $9_1 = ($10_1 ? -1076 : -1023) + ($9_1 >> 20 | 0) | 0;
    $10_1 = 0;
    label$27 : {
     if ($11_1 >>> 0 < 235663 >>> 0) {
      break label$27
     }
     label$28 : {
      if ($11_1 >>> 0 >= 767610 >>> 0) {
       break label$28
      }
      $10_1 = 1;
      break label$27;
     }
     $12_1 = $11_1 | 1071644672 | 0;
     $9_1 = $9_1 + 1 | 0;
    }
    $11_1 = $10_1 << 3 | 0;
    $273 = +HEAPF64[($11_1 + 8752 | 0) >> 3];
    $0_1 = +HEAPF64[($11_1 + 8736 | 0) >> 3];
    $277 = $0_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = $12_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $84_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $84_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    $280$hi = i64toi32_i32$3;
    wasm2js_scratch_store_f64(+$2_1);
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = -1;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    $283 = i64toi32_i32$0 & i64toi32_i32$2 | 0;
    $283$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $280$hi;
    i64toi32_i32$3 = $84_1;
    i64toi32_i32$0 = $283$hi;
    i64toi32_i32$2 = $283;
    i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $5_1 = +wasm2js_scratch_load_f64();
    $2_1 = 1.0 / ($277 + $5_1);
    $289 = $2_1;
    $4_1 = $5_1 - $0_1;
    $293 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$1 = (($10_1 << 18 | 0) + ($12_1 >>> 1 | 0) | 0) + 537395200 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = 32;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
     $85_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $85_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $85_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $6_1 = +wasm2js_scratch_load_f64();
    $4_1 = $4_1 * $2_1;
    wasm2js_scratch_store_f64(+$4_1);
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $2_1 = +wasm2js_scratch_load_f64();
    $0_1 = $289 * ($293 - $6_1 * $2_1 - ($5_1 - ($6_1 - $0_1)) * $2_1);
    $323 = $0_1;
    $5_1 = $2_1 * $2_1;
    $333 = $0_1 * ($4_1 + $2_1);
    $0_1 = $4_1 * $4_1;
    $6_1 = $333 + $0_1 * $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * .20697501780033842 + .23066074577556175) + .272728123808534) + .33333332981837743) + .4285714285785502) + .5999999999999946);
    wasm2js_scratch_store_f64(+($5_1 + 3.0 + $6_1));
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$3 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$0 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $4_1 = $323 * $0_1 + $4_1 * ($6_1 - ($0_1 + -3.0 - $5_1));
    $2_1 = $2_1 * $0_1;
    wasm2js_scratch_store_f64(+($4_1 + $2_1));
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$3 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $2_1 = $273 + (($4_1 - ($0_1 - $2_1)) * .9617966939259756 + $0_1 * -7.028461650952758e-09);
    $392 = $2_1;
    $4_1 = +HEAPF64[($11_1 + 8768 | 0) >> 3];
    $5_1 = $0_1 * .9617967009544373;
    $402 = $4_1 + ($2_1 + $5_1);
    $2_1 = +($9_1 | 0);
    wasm2js_scratch_store_f64(+($402 + $2_1));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$2 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
    $0_1 = +wasm2js_scratch_load_f64();
    $4_1 = $392 - ($0_1 - $2_1 - $4_1 - $5_1);
   }
   i64toi32_i32$1 = $7$hi;
   i64toi32_i32$3 = $7_1;
   i64toi32_i32$0 = -1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 & i64toi32_i32$2 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $5_1 = +wasm2js_scratch_load_f64();
   $2_1 = $0_1 * $5_1;
   $1_1 = $4_1 * $1_1 + ($1_1 - $5_1) * $0_1;
   $0_1 = $2_1 + $1_1;
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $7$hi = i64toi32_i32$0;
   $10_1 = $7_1;
   label$29 : {
    label$30 : {
     i64toi32_i32$1 = $10_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $86_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      $86_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
     }
     $12_1 = $86_1;
     if (($12_1 | 0) < (1083179008 | 0)) {
      break label$30
     }
     label$31 : {
      if (!($12_1 + -1083179008 | 0 | $10_1 | 0)) {
       break label$31
      }
      return +($3_1 * 1.e+300 * 1.e+300);
     }
     if (!($1_1 + 8.008566259537294e-17 > $0_1 - $2_1)) {
      break label$29
     }
     return +($3_1 * 1.e+300 * 1.e+300);
    }
    if (($12_1 & 2147482624 | 0) >>> 0 < 1083231232 >>> 0) {
     break label$29
    }
    label$32 : {
     if (!($12_1 + 1064252416 | 0 | $10_1 | 0)) {
      break label$32
     }
     return +($3_1 * 1.0e-300 * 1.0e-300);
    }
    if (!($1_1 <= $0_1 - $2_1)) {
     break label$29
    }
    return +($3_1 * 1.0e-300 * 1.0e-300);
   }
   $10_1 = 0;
   label$33 : {
    $11_1 = $12_1 & 2147483647 | 0;
    if ($11_1 >>> 0 < 1071644673 >>> 0) {
     break label$33
    }
    $12_1 = (1048576 >>> (($11_1 >>> 20 | 0) + -1022 | 0) | 0) + $12_1 | 0;
    $11_1 = ($12_1 >>> 20 | 0) & 2047 | 0;
    $10_1 = ($12_1 & 1048575 | 0 | 1048576 | 0) >>> (1043 - $11_1 | 0) | 0;
    $503 = 0 - $10_1 | 0;
    $504 = $10_1;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 0;
    if ((i64toi32_i32$3 | 0) < (i64toi32_i32$1 | 0)) {
     $87_1 = 1
    } else {
     if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$1 | 0)) {
      if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$2 >>> 0) {
       $88_1 = 0
      } else {
       $88_1 = 1
      }
      $89_1 = $88_1;
     } else {
      $89_1 = 0
     }
     $87_1 = $89_1;
    }
    $10_1 = $87_1 ? $503 : $504;
    $508 = $1_1;
    $509 = $2_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = (-1048576 >> ($11_1 + -1023 | 0) | 0) & $12_1 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $90_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $90_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    wasm2js_scratch_store_i32(0 | 0, $90_1 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$3 | 0);
    $2_1 = $509 - +wasm2js_scratch_load_f64();
    wasm2js_scratch_store_f64(+($508 + $2_1));
    i64toi32_i32$3 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $7$hi = i64toi32_i32$3;
   }
   label$34 : {
    label$35 : {
     $523 = $10_1 << 20 | 0;
     i64toi32_i32$3 = $7$hi;
     i64toi32_i32$0 = $7_1;
     i64toi32_i32$2 = -1;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
     wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 & i64toi32_i32$1 | 0 | 0);
     wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
     $0_1 = +wasm2js_scratch_load_f64();
     $4_1 = $0_1 * .6931471824645996;
     $2_1 = ($1_1 - ($0_1 - $2_1)) * .6931471805599453 + $0_1 * -1.904654299957768e-09;
     $1_1 = $4_1 + $2_1;
     $0_1 = $1_1 * $1_1;
     $0_1 = $1_1 - $0_1 * ($0_1 * ($0_1 * ($0_1 * ($0_1 * 4.1381367970572385e-08 + -1.6533902205465252e-06) + 6.613756321437934e-05) + -2.7777777777015593e-03) + .16666666666666602);
     $566 = $1_1 * $0_1 / ($0_1 + -2.0);
     $0_1 = $2_1 - ($1_1 - $4_1);
     $1_1 = $1_1 - ($566 - ($0_1 + $1_1 * $0_1)) + 1.0;
     wasm2js_scratch_store_f64(+$1_1);
     i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
     $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
     $7$hi = i64toi32_i32$2;
     i64toi32_i32$3 = $7_1;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$0 = 0;
      $91_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      $91_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
     }
     $12_1 = $523 + $91_1 | 0;
     if (($12_1 | 0) > (1048575 | 0)) {
      break label$35
     }
     $1_1 = +$198(+$1_1, $10_1 | 0);
     break label$34;
    }
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = $12_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 32;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $92_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $92_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $593$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $7$hi;
    i64toi32_i32$0 = $7_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = -1;
    i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $595 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $595$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $593$hi;
    i64toi32_i32$3 = $92_1;
    i64toi32_i32$0 = $595$hi;
    i64toi32_i32$1 = $595;
    i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$1 | 0 | 0);
    wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
    $1_1 = +wasm2js_scratch_load_f64();
   }
   $2_1 = $3_1 * $1_1;
  }
  return +$2_1;
 }
 
 function $148($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $3_1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $10_1 = 0, $2$hi = 0;
  label$1 : {
   wasm2js_scratch_store_f64(+$0_1);
   i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
   $2_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
   $2$hi = i64toi32_i32$0;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 52;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $10_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $10_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $3_1 = $10_1 & 2047 | 0;
   if (($3_1 | 0) == (2047 | 0)) {
    break label$1
   }
   label$2 : {
    if ($3_1) {
     break label$2
    }
    label$3 : {
     label$4 : {
      if ($0_1 != 0.0) {
       break label$4
      }
      $3_1 = 0;
      break label$3;
     }
     $0_1 = +$148(+($0_1 * 18446744073709551615.0), $1_1 | 0);
     $3_1 = (HEAP32[$1_1 >> 2] | 0) + -64 | 0;
    }
    HEAP32[$1_1 >> 2] = $3_1;
    return +$0_1;
   }
   HEAP32[$1_1 >> 2] = $3_1 + -1022 | 0;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = -2146435073;
   i64toi32_i32$3 = -1;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 1071644672;
   i64toi32_i32$3 = 0;
   i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$1 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
  }
  return +$0_1;
 }
 
 function $149($0_1) {
  $0_1 = +$0_1;
  var $1_1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, $2_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, i64toi32_i32$2 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$2 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 32;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $8_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $8_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $2_1 = $8_1 & 2147483647 | 0;
    if ($2_1 >>> 0 > 1072243195 >>> 0) {
     break label$2
    }
    if ($2_1 >>> 0 < 1045430272 >>> 0) {
     break label$1
    }
    $0_1 = +$155(+$0_1, +(0.0), 0 | 0);
    break label$1;
   }
   label$3 : {
    if ($2_1 >>> 0 < 2146435072 >>> 0) {
     break label$3
    }
    $0_1 = $0_1 - $0_1;
    break label$1;
   }
   label$4 : {
    switch (($152(+$0_1, $1_1 | 0) | 0) & 3 | 0 | 0) {
    case 0:
     $0_1 = +$155(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    case 1:
     $0_1 = +$153(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
     break label$1;
    case 2:
     $0_1 = -+$155(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]), 1 | 0);
     break label$1;
    default:
     break label$4;
    };
   }
   $0_1 = -+$153(+(+HEAPF64[$1_1 >> 3]), +(+HEAPF64[($1_1 + 8 | 0) >> 3]));
  }
  global$0 = $1_1 + 16 | 0;
  return +$0_1;
 }
 
 function $150($0_1) {
  $0_1 = +$0_1;
  return +Math_floor($0_1);
 }
 
 function $151($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var $21_1 = 0.0, $11_1 = 0, $6_1 = 0, $5_1 = 0, $22_1 = 0.0, $10_1 = 0, $13_1 = 0, $8_1 = 0, $20_1 = 0, $9_1 = 0, $18_1 = 0, $12_1 = 0, $17_1 = 0, $23_1 = 0.0, $7_1 = 0, $15_1 = 0, $19_1 = 0, $14_1 = 0, $16_1 = 0, $204_1 = 0, $207_1 = 0, $515 = 0.0, $553 = 0.0;
  $5_1 = global$0 - 560 | 0;
  global$0 = $5_1;
  $6_1 = ($2_1 + -3 | 0 | 0) / (24 | 0) | 0;
  $7_1 = ($6_1 | 0) > (0 | 0) ? $6_1 : 0;
  $8_1 = Math_imul($7_1, -24) + $2_1 | 0;
  label$1 : {
   $9_1 = HEAP32[(($4_1 << 2 | 0) + 8784 | 0) >> 2] | 0;
   $10_1 = $3_1 + -1 | 0;
   if (($9_1 + $10_1 | 0 | 0) < (0 | 0)) {
    break label$1
   }
   $11_1 = $9_1 + $3_1 | 0;
   $2_1 = $7_1 - $10_1 | 0;
   $6_1 = 0;
   label$2 : while (1) {
    label$3 : {
     label$4 : {
      if (($2_1 | 0) >= (0 | 0)) {
       break label$4
      }
      $21_1 = 0.0;
      break label$3;
     }
     $21_1 = +(HEAP32[(($2_1 << 2 | 0) + 8800 | 0) >> 2] | 0 | 0);
    }
    HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = $21_1;
    $2_1 = $2_1 + 1 | 0;
    $6_1 = $6_1 + 1 | 0;
    if (($6_1 | 0) != ($11_1 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  $12_1 = $8_1 + -24 | 0;
  $13_1 = ($9_1 | 0) > (0 | 0) ? $9_1 : 0;
  $11_1 = 0;
  label$5 : while (1) {
   $21_1 = 0.0;
   label$6 : {
    if (($3_1 | 0) <= (0 | 0)) {
     break label$6
    }
    $6_1 = $11_1 + $10_1 | 0;
    $2_1 = 0;
    label$7 : while (1) {
     $21_1 = $21_1 + +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3];
     $2_1 = $2_1 + 1 | 0;
     if (($2_1 | 0) != ($3_1 | 0)) {
      continue label$7
     }
     break label$7;
    };
   }
   HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
   $2_1 = ($11_1 | 0) == ($13_1 | 0);
   $11_1 = $11_1 + 1 | 0;
   if (!$2_1) {
    continue label$5
   }
   break label$5;
  };
  $14_1 = 47 - $8_1 | 0;
  $15_1 = 48 - $8_1 | 0;
  $16_1 = $8_1 + -25 | 0;
  $11_1 = $9_1;
  label$8 : {
   label$9 : while (1) {
    $21_1 = +HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3];
    $2_1 = 0;
    $6_1 = $11_1;
    label$10 : {
     $17_1 = ($11_1 | 0) < (1 | 0);
     if ($17_1) {
      break label$10
     }
     label$11 : while (1) {
      $13_1 = $2_1 << 2 | 0;
      label$12 : {
       label$13 : {
        $22_1 = $21_1 * 5.9604644775390625e-08;
        if (!(Math_abs($22_1) < 2147483648.0)) {
         break label$13
        }
        $10_1 = ~~$22_1;
        break label$12;
       }
       $10_1 = -2147483648;
      }
      $13_1 = ($5_1 + 480 | 0) + $13_1 | 0;
      label$14 : {
       label$15 : {
        $22_1 = +($10_1 | 0);
        $21_1 = $21_1 + $22_1 * -16777216.0;
        if (!(Math_abs($21_1) < 2147483648.0)) {
         break label$15
        }
        $10_1 = ~~$21_1;
        break label$14;
       }
       $10_1 = -2147483648;
      }
      HEAP32[$13_1 >> 2] = $10_1;
      $6_1 = $6_1 + -1 | 0;
      $21_1 = +HEAPF64[($5_1 + ($6_1 << 3 | 0) | 0) >> 3] + $22_1;
      $2_1 = $2_1 + 1 | 0;
      if (($2_1 | 0) != ($11_1 | 0)) {
       continue label$11
      }
      break label$11;
     };
    }
    $21_1 = +$198(+$21_1, $12_1 | 0);
    label$16 : {
     label$17 : {
      $21_1 = $21_1 + +$150(+($21_1 * .125)) * -8.0;
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$17
      }
      $18_1 = ~~$21_1;
      break label$16;
     }
     $18_1 = -2147483648;
    }
    $21_1 = $21_1 - +($18_1 | 0);
    label$18 : {
     label$19 : {
      label$20 : {
       label$21 : {
        label$22 : {
         $19_1 = ($12_1 | 0) < (1 | 0);
         if ($19_1) {
          break label$22
         }
         $2_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
         $204_1 = $2_1;
         $2_1 = HEAP32[$2_1 >> 2] | 0;
         $207_1 = $2_1;
         $2_1 = $2_1 >> $15_1 | 0;
         $6_1 = $207_1 - ($2_1 << $15_1 | 0) | 0;
         HEAP32[$204_1 >> 2] = $6_1;
         $20_1 = $6_1 >> $14_1 | 0;
         $18_1 = $2_1 + $18_1 | 0;
         break label$21;
        }
        if ($12_1) {
         break label$20
        }
        $20_1 = (HEAP32[((($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0) >> 2] | 0) >> 23 | 0;
       }
       if (($20_1 | 0) < (1 | 0)) {
        break label$18
       }
       break label$19;
      }
      $20_1 = 2;
      if ($21_1 >= .5) {
       break label$19
      }
      $20_1 = 0;
      break label$18;
     }
     $2_1 = 0;
     $10_1 = 0;
     label$23 : {
      if ($17_1) {
       break label$23
      }
      label$24 : while (1) {
       $17_1 = ($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0;
       $6_1 = HEAP32[$17_1 >> 2] | 0;
       $13_1 = 16777215;
       label$25 : {
        label$26 : {
         if ($10_1) {
          break label$26
         }
         $13_1 = 16777216;
         if ($6_1) {
          break label$26
         }
         $10_1 = 0;
         break label$25;
        }
        HEAP32[$17_1 >> 2] = $13_1 - $6_1 | 0;
        $10_1 = 1;
       }
       $2_1 = $2_1 + 1 | 0;
       if (($2_1 | 0) != ($11_1 | 0)) {
        continue label$24
       }
       break label$24;
      };
     }
     label$27 : {
      if ($19_1) {
       break label$27
      }
      $2_1 = 8388607;
      label$28 : {
       switch ($16_1 | 0) {
       case 1:
        $2_1 = 4194303;
        break;
       case 0:
        break label$28;
       default:
        break label$27;
       };
      }
      $6_1 = (($11_1 << 2 | 0) + ($5_1 + 480 | 0) | 0) + -4 | 0;
      HEAP32[$6_1 >> 2] = (HEAP32[$6_1 >> 2] | 0) & $2_1 | 0;
     }
     $18_1 = $18_1 + 1 | 0;
     if (($20_1 | 0) != (2 | 0)) {
      break label$18
     }
     $21_1 = 1.0 - $21_1;
     $20_1 = 2;
     if (!$10_1) {
      break label$18
     }
     $21_1 = $21_1 - +$198(+(1.0), $12_1 | 0);
    }
    label$30 : {
     if ($21_1 != 0.0) {
      break label$30
     }
     $6_1 = 0;
     $2_1 = $11_1;
     label$31 : {
      if (($2_1 | 0) <= ($9_1 | 0)) {
       break label$31
      }
      label$32 : while (1) {
       $2_1 = $2_1 + -1 | 0;
       $6_1 = HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | $6_1 | 0;
       if (($2_1 | 0) > ($9_1 | 0)) {
        continue label$32
       }
       break label$32;
      };
      if (!$6_1) {
       break label$31
      }
      $8_1 = $12_1;
      label$33 : while (1) {
       $8_1 = $8_1 + -24 | 0;
       $11_1 = $11_1 + -1 | 0;
       if (!(HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] | 0)) {
        continue label$33
       }
       break label$8;
      };
     }
     $2_1 = 1;
     label$34 : while (1) {
      $6_1 = $2_1;
      $2_1 = $2_1 + 1 | 0;
      if (!(HEAP32[(($5_1 + 480 | 0) + (($9_1 - $6_1 | 0) << 2 | 0) | 0) >> 2] | 0)) {
       continue label$34
      }
      break label$34;
     };
     $13_1 = $6_1 + $11_1 | 0;
     label$35 : while (1) {
      $6_1 = $11_1 + $3_1 | 0;
      $11_1 = $11_1 + 1 | 0;
      HEAPF64[(($5_1 + 320 | 0) + ($6_1 << 3 | 0) | 0) >> 3] = +(HEAP32[((($11_1 + $7_1 | 0) << 2 | 0) + 8800 | 0) >> 2] | 0 | 0);
      $2_1 = 0;
      $21_1 = 0.0;
      label$36 : {
       if (($3_1 | 0) < (1 | 0)) {
        break label$36
       }
       label$37 : while (1) {
        $21_1 = $21_1 + +HEAPF64[($0_1 + ($2_1 << 3 | 0) | 0) >> 3] * +HEAPF64[(($5_1 + 320 | 0) + (($6_1 - $2_1 | 0) << 3 | 0) | 0) >> 3];
        $2_1 = $2_1 + 1 | 0;
        if (($2_1 | 0) != ($3_1 | 0)) {
         continue label$37
        }
        break label$37;
       };
      }
      HEAPF64[($5_1 + ($11_1 << 3 | 0) | 0) >> 3] = $21_1;
      if (($11_1 | 0) < ($13_1 | 0)) {
       continue label$35
      }
      break label$35;
     };
     $11_1 = $13_1;
     continue label$9;
    }
    break label$9;
   };
   label$38 : {
    label$39 : {
     $21_1 = +$198(+$21_1, 24 - $8_1 | 0 | 0);
     if (!($21_1 >= 16777216.0)) {
      break label$39
     }
     $3_1 = $11_1 << 2 | 0;
     label$40 : {
      label$41 : {
       $22_1 = $21_1 * 5.9604644775390625e-08;
       if (!(Math_abs($22_1) < 2147483648.0)) {
        break label$41
       }
       $2_1 = ~~$22_1;
       break label$40;
      }
      $2_1 = -2147483648;
     }
     $3_1 = ($5_1 + 480 | 0) + $3_1 | 0;
     label$42 : {
      label$43 : {
       $21_1 = $21_1 + +($2_1 | 0) * -16777216.0;
       if (!(Math_abs($21_1) < 2147483648.0)) {
        break label$43
       }
       $6_1 = ~~$21_1;
       break label$42;
      }
      $6_1 = -2147483648;
     }
     HEAP32[$3_1 >> 2] = $6_1;
     $11_1 = $11_1 + 1 | 0;
     break label$38;
    }
    label$44 : {
     label$45 : {
      if (!(Math_abs($21_1) < 2147483648.0)) {
       break label$45
      }
      $2_1 = ~~$21_1;
      break label$44;
     }
     $2_1 = -2147483648;
    }
    $8_1 = $12_1;
   }
   HEAP32[(($5_1 + 480 | 0) + ($11_1 << 2 | 0) | 0) >> 2] = $2_1;
  }
  $21_1 = +$198(+(1.0), $8_1 | 0);
  label$46 : {
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$46
   }
   $2_1 = $11_1;
   label$47 : while (1) {
    HEAPF64[($5_1 + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 * +(HEAP32[(($5_1 + 480 | 0) + ($2_1 << 2 | 0) | 0) >> 2] | 0 | 0);
    $21_1 = $21_1 * 5.9604644775390625e-08;
    $3_1 = ($2_1 | 0) > (0 | 0);
    $2_1 = $2_1 + -1 | 0;
    if ($3_1) {
     continue label$47
    }
    break label$47;
   };
   if (($11_1 | 0) <= (-1 | 0)) {
    break label$46
   }
   $2_1 = $11_1;
   label$48 : while (1) {
    $6_1 = $2_1;
    $0_1 = $11_1 - $2_1 | 0;
    $21_1 = 0.0;
    $2_1 = 0;
    label$49 : {
     label$50 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($2_1 << 3 | 0) + 11568 | 0) >> 3] * +HEAPF64[($5_1 + (($2_1 + $6_1 | 0) << 3 | 0) | 0) >> 3];
      if (($2_1 | 0) >= ($9_1 | 0)) {
       break label$49
      }
      $3_1 = $2_1 >>> 0 < $0_1 >>> 0;
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$50
      }
      break label$50;
     };
    }
    HEAPF64[(($5_1 + 160 | 0) + ($0_1 << 3 | 0) | 0) >> 3] = $21_1;
    $2_1 = $6_1 + -1 | 0;
    if (($6_1 | 0) > (0 | 0)) {
     continue label$48
    }
    break label$48;
   };
  }
  label$51 : {
   label$52 : {
    label$53 : {
     switch ($4_1 | 0) {
     case 3:
      $23_1 = 0.0;
      label$56 : {
       if (($11_1 | 0) < (1 | 0)) {
        break label$56
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$57 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $515 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($515 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = ($2_1 | 0) > (1 | 0);
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$57
        }
        break label$57;
       };
       if (($11_1 | 0) < (2 | 0)) {
        break label$56
       }
       $21_1 = +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
       $2_1 = $11_1;
       label$58 : while (1) {
        $3_1 = $2_1 + -1 | 0;
        $6_1 = ($5_1 + 160 | 0) + ($3_1 << 3 | 0) | 0;
        $22_1 = +HEAPF64[$6_1 >> 3];
        $553 = $22_1;
        $22_1 = $22_1 + $21_1;
        HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3] = $21_1 + ($553 - $22_1);
        HEAPF64[$6_1 >> 3] = $22_1;
        $6_1 = ($2_1 | 0) > (2 | 0);
        $21_1 = $22_1;
        $2_1 = $3_1;
        if ($6_1) {
         continue label$58
        }
        break label$58;
       };
       $23_1 = 0.0;
       if (($11_1 | 0) <= (1 | 0)) {
        break label$56
       }
       label$59 : while (1) {
        $23_1 = $23_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (2 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$59
        }
        break label$59;
       };
      }
      $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3];
      if ($20_1) {
       break label$52
      }
      HEAPF64[$1_1 >> 3] = $21_1;
      $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
      HEAPF64[($1_1 + 16 | 0) >> 3] = $23_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $21_1;
      break label$51;
     case 0:
      $21_1 = 0.0;
      label$60 : {
       if (($11_1 | 0) < (0 | 0)) {
        break label$60
       }
       label$61 : while (1) {
        $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($11_1 << 3 | 0) | 0) >> 3];
        $2_1 = ($11_1 | 0) > (0 | 0);
        $11_1 = $11_1 + -1 | 0;
        if ($2_1) {
         continue label$61
        }
        break label$61;
       };
      }
      HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
      break label$51;
     case 1:
     case 2:
      break label$53;
     default:
      break label$51;
     };
    }
    $21_1 = 0.0;
    label$62 : {
     if (($11_1 | 0) < (0 | 0)) {
      break label$62
     }
     $2_1 = $11_1;
     label$63 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) > (0 | 0);
      $2_1 = $2_1 + -1 | 0;
      if ($3_1) {
       continue label$63
      }
      break label$63;
     };
    }
    HEAPF64[$1_1 >> 3] = $20_1 ? -$21_1 : $21_1;
    $21_1 = +HEAPF64[($5_1 + 160 | 0) >> 3] - $21_1;
    $2_1 = 1;
    label$64 : {
     if (($11_1 | 0) < (1 | 0)) {
      break label$64
     }
     label$65 : while (1) {
      $21_1 = $21_1 + +HEAPF64[(($5_1 + 160 | 0) + ($2_1 << 3 | 0) | 0) >> 3];
      $3_1 = ($2_1 | 0) != ($11_1 | 0);
      $2_1 = $2_1 + 1 | 0;
      if ($3_1) {
       continue label$65
      }
      break label$65;
     };
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $20_1 ? -$21_1 : $21_1;
    break label$51;
   }
   HEAPF64[$1_1 >> 3] = -$21_1;
   $21_1 = +HEAPF64[($5_1 + 168 | 0) >> 3];
   HEAPF64[($1_1 + 16 | 0) >> 3] = -$23_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = -$21_1;
  }
  global$0 = $5_1 + 560 | 0;
  return $18_1 & 7 | 0 | 0;
 }
 
 function $152($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var $8_1 = 0.0, i64toi32_i32$2 = 0, $3_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $2_1 = 0, $4_1 = 0, $9_1 = 0.0, $7_1 = 0, $5_1 = 0, $6_1 = 0, $7$hi = 0, $10_1 = 0.0, $11_1 = 0.0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $23_1 = 0, $24_1 = 0, $25_1 = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $34_1 = 0, $35_1 = 0, $36_1 = 0, $37_1 = 0, $152_1 = 0, $185_1 = 0;
  $2_1 = global$0 - 48 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
      $7_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      $7$hi = i64toi32_i32$0;
      i64toi32_i32$2 = $7_1;
      i64toi32_i32$1 = 0;
      i64toi32_i32$3 = 32;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $20_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
       $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
      }
      $3_1 = $20_1;
      $4_1 = $3_1 & 2147483647 | 0;
      if ($4_1 >>> 0 > 1074752122 >>> 0) {
       break label$4
      }
      if (($3_1 & 1048575 | 0 | 0) == (598523 | 0)) {
       break label$3
      }
      label$5 : {
       if ($4_1 >>> 0 > 1073928572 >>> 0) {
        break label$5
       }
       label$6 : {
        i64toi32_i32$1 = $7$hi;
        i64toi32_i32$0 = $7_1;
        i64toi32_i32$2 = 0;
        i64toi32_i32$3 = 0;
        if ((i64toi32_i32$1 | 0) < (i64toi32_i32$2 | 0)) {
         $21_1 = 1
        } else {
         if ((i64toi32_i32$1 | 0) <= (i64toi32_i32$2 | 0)) {
          if (i64toi32_i32$0 >>> 0 >= i64toi32_i32$3 >>> 0) {
           $22_1 = 0
          } else {
           $22_1 = 1
          }
          $23_1 = $22_1;
         } else {
          $23_1 = 0
         }
         $21_1 = $23_1;
        }
        if ($21_1) {
         break label$6
        }
        $0_1 = $0_1 + -1.5707963267341256;
        $8_1 = $0_1 + -6.077100506506192e-11;
        HEAPF64[$1_1 >> 3] = $8_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -6.077100506506192e-11;
        $3_1 = 1;
        break label$1;
       }
       $0_1 = $0_1 + 1.5707963267341256;
       $8_1 = $0_1 + 6.077100506506192e-11;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 6.077100506506192e-11;
       $3_1 = -1;
       break label$1;
      }
      label$7 : {
       i64toi32_i32$0 = $7$hi;
       i64toi32_i32$3 = $7_1;
       i64toi32_i32$1 = 0;
       i64toi32_i32$2 = 0;
       if ((i64toi32_i32$0 | 0) < (i64toi32_i32$1 | 0)) {
        $24_1 = 1
       } else {
        if ((i64toi32_i32$0 | 0) <= (i64toi32_i32$1 | 0)) {
         if (i64toi32_i32$3 >>> 0 >= i64toi32_i32$2 >>> 0) {
          $25_1 = 0
         } else {
          $25_1 = 1
         }
         $26_1 = $25_1;
        } else {
         $26_1 = 0
        }
        $24_1 = $26_1;
       }
       if ($24_1) {
        break label$7
       }
       $0_1 = $0_1 + -3.1415926534682512;
       $8_1 = $0_1 + -1.2154201013012384e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -1.2154201013012384e-10;
       $3_1 = 2;
       break label$1;
      }
      $0_1 = $0_1 + 3.1415926534682512;
      $8_1 = $0_1 + 1.2154201013012384e-10;
      HEAPF64[$1_1 >> 3] = $8_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 1.2154201013012384e-10;
      $3_1 = -2;
      break label$1;
     }
     label$8 : {
      if ($4_1 >>> 0 > 1075594811 >>> 0) {
       break label$8
      }
      label$9 : {
       if ($4_1 >>> 0 > 1075183036 >>> 0) {
        break label$9
       }
       if (($4_1 | 0) == (1074977148 | 0)) {
        break label$3
       }
       label$10 : {
        i64toi32_i32$3 = $7$hi;
        i64toi32_i32$2 = $7_1;
        i64toi32_i32$0 = 0;
        i64toi32_i32$1 = 0;
        if ((i64toi32_i32$3 | 0) < (i64toi32_i32$0 | 0)) {
         $27_1 = 1
        } else {
         if ((i64toi32_i32$3 | 0) <= (i64toi32_i32$0 | 0)) {
          if (i64toi32_i32$2 >>> 0 >= i64toi32_i32$1 >>> 0) {
           $28_1 = 0
          } else {
           $28_1 = 1
          }
          $29_1 = $28_1;
         } else {
          $29_1 = 0
         }
         $27_1 = $29_1;
        }
        if ($27_1) {
         break label$10
        }
        $0_1 = $0_1 + -4.712388980202377;
        $8_1 = $0_1 + -1.8231301519518578e-10;
        HEAPF64[$1_1 >> 3] = $8_1;
        HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -1.8231301519518578e-10;
        $3_1 = 3;
        break label$1;
       }
       $0_1 = $0_1 + 4.712388980202377;
       $8_1 = $0_1 + 1.8231301519518578e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 1.8231301519518578e-10;
       $3_1 = -3;
       break label$1;
      }
      if (($4_1 | 0) == (1075388923 | 0)) {
       break label$3
      }
      label$11 : {
       i64toi32_i32$2 = $7$hi;
       i64toi32_i32$1 = $7_1;
       i64toi32_i32$3 = 0;
       i64toi32_i32$0 = 0;
       if ((i64toi32_i32$2 | 0) < (i64toi32_i32$3 | 0)) {
        $30_1 = 1
       } else {
        if ((i64toi32_i32$2 | 0) <= (i64toi32_i32$3 | 0)) {
         if (i64toi32_i32$1 >>> 0 >= i64toi32_i32$0 >>> 0) {
          $31_1 = 0
         } else {
          $31_1 = 1
         }
         $32_1 = $31_1;
        } else {
         $32_1 = 0
        }
        $30_1 = $32_1;
       }
       if ($30_1) {
        break label$11
       }
       $0_1 = $0_1 + -6.2831853069365025;
       $8_1 = $0_1 + -2.430840202602477e-10;
       HEAPF64[$1_1 >> 3] = $8_1;
       HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + -2.430840202602477e-10;
       $3_1 = 4;
       break label$1;
      }
      $0_1 = $0_1 + 6.2831853069365025;
      $8_1 = $0_1 + 2.430840202602477e-10;
      HEAPF64[$1_1 >> 3] = $8_1;
      HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1 - $8_1 + 2.430840202602477e-10;
      $3_1 = -4;
      break label$1;
     }
     if ($4_1 >>> 0 > 1094263290 >>> 0) {
      break label$2
     }
    }
    $8_1 = $0_1 * .6366197723675814 + 6755399441055744.0 + -6755399441055744.0;
    $9_1 = $0_1 + $8_1 * -1.5707963267341256;
    $10_1 = $8_1 * 6.077100506506192e-11;
    $0_1 = $9_1 - $10_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    $5_1 = $4_1 >>> 20 | 0;
    $152_1 = $5_1;
    wasm2js_scratch_store_f64(+$0_1);
    i64toi32_i32$1 = wasm2js_scratch_load_i32(1 | 0) | 0;
    i64toi32_i32$0 = wasm2js_scratch_load_i32(0 | 0) | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 52;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = 0;
     $33_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $33_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $6_1 = ($152_1 - ($33_1 & 2047 | 0) | 0 | 0) < (17 | 0);
    label$12 : {
     label$13 : {
      if (!(Math_abs($8_1) < 2147483648.0)) {
       break label$13
      }
      $3_1 = ~~$8_1;
      break label$12;
     }
     $3_1 = -2147483648;
    }
    label$14 : {
     if ($6_1) {
      break label$14
     }
     $0_1 = $8_1 * 6.077100506303966e-11;
     $11_1 = $9_1 - $0_1;
     $10_1 = $8_1 * 2.0222662487959506e-21 - ($9_1 - $11_1 - $0_1);
     $0_1 = $11_1 - $10_1;
     HEAPF64[$1_1 >> 3] = $0_1;
     label$15 : {
      $185_1 = $5_1;
      wasm2js_scratch_store_f64(+$0_1);
      i64toi32_i32$2 = wasm2js_scratch_load_i32(1 | 0) | 0;
      i64toi32_i32$1 = wasm2js_scratch_load_i32(0 | 0) | 0;
      i64toi32_i32$0 = 0;
      i64toi32_i32$3 = 52;
      i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
       i64toi32_i32$0 = 0;
       $34_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $34_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
      }
      if (($185_1 - ($34_1 & 2047 | 0) | 0 | 0) >= (50 | 0)) {
       break label$15
      }
      $9_1 = $11_1;
      break label$14;
     }
     $0_1 = $8_1 * 2.0222662487111665e-21;
     $9_1 = $11_1 - $0_1;
     $10_1 = $8_1 * 8.4784276603689e-32 - ($11_1 - $9_1 - $0_1);
     $0_1 = $9_1 - $10_1;
     HEAPF64[$1_1 >> 3] = $0_1;
    }
    HEAPF64[($1_1 + 8 | 0) >> 3] = $9_1 - $0_1 - $10_1;
    break label$1;
   }
   label$16 : {
    if ($4_1 >>> 0 < 2146435072 >>> 0) {
     break label$16
    }
    $0_1 = $0_1 - $0_1;
    HEAPF64[$1_1 >> 3] = $0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = $0_1;
    $3_1 = 0;
    break label$1;
   }
   i64toi32_i32$0 = $7$hi;
   i64toi32_i32$2 = $7_1;
   i64toi32_i32$1 = 1048575;
   i64toi32_i32$3 = -1;
   i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
   i64toi32_i32$2 = 1096810496;
   i64toi32_i32$3 = 0;
   i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
   wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0);
   wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$2 | 0);
   $0_1 = +wasm2js_scratch_load_f64();
   $3_1 = 0;
   $6_1 = 1;
   label$17 : while (1) {
    $3_1 = ($2_1 + 16 | 0) + ($3_1 << 3 | 0) | 0;
    label$18 : {
     label$19 : {
      if (!(Math_abs($0_1) < 2147483648.0)) {
       break label$19
      }
      $5_1 = ~~$0_1;
      break label$18;
     }
     $5_1 = -2147483648;
    }
    $8_1 = +($5_1 | 0);
    HEAPF64[$3_1 >> 3] = $8_1;
    $0_1 = ($0_1 - $8_1) * 16777216.0;
    $3_1 = 1;
    $5_1 = $6_1 & 1 | 0;
    $6_1 = 0;
    if ($5_1) {
     continue label$17
    }
    break label$17;
   };
   HEAPF64[($2_1 + 32 | 0) >> 3] = $0_1;
   label$20 : {
    label$21 : {
     if ($0_1 == 0.0) {
      break label$21
     }
     $3_1 = 2;
     break label$20;
    }
    $6_1 = 1;
    label$22 : while (1) {
     $3_1 = $6_1;
     $6_1 = $3_1 + -1 | 0;
     if (+HEAPF64[(($2_1 + 16 | 0) + ($3_1 << 3 | 0) | 0) >> 3] == 0.0) {
      continue label$22
     }
     break label$22;
    };
   }
   $3_1 = $151($2_1 + 16 | 0 | 0, $2_1 | 0, ($4_1 >>> 20 | 0) + -1046 | 0 | 0, $3_1 + 1 | 0 | 0, 1 | 0) | 0;
   $0_1 = +HEAPF64[$2_1 >> 3];
   label$23 : {
    i64toi32_i32$2 = $7$hi;
    i64toi32_i32$1 = $7_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$3 = -1;
    if ((i64toi32_i32$2 | 0) > (i64toi32_i32$0 | 0)) {
     $35_1 = 1
    } else {
     if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$1 >>> 0 <= i64toi32_i32$3 >>> 0) {
       $36_1 = 0
      } else {
       $36_1 = 1
      }
      $37_1 = $36_1;
     } else {
      $37_1 = 0
     }
     $35_1 = $37_1;
    }
    if ($35_1) {
     break label$23
    }
    HEAPF64[$1_1 >> 3] = -$0_1;
    HEAPF64[($1_1 + 8 | 0) >> 3] = -+HEAPF64[($2_1 + 8 | 0) >> 3];
    $3_1 = 0 - $3_1 | 0;
    break label$1;
   }
   HEAPF64[$1_1 >> 3] = $0_1;
   HEAPF64[($1_1 + 8 | 0) >> 3] = +HEAPF64[($2_1 + 8 | 0) >> 3];
  }
  global$0 = $2_1 + 48 | 0;
  return $3_1 | 0;
 }
 
 function $153($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  var $2_1 = 0.0, $3_1 = 0.0, $4_1 = 0.0, $16_1 = 0.0;
  $2_1 = $0_1 * $0_1;
  $3_1 = $2_1 * .5;
  $4_1 = 1.0 - $3_1;
  $16_1 = 1.0 - $4_1 - $3_1;
  $3_1 = $2_1 * $2_1;
  return +($4_1 + ($16_1 + ($2_1 * ($2_1 * ($2_1 * ($2_1 * 2.480158728947673e-05 + -.001388888888887411) + .0416666666666666) + $3_1 * $3_1 * ($2_1 * ($2_1 * -1.1359647557788195e-11 + 2.087572321298175e-09) + -2.7557314351390663e-07)) - $0_1 * $1_1)));
 }
 
 function $154($0_1) {
  $0_1 = +$0_1;
  return +Math_sqrt($0_1);
 }
 
 function $155($0_1, $1_1, $2_1) {
  $0_1 = +$0_1;
  $1_1 = +$1_1;
  $2_1 = $2_1 | 0;
  var $3_1 = 0.0, $5_1 = 0.0, $4_1 = 0.0;
  $3_1 = $0_1 * $0_1;
  $4_1 = $3_1 * ($3_1 * $3_1) * ($3_1 * 1.58969099521155e-10 + -2.5050760253406863e-08) + ($3_1 * ($3_1 * 2.7557313707070068e-06 + -1.984126982985795e-04) + .00833333333332249);
  $5_1 = $3_1 * $0_1;
  label$1 : {
   if ($2_1) {
    break label$1
   }
   return +($5_1 * ($3_1 * $4_1 + -.16666666666666632) + $0_1);
  }
  return +($0_1 - ($3_1 * ($1_1 * .5 - $5_1 * $4_1) - $1_1 + $5_1 * .16666666666666632));
 }
 
 function $156($0_1) {
  $0_1 = +$0_1;
  return +Math_abs($0_1);
 }
 
 function $157($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $158($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $158($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if (($1_1 ^ $0_1 | 0) & 3 | 0) {
      break label$3
     }
     $3_1 = ($2_1 | 0) != (0 | 0);
     label$4 : {
      if (!($1_1 & 3 | 0)) {
       break label$4
      }
      if (!$2_1) {
       break label$4
      }
      label$5 : while (1) {
       $3_1 = HEAPU8[$1_1 >> 0] | 0;
       HEAP8[$0_1 >> 0] = $3_1;
       if (!$3_1) {
        break label$1
       }
       $0_1 = $0_1 + 1 | 0;
       $2_1 = $2_1 + -1 | 0;
       $3_1 = ($2_1 | 0) != (0 | 0);
       $1_1 = $1_1 + 1 | 0;
       if (!($1_1 & 3 | 0)) {
        break label$4
       }
       if ($2_1) {
        continue label$5
       }
       break label$5;
      };
     }
     if (!$3_1) {
      break label$2
     }
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     label$6 : while (1) {
      $3_1 = HEAP32[$1_1 >> 2] | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$3
      }
      HEAP32[$0_1 >> 2] = $3_1;
      $0_1 = $0_1 + 4 | 0;
      $1_1 = $1_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$6
      }
      break label$6;
     };
    }
    if (!$2_1) {
     break label$2
    }
    label$7 : while (1) {
     $3_1 = HEAPU8[$1_1 >> 0] | 0;
     HEAP8[$0_1 >> 0] = $3_1;
     if (!$3_1) {
      break label$1
     }
     $0_1 = $0_1 + 1 | 0;
     $1_1 = $1_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if ($2_1) {
      continue label$7
     }
     break label$7;
    };
   }
   $2_1 = 0;
  }
  $200($0_1 | 0, 0 | 0, $2_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $159($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     if ($2_1 >>> 0 < 4 >>> 0) {
      break label$3
     }
     if (($1_1 | $0_1 | 0) & 3 | 0) {
      break label$2
     }
     label$4 : while (1) {
      if ((HEAP32[$0_1 >> 2] | 0 | 0) != (HEAP32[$1_1 >> 2] | 0 | 0)) {
       break label$2
      }
      $1_1 = $1_1 + 4 | 0;
      $0_1 = $0_1 + 4 | 0;
      $2_1 = $2_1 + -4 | 0;
      if ($2_1 >>> 0 > 3 >>> 0) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$2_1) {
     break label$1
    }
   }
   label$5 : {
    label$6 : while (1) {
     $3_1 = HEAPU8[$0_1 >> 0] | 0;
     $4_1 = HEAPU8[$1_1 >> 0] | 0;
     if (($3_1 | 0) != ($4_1 | 0)) {
      break label$5
     }
     $1_1 = $1_1 + 1 | 0;
     $0_1 = $0_1 + 1 | 0;
     $2_1 = $2_1 + -1 | 0;
     if (!$2_1) {
      break label$1
     }
     continue label$6;
    };
   }
   return $3_1 - $4_1 | 0 | 0;
  }
  return 0 | 0;
 }
 
 function $160($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $4_1 = 0, $3_1 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  i64toi32_i32$1 = $2_1 + 24 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1 + 16 | 0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$1 = $2_1;
  i64toi32_i32$0 = 0;
  HEAP32[(i64toi32_i32$1 + 8 | 0) >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 12 | 0) >> 2] = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  HEAP32[i64toi32_i32$1 >> 2] = 0;
  HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] = i64toi32_i32$0;
  label$1 : {
   $3_1 = HEAPU8[$1_1 >> 0] | 0;
   if ($3_1) {
    break label$1
   }
   return 0 | 0;
  }
  label$2 : {
   $4_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
   if ($4_1) {
    break label$2
   }
   $4_1 = $0_1;
   label$3 : while (1) {
    $1_1 = $4_1;
    $4_1 = $1_1 + 1 | 0;
    if ((HEAPU8[$1_1 >> 0] | 0 | 0) == ($3_1 | 0)) {
     continue label$3
    }
    break label$3;
   };
   return $1_1 - $0_1 | 0 | 0;
  }
  $5_1 = $2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0;
  HEAP32[$5_1 >> 2] = HEAP32[$5_1 >> 2] | 0 | (1 << $3_1 | 0) | 0;
  label$4 : while (1) {
   $3_1 = 1 << $4_1 | 0;
   $5_1 = $4_1 >>> 3 | 0;
   $4_1 = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
   $5_1 = $2_1 + ($5_1 & 28 | 0) | 0;
   HEAP32[$5_1 >> 2] = $3_1 | (HEAP32[$5_1 >> 2] | 0) | 0;
   $1_1 = $1_1 + 1 | 0;
   if ($4_1) {
    continue label$4
   }
   break label$4;
  };
  $3_1 = $0_1;
  label$5 : {
   $4_1 = HEAPU8[$3_1 >> 0] | 0;
   if (!$4_1) {
    break label$5
   }
   $1_1 = $0_1;
   label$6 : while (1) {
    label$7 : {
     if (((HEAP32[($2_1 + (($4_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $4_1 | 0) & 1 | 0) {
      break label$7
     }
     $3_1 = $1_1;
     break label$5;
    }
    $4_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = $1_1 + 1 | 0;
    $1_1 = $3_1;
    if ($4_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $3_1 - $0_1 | 0 | 0;
 }
 
 function $161($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $4_1 = 0, $2_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    label$3 : {
     $3_1 = HEAP8[$1_1 >> 0] | 0;
     if (!$3_1) {
      break label$3
     }
     if (HEAPU8[($1_1 + 1 | 0) >> 0] | 0) {
      break label$2
     }
    }
    $4_1 = $167($0_1 | 0, $3_1 | 0) | 0;
    break label$1;
   }
   $200($2_1 | 0, 0 | 0, 32 | 0) | 0;
   label$4 : {
    $3_1 = HEAPU8[$1_1 >> 0] | 0;
    if (!$3_1) {
     break label$4
    }
    label$5 : while (1) {
     $4_1 = $2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0;
     HEAP32[$4_1 >> 2] = HEAP32[$4_1 >> 2] | 0 | (1 << $3_1 | 0) | 0;
     $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
     $1_1 = $1_1 + 1 | 0;
     if ($3_1) {
      continue label$5
     }
     break label$5;
    };
   }
   $4_1 = $0_1;
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   $1_1 = $0_1;
   label$6 : while (1) {
    label$7 : {
     if (!(((HEAP32[($2_1 + (($3_1 >>> 3 | 0) & 28 | 0) | 0) >> 2] | 0) >>> $3_1 | 0) & 1 | 0)) {
      break label$7
     }
     $4_1 = $1_1;
     break label$1;
    }
    $3_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $4_1 = $1_1 + 1 | 0;
    $1_1 = $4_1;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  global$0 = $2_1 + 32 | 0;
  return $4_1 - $0_1 | 0 | 0;
 }
 
 function $162($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if ($0_1) {
     break label$2
    }
    $2_1 = 0;
    $0_1 = HEAP32[(0 + 14216 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$1
    }
   }
   label$3 : {
    $2_1 = $0_1 + ($160($0_1 | 0, $1_1 | 0) | 0) | 0;
    if (HEAPU8[$2_1 >> 0] | 0) {
     break label$3
    }
    HEAP32[(0 + 14216 | 0) >> 2] = 0;
    return 0 | 0;
   }
   label$4 : {
    $0_1 = $2_1 + ($161($2_1 | 0, $1_1 | 0) | 0) | 0;
    if (!(HEAPU8[$0_1 >> 0] | 0)) {
     break label$4
    }
    HEAP32[(0 + 14216 | 0) >> 2] = $0_1 + 1 | 0;
    HEAP8[$0_1 >> 0] = 0;
    return $2_1 | 0;
   }
   HEAP32[(0 + 14216 | 0) >> 2] = 0;
  }
  return $2_1 | 0;
 }
 
 function $163($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  $2_1 = HEAPU8[$1_1 >> 0] | 0;
  label$1 : {
   $3_1 = HEAPU8[$0_1 >> 0] | 0;
   if (!$3_1) {
    break label$1
   }
   if (($3_1 | 0) != ($2_1 & 255 | 0 | 0)) {
    break label$1
   }
   label$2 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    $3_1 = HEAPU8[($0_1 + 1 | 0) >> 0] | 0;
    if (!$3_1) {
     break label$1
    }
    $1_1 = $1_1 + 1 | 0;
    $0_1 = $0_1 + 1 | 0;
    if (($3_1 | 0) == ($2_1 & 255 | 0 | 0)) {
     continue label$2
    }
    break label$2;
   };
  }
  return $3_1 - ($2_1 & 255 | 0) | 0 | 0;
 }
 
 function $164($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  return $168($0_1 | 0, $1_1 | 0, ($208($0_1 | 0) | 0) + 1 | 0 | 0) | 0 | 0;
 }
 
 function $165($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $0_1 = $167($0_1 | 0, $1_1 | 0) | 0;
  return ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0) ? $0_1 : 0) | 0;
 }
 
 function $166($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0;
  $3_1 = ($2_1 | 0) != (0 | 0);
  label$1 : {
   label$2 : {
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     if (!$2_1) {
      break label$3
     }
     $4_1 = $1_1 & 255 | 0;
     label$4 : while (1) {
      if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($4_1 | 0)) {
       break label$2
      }
      $2_1 = $2_1 + -1 | 0;
      $3_1 = ($2_1 | 0) != (0 | 0);
      $0_1 = $0_1 + 1 | 0;
      if (!($0_1 & 3 | 0)) {
       break label$3
      }
      if ($2_1) {
       continue label$4
      }
      break label$4;
     };
    }
    if (!$3_1) {
     break label$1
    }
   }
   label$5 : {
    if ((HEAPU8[$0_1 >> 0] | 0 | 0) == ($1_1 & 255 | 0 | 0)) {
     break label$5
    }
    if ($2_1 >>> 0 < 4 >>> 0) {
     break label$5
    }
    $4_1 = Math_imul($1_1 & 255 | 0, 16843009);
    label$6 : while (1) {
     $3_1 = (HEAP32[$0_1 >> 2] | 0) ^ $4_1 | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $0_1 = $0_1 + 4 | 0;
     $2_1 = $2_1 + -4 | 0;
     if ($2_1 >>> 0 > 3 >>> 0) {
      continue label$6
     }
     break label$6;
    };
   }
   if (!$2_1) {
    break label$1
   }
   $3_1 = $1_1 & 255 | 0;
   label$7 : while (1) {
    label$8 : {
     if ((HEAPU8[$0_1 >> 0] | 0 | 0) != ($3_1 | 0)) {
      break label$8
     }
     return $0_1 | 0;
    }
    $0_1 = $0_1 + 1 | 0;
    $2_1 = $2_1 + -1 | 0;
    if ($2_1) {
     continue label$7
    }
    break label$7;
   };
  }
  return 0 | 0;
 }
 
 function $167($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $3_1 = 0, $2_1 = 0;
  label$1 : {
   label$2 : {
    $2_1 = $1_1 & 255 | 0;
    if (!$2_1) {
     break label$2
    }
    label$3 : {
     if (!($0_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $3_1 = HEAPU8[$0_1 >> 0] | 0;
      if (!$3_1) {
       break label$1
      }
      if (($3_1 | 0) == ($1_1 & 255 | 0 | 0)) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      if ($0_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    label$5 : {
     $3_1 = HEAP32[$0_1 >> 2] | 0;
     if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
      break label$5
     }
     $2_1 = Math_imul($2_1, 16843009);
     label$6 : while (1) {
      $3_1 = $3_1 ^ $2_1 | 0;
      if ((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
       break label$5
      }
      $3_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
      $0_1 = $0_1 + 4 | 0;
      if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
       continue label$6
      }
      break label$6;
     };
    }
    label$7 : {
     label$8 : while (1) {
      $3_1 = $0_1;
      $2_1 = HEAPU8[$3_1 >> 0] | 0;
      if (!$2_1) {
       break label$7
      }
      $0_1 = $3_1 + 1 | 0;
      if (($2_1 | 0) != ($1_1 & 255 | 0 | 0)) {
       continue label$8
      }
      break label$8;
     };
    }
    return $3_1 | 0;
   }
   return $0_1 + ($208($0_1 | 0) | 0) | 0 | 0;
  }
  return $0_1 | 0;
 }
 
 function $168($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $1_1 = $1_1 & 255 | 0;
  label$1 : while (1) {
   label$2 : {
    if ($2_1) {
     break label$2
    }
    return 0 | 0;
   }
   $2_1 = $2_1 + -1 | 0;
   $3_1 = $0_1 + $2_1 | 0;
   if ((HEAPU8[$3_1 >> 0] | 0 | 0) != ($1_1 | 0)) {
    continue label$1
   }
   break label$1;
  };
  return $3_1 | 0;
 }
 
 function $169($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $170($0_1 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $170($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$2
    }
    label$3 : {
     if (!($1_1 & 3 | 0)) {
      break label$3
     }
     label$4 : while (1) {
      $2_1 = HEAPU8[$1_1 >> 0] | 0;
      HEAP8[$0_1 >> 0] = $2_1;
      if (!$2_1) {
       break label$1
      }
      $0_1 = $0_1 + 1 | 0;
      $1_1 = $1_1 + 1 | 0;
      if ($1_1 & 3 | 0) {
       continue label$4
      }
      break label$4;
     };
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    if ((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0) {
     break label$2
    }
    label$5 : while (1) {
     HEAP32[$0_1 >> 2] = $2_1;
     $2_1 = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
     $0_1 = $0_1 + 4 | 0;
     $1_1 = $1_1 + 4 | 0;
     if (!((($2_1 ^ -1 | 0) & ($2_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
      continue label$5
     }
     break label$5;
    };
   }
   $2_1 = HEAPU8[$1_1 >> 0] | 0;
   HEAP8[$0_1 >> 0] = $2_1;
   if (!$2_1) {
    break label$1
   }
   label$6 : while (1) {
    $2_1 = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($0_1 + 1 | 0) >> 0] = $2_1;
    $0_1 = $0_1 + 1 | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($2_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $0_1 | 0;
 }
 
 function $171($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $169($0_1 + ($208($0_1 | 0) | 0) | 0 | 0, $1_1 | 0) | 0;
  return $0_1 | 0;
 }
 
 function $172($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1 >>> 0 < -4095 >>> 0) {
    break label$1
   }
   HEAP32[($174() | 0) >> 2] = 0 - $0_1 | 0;
   $0_1 = -1;
  }
  return $0_1 | 0;
 }
 
 function $173($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $5_1 = 0, $3_1 = 0, $4_1 = 0;
  label$1 : while (1) {
   $1_1 = $0_1;
   $0_1 = $1_1 + 1 | 0;
   if ($178(HEAP8[$1_1 >> 0] | 0 | 0) | 0) {
    continue label$1
   }
   break label$1;
  };
  $2_1 = 0;
  $3_1 = 0;
  $4_1 = 0;
  label$2 : {
   label$3 : {
    label$4 : {
     $5_1 = HEAP8[$1_1 >> 0] | 0;
     switch ($5_1 + -43 | 0 | 0) {
     case 0:
      break label$3;
     case 2:
      break label$4;
     default:
      break label$2;
     };
    }
    $3_1 = 1;
   }
   $5_1 = HEAP8[$0_1 >> 0] | 0;
   $1_1 = $0_1;
   $4_1 = $3_1;
  }
  label$5 : {
   if (!($179($5_1 | 0) | 0)) {
    break label$5
   }
   label$6 : while (1) {
    $2_1 = (Math_imul($2_1, 10) - (HEAP8[$1_1 >> 0] | 0) | 0) + 48 | 0;
    $0_1 = HEAP8[($1_1 + 1 | 0) >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    if ($179($0_1 | 0) | 0) {
     continue label$6
    }
    break label$6;
   };
  }
  return ($4_1 ? $2_1 : 0 - $2_1 | 0) | 0;
 }
 
 function $174() {
  return 14284 | 0;
 }
 
 function $175($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  return $177($0_1 | 0, $1_1 | 0, 0 | 0) | 0 | 0;
 }
 
 function $176() {
  return 11952 | 0;
 }
 
 function $177($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0;
  $3_1 = 1;
  label$1 : {
   label$2 : {
    if (!$0_1) {
     break label$2
    }
    if ($1_1 >>> 0 <= 127 >>> 0) {
     break label$1
    }
    label$3 : {
     label$4 : {
      if (HEAP32[(HEAP32[(($176() | 0) + 168 | 0) >> 2] | 0) >> 2] | 0) {
       break label$4
      }
      if (($1_1 & -128 | 0 | 0) == (57216 | 0)) {
       break label$1
      }
      HEAP32[($174() | 0) >> 2] = 25;
      break label$3;
     }
     label$5 : {
      if ($1_1 >>> 0 > 2047 >>> 0) {
       break label$5
      }
      HEAP8[($0_1 + 1 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 6 | 0 | 192 | 0;
      return 2 | 0;
     }
     label$6 : {
      label$7 : {
       if ($1_1 >>> 0 < 55296 >>> 0) {
        break label$7
       }
       if (($1_1 & -8192 | 0 | 0) != (57344 | 0)) {
        break label$6
       }
      }
      HEAP8[($0_1 + 2 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 12 | 0 | 224 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      return 3 | 0;
     }
     label$8 : {
      if (($1_1 + -65536 | 0) >>> 0 > 1048575 >>> 0) {
       break label$8
      }
      HEAP8[($0_1 + 3 | 0) >> 0] = $1_1 & 63 | 0 | 128 | 0;
      HEAP8[$0_1 >> 0] = $1_1 >>> 18 | 0 | 240 | 0;
      HEAP8[($0_1 + 2 | 0) >> 0] = ($1_1 >>> 6 | 0) & 63 | 0 | 128 | 0;
      HEAP8[($0_1 + 1 | 0) >> 0] = ($1_1 >>> 12 | 0) & 63 | 0 | 128 | 0;
      return 4 | 0;
     }
     HEAP32[($174() | 0) >> 2] = 25;
    }
    $3_1 = -1;
   }
   return $3_1 | 0;
  }
  HEAP8[$0_1 >> 0] = $1_1;
  return 1 | 0;
 }
 
 function $178($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 | 0) == (32 | 0) | ($0_1 + -9 | 0) >>> 0 < 5 >>> 0 | 0 | 0;
 }
 
 function $179($0_1) {
  $0_1 = $0_1 | 0;
  return ($0_1 + -48 | 0) >>> 0 < 10 >>> 0 | 0;
 }
 
 function $180($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $181($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $182($0_1) {
  $0_1 = $0_1 | 0;
  label$1 : {
   if ($0_1) {
    break label$1
   }
   return 0 | 0;
  }
  HEAP32[($174() | 0) >> 2] = $0_1;
  return -1 | 0;
 }
 
 function $183($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$3 = 0, $2_1 = 0, $3_1 = 0, $3$hi = 0, $4_1 = 0, $4$hi = 0, $17_1 = 0, $11_1 = 0, $19_1 = 0, $19$hi = 0, $23$hi = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    if ($1_1) {
     break label$2
    }
    i64toi32_i32$0 = 0;
    $3_1 = 0;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = 0;
    $4_1 = 0;
    $4$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 0;
   $11_1 = $1_1;
   $1_1 = Math_clz32($1_1);
   i64toi32_i32$1 = 0;
   $190($2_1 | 0, $11_1 | 0, i64toi32_i32$0 | 0, 0 | 0, i64toi32_i32$1 | 0, $1_1 + 81 | 0 | 0);
   i64toi32_i32$2 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   i64toi32_i32$2 = i64toi32_i32$1;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
   $19_1 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
   $19$hi = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$0 = 16414 - $1_1 | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $17_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $17_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $23$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $19$hi;
   i64toi32_i32$1 = $19_1;
   i64toi32_i32$0 = $23$hi;
   i64toi32_i32$3 = $17_1;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $4_1 = i64toi32_i32$4;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$2 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$2 >> 2] | 0;
   i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
   $3_1 = i64toi32_i32$5;
   $3$hi = i64toi32_i32$1;
  }
  i64toi32_i32$1 = $3$hi;
  i64toi32_i32$5 = $0_1;
  HEAP32[i64toi32_i32$5 >> 2] = $3_1;
  HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  HEAP32[(i64toi32_i32$5 + 8 | 0) >> 2] = $4_1;
  HEAP32[(i64toi32_i32$5 + 12 | 0) >> 2] = i64toi32_i32$1;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $184($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
     $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    $1_1 = $18_1;
    $1$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $2_1 = 0;
    $2$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $20_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $20_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $21_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
    $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $2_1 = $22_1;
   $2$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $185($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, $3_1 = 0, $2_1 = 0, $4_1 = 0, $16_1 = 0, $17_1 = 0, $18_1 = 0, $19_1 = 0, $20_1 = 0, $25_1 = 0, $25$hi = 0, $30_1 = 0, $32_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  $3_1 = 0;
  label$1 : {
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $1_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 48;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $16_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
    $16_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
   }
   $4_1 = $16_1 & 32767 | 0;
   if ($4_1 >>> 0 < 16383 >>> 0) {
    break label$1
   }
   label$2 : {
    if (($4_1 + -16383 | 0) >>> 0 < 32 >>> 0) {
     break label$2
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$0 = $1_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 63;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$1 >> 31 | 0;
     $17_1 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$2 = i64toi32_i32$1 >> i64toi32_i32$4 | 0;
     $17_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $17_1 ^ 2147483647 | 0;
    break label$1;
   }
   i64toi32_i32$2 = $0$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$0 = 65535;
   i64toi32_i32$3 = -1;
   i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$3 = 0;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $25_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $25$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$2 = $25$hi;
   $184($2_1 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $25_1 | 0, i64toi32_i32$2 | 0, 16495 - $4_1 | 0 | 0);
   $3_1 = HEAP32[$2_1 >> 2] | 0;
   $30_1 = $3_1;
   $32_1 = 0 - $3_1 | 0;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$1 = -1;
   i64toi32_i32$3 = -1;
   if ((i64toi32_i32$2 | 0) > (i64toi32_i32$1 | 0)) {
    $18_1 = 1
   } else {
    if ((i64toi32_i32$2 | 0) >= (i64toi32_i32$1 | 0)) {
     if (i64toi32_i32$0 >>> 0 <= i64toi32_i32$3 >>> 0) {
      $19_1 = 0
     } else {
      $19_1 = 1
     }
     $20_1 = $19_1;
    } else {
     $20_1 = 0
    }
    $18_1 = $20_1;
   }
   $3_1 = $18_1 ? $30_1 : $32_1;
  }
  global$0 = $2_1 + 16 | 0;
  return $3_1 | 0;
 }
 
 function $186($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = +$1_1;
  var i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$2 = 0, $5_1 = 0, $5$hi = 0, $2_1 = 0, $4_1 = 0, $4$hi = 0, $6_1 = 0, $6$hi = 0, $26_1 = 0, $27_1 = 0, $28_1 = 0, $29_1 = 0, $30_1 = 0, $3_1 = 0, $31_1 = 0, $32_1 = 0, $33_1 = 0, $33$hi = 0, $37_1 = 0, $50_1 = 0, $50$hi = 0, $54$hi = 0, $63_1 = 0, $63$hi = 0, $64_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    wasm2js_scratch_store_f64(+$1_1);
    i64toi32_i32$0 = wasm2js_scratch_load_i32(1 | 0) | 0;
    $4_1 = wasm2js_scratch_load_i32(0 | 0) | 0;
    $4$hi = i64toi32_i32$0;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1048576;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = 2145386495;
    i64toi32_i32$3 = -1;
    if (i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$0 = 60;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
     $26_1 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$2 | 0) | 0;
     $26_1 = i64toi32_i32$3 << i64toi32_i32$2 | 0;
    }
    $6_1 = $26_1;
    $6$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$0 = 4;
    i64toi32_i32$2 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $27_1 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$2 | 0;
     $27_1 = (((1 << i64toi32_i32$2 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$2 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$2 | 0) | 0;
    }
    i64toi32_i32$5 = $27_1;
    i64toi32_i32$1 = 1006632960;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$2;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$3 : {
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2146435072;
    i64toi32_i32$0 = 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$3
    }
    i64toi32_i32$3 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$5 = 60;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
     $28_1 = 0;
    } else {
     i64toi32_i32$4 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$1 | 0) | 0;
     $28_1 = i64toi32_i32$0 << i64toi32_i32$1 | 0;
    }
    $6_1 = $28_1;
    $6$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = 4;
    i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $29_1 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$4 >>> i64toi32_i32$1 | 0;
     $29_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
    }
    i64toi32_i32$4 = $29_1;
    i64toi32_i32$3 = 2147418112;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
    $5_1 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$3 = $5$hi;
    if (!!($5_1 | i64toi32_i32$3 | 0)) {
     break label$4
    }
    i64toi32_i32$3 = 0;
    $6_1 = 0;
    $6$hi = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    $5_1 = 0;
    $5$hi = i64toi32_i32$3;
    break label$1;
   }
   $32_1 = $2_1;
   i64toi32_i32$3 = $5$hi;
   $33_1 = $5_1;
   $33$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   $37_1 = Math_clz32($4_1) + 32 | 0;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$0 = $5_1;
   i64toi32_i32$4 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$4 = 0;
    $30_1 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
   } else {
    i64toi32_i32$4 = i64toi32_i32$3 >>> i64toi32_i32$1 | 0;
    $30_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$1 | 0) | 0;
   }
   i64toi32_i32$4 = $5$hi;
   i64toi32_i32$3 = $5_1;
   i64toi32_i32$0 = 1;
   i64toi32_i32$5 = 0;
   $3_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0 ? $37_1 : Math_clz32($30_1);
   i64toi32_i32$3 = $33$hi;
   i64toi32_i32$4 = 0;
   $190($32_1 | 0, $33_1 | 0, i64toi32_i32$3 | 0, 0 | 0, i64toi32_i32$4 | 0, $3_1 + 49 | 0 | 0);
   i64toi32_i32$5 = $2_1 + 8 | 0;
   i64toi32_i32$4 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   i64toi32_i32$5 = i64toi32_i32$4;
   i64toi32_i32$4 = 65536;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = i64toi32_i32$3 ^ i64toi32_i32$4 | 0;
   $50_1 = i64toi32_i32$5 ^ i64toi32_i32$0 | 0;
   $50$hi = i64toi32_i32$4;
   i64toi32_i32$4 = 0;
   i64toi32_i32$3 = 15372 - $3_1 | 0;
   i64toi32_i32$5 = 0;
   i64toi32_i32$0 = 48;
   i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
    $31_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $31_1 = i64toi32_i32$3 << i64toi32_i32$1 | 0;
   }
   $54$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $50$hi;
   i64toi32_i32$4 = $50_1;
   i64toi32_i32$3 = $54$hi;
   i64toi32_i32$0 = $31_1;
   i64toi32_i32$3 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$5 = $2_1;
   i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
   $6_1 = i64toi32_i32$3;
   $6$hi = i64toi32_i32$4;
  }
  i64toi32_i32$4 = $6$hi;
  i64toi32_i32$3 = $0_1;
  HEAP32[i64toi32_i32$3 >> 2] = $6_1;
  HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] = i64toi32_i32$4;
  i64toi32_i32$4 = $5$hi;
  i64toi32_i32$4 = $4$hi;
  i64toi32_i32$5 = $4_1;
  i64toi32_i32$3 = -2147483648;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
  $63_1 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
  $63$hi = i64toi32_i32$3;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$4 = $5_1;
  i64toi32_i32$5 = $63$hi;
  i64toi32_i32$0 = $63_1;
  i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
  $64_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
  i64toi32_i32$4 = $0_1;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $64_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$5;
  global$0 = $2_1 + 16 | 0;
 }
 
 function $187($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$1 = 0, $4_1 = 0, $4$hi = 0, $5$hi = 0, $5_1 = 0, $2_1 = 0, $3_1 = 0, $43_1 = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, $49_1 = 0, $50_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $17_1 = 0, $17$hi = 0, $19$hi = 0, $34_1 = 0, $34$hi = 0, $37_1 = 0, $39_1 = 0, $44_1 = 0, $44$hi = 0, $46$hi = 0, $74_1 = 0, $74$hi = 0, $78$hi = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $100$hi = 0, $107_1 = 0, $107$hi = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $4_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
    $4$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$2 = -1006698496;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$0 = -1140785152;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $0$hi;
    i64toi32_i32$3 = $0_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 60;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $43_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $43_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $43_1;
    $17$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$1 = 4;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
     $45_1 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$0 | 0) | 0;
     $45_1 = i64toi32_i32$5 << i64toi32_i32$0 | 0;
    }
    $19$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $17$hi;
    i64toi32_i32$4 = $17_1;
    i64toi32_i32$5 = $19$hi;
    i64toi32_i32$1 = $45_1;
    i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $4$hi = i64toi32_i32$5;
    label$3 : {
     i64toi32_i32$5 = $0$hi;
     i64toi32_i32$3 = $0_1;
     i64toi32_i32$4 = 268435455;
     i64toi32_i32$1 = -1;
     i64toi32_i32$4 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
     $0_1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
     $0$hi = i64toi32_i32$4;
     i64toi32_i32$5 = $0_1;
     i64toi32_i32$3 = 134217728;
     i64toi32_i32$1 = 1;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$3
     }
     i64toi32_i32$5 = $4$hi;
     i64toi32_i32$1 = $4_1;
     i64toi32_i32$4 = 1073741824;
     i64toi32_i32$3 = 1;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $5_1 = i64toi32_i32$0;
     $5$hi = i64toi32_i32$2;
     break label$1;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$1 = 1073741824;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
    }
    $5_1 = i64toi32_i32$4;
    $5$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $0$hi;
    i64toi32_i32$2 = $0_1;
    i64toi32_i32$5 = 134217728;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = i64toi32_i32$0 ^ i64toi32_i32$5 | 0;
    i64toi32_i32$0 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$0 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | 0) {
     break label$1
    }
    i64toi32_i32$0 = $5$hi;
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$3 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$5 = i64toi32_i32$0 & i64toi32_i32$5 | 0;
    $34_1 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
    $34$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$3 = $34$hi;
    i64toi32_i32$2 = $34_1;
    i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $5_1 = i64toi32_i32$1;
    $5$hi = i64toi32_i32$4;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $37_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$0 = 2147418112;
    i64toi32_i32$2 = 0;
    $39_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
    i64toi32_i32$5 = i64toi32_i32$4;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) | 0 ? $37_1 : $39_1) {
     break label$4
    }
    i64toi32_i32$2 = $0$hi;
    i64toi32_i32$0 = $0_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 60;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $46_1 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$2 >>> i64toi32_i32$3 | 0;
     $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$3 | 0) | 0;
    }
    $44_1 = $46_1;
    $44$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$4 = 4;
    i64toi32_i32$3 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
     $47_1 = 0;
    } else {
     i64toi32_i32$0 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
     $47_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
    }
    $46$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $44$hi;
    i64toi32_i32$5 = $44_1;
    i64toi32_i32$2 = $46$hi;
    i64toi32_i32$4 = $47_1;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$4 | 0;
    i64toi32_i32$5 = 524287;
    i64toi32_i32$4 = -1;
    i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    i64toi32_i32$0 = 2146959360;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $5_1 = i64toi32_i32$2 | i64toi32_i32$4 | 0;
    $5$hi = i64toi32_i32$0;
    break label$1;
   }
   i64toi32_i32$0 = 2146435072;
   $5_1 = 0;
   $5$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$5 = $4_1;
   i64toi32_i32$2 = 1140785151;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$0 >>> 0 > i64toi32_i32$2 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$5 = 0;
   $5_1 = 0;
   $5$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$2 = 48;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = 0;
    $48_1 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$3 | 0;
    $48_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $3_1 = $48_1;
   if ($3_1 >>> 0 < 15249 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = $0$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$2 = -1;
   i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
   i64toi32_i32$5 = 65536;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
   $4_1 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
   $4$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $0$hi;
   i64toi32_i32$0 = $4$hi;
   $190($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$5 | 0, $4_1 | 0, i64toi32_i32$0 | 0, $3_1 + -15233 | 0 | 0);
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = $4$hi;
   $184($2_1 | 0, $0_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$5 | 0, 15361 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$0 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $4_1 = i64toi32_i32$5;
   $4$hi = i64toi32_i32$0;
   i64toi32_i32$4 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 60;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = 0;
    $49_1 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
   } else {
    i64toi32_i32$5 = i64toi32_i32$0 >>> i64toi32_i32$3 | 0;
    $49_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$3 | 0) | 0;
   }
   $74_1 = $49_1;
   $74$hi = i64toi32_i32$5;
   i64toi32_i32$0 = $2_1 + 8 | 0;
   i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
   i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$5 = 0;
   i64toi32_i32$2 = 4;
   i64toi32_i32$3 = i64toi32_i32$2 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
    $50_1 = 0;
   } else {
    i64toi32_i32$5 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$3 | 0) | 0;
    $50_1 = i64toi32_i32$0 << i64toi32_i32$3 | 0;
   }
   $78$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $74$hi;
   i64toi32_i32$4 = $74_1;
   i64toi32_i32$0 = $78$hi;
   i64toi32_i32$2 = $50_1;
   i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
   $5_1 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
   $5$hi = i64toi32_i32$0;
   label$5 : {
    i64toi32_i32$0 = $4$hi;
    i64toi32_i32$5 = $4_1;
    i64toi32_i32$4 = 268435455;
    i64toi32_i32$2 = -1;
    i64toi32_i32$4 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
    $81_1 = i64toi32_i32$5 & i64toi32_i32$2 | 0;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
    i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$5;
    i64toi32_i32$0 = (i64toi32_i32$0 + 16 | 0) + 8 | 0;
    i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$5;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$0 = $83_1;
    i64toi32_i32$5 = $87$hi;
    i64toi32_i32$2 = $87_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$0 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$2 = $81_1;
    i64toi32_i32$5 = $90$hi;
    i64toi32_i32$0 = $89_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    $4_1 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
    $4$hi = i64toi32_i32$5;
    i64toi32_i32$4 = $4_1;
    i64toi32_i32$2 = 134217728;
    i64toi32_i32$0 = 1;
    if (i64toi32_i32$5 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$5
    }
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
    i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
    if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
    }
    $5_1 = i64toi32_i32$3;
    $5$hi = i64toi32_i32$1;
    break label$1;
   }
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$4 = $4_1;
   i64toi32_i32$0 = 134217728;
   i64toi32_i32$2 = 0;
   i64toi32_i32$0 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
   i64toi32_i32$1 = i64toi32_i32$4 ^ i64toi32_i32$2 | 0;
   i64toi32_i32$4 = 0;
   i64toi32_i32$2 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$4 | 0) | 0) {
    break label$1
   }
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$2 = $5_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$0 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
   $100$hi = i64toi32_i32$0;
   i64toi32_i32$0 = i64toi32_i32$1;
   i64toi32_i32$0 = $100$hi;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$4 | 0;
   i64toi32_i32$2 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $5_1 = i64toi32_i32$5;
   $5$hi = i64toi32_i32$3;
  }
  global$0 = $2_1 + 32 | 0;
  i64toi32_i32$3 = $5$hi;
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$0 = $1_1;
  i64toi32_i32$1 = -2147483648;
  i64toi32_i32$4 = 0;
  i64toi32_i32$1 = i64toi32_i32$3 & i64toi32_i32$1 | 0;
  $107_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
  $107$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $5$hi;
  i64toi32_i32$3 = $5_1;
  i64toi32_i32$0 = $107$hi;
  i64toi32_i32$4 = $107_1;
  i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
  wasm2js_scratch_store_i32(0 | 0, i64toi32_i32$3 | i64toi32_i32$4 | 0 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$0 | 0);
  return +(+wasm2js_scratch_load_f64());
 }
 
 function $188($0_1, $0$hi, $1_1, $1$hi) {
  $0_1 = $0_1 | 0;
  $0$hi = $0$hi | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$5 = 0, i64toi32_i32$0 = 0, $5_1 = 0, $5$hi = 0, $4_1 = 0, $3_1 = 0, $2_1 = 0, i64toi32_i32$2 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $12_1 = 0, $12$hi = 0, $14$hi = 0, $20_1 = 0, $24_1 = 0, $34_1 = 0, $34$hi = 0, $42_1 = 0, $44_1 = 0, $81_1 = 0, $81$hi = 0, $83_1 = 0, $83$hi = 0, $87_1 = 0, $87$hi = 0, $89_1 = 0, $90$hi = 0, $93_1 = 0, $97_1 = 0, $105_1 = 0, $105$hi = 0, $114_1 = 0;
  $2_1 = global$0 - 32 | 0;
  global$0 = $2_1;
  label$1 : {
   label$2 : {
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = 2147483647;
    i64toi32_i32$3 = -1;
    i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
    $5_1 = $1_1 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$1;
    i64toi32_i32$0 = $5_1;
    i64toi32_i32$2 = -1065418752;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
    i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
    }
    $12_1 = i64toi32_i32$4;
    $12$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $5$hi;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$0 = -1082064896;
    i64toi32_i32$3 = 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$5 = $12_1;
    i64toi32_i32$1 = $14$hi;
    i64toi32_i32$3 = i64toi32_i32$2;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$1 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$5 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
     break label$2
    }
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$3 = $1_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$1 = 25;
    i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$4 = 0;
     $37_1 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$0 | 0;
     $37_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $3_1 = $37_1;
    label$3 : {
     i64toi32_i32$4 = $0$hi;
     $20_1 = !($0_1 | i64toi32_i32$4 | 0);
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$1 = 33554431;
     i64toi32_i32$3 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
     $5_1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
     $5$hi = i64toi32_i32$3;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$1 = 16777216;
     $24_1 = i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$5 = 16777216;
     if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) | 0 ? $20_1 : $24_1) {
      break label$3
     }
     $4_1 = $3_1 + 1073741825 | 0;
     break label$1;
    }
    $4_1 = $3_1 + 1073741824 | 0;
    i64toi32_i32$1 = $0$hi;
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$5 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    i64toi32_i32$4 = i64toi32_i32$1 ^ i64toi32_i32$4 | 0;
    $34_1 = i64toi32_i32$5 ^ i64toi32_i32$3 | 0;
    $34$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $0$hi;
    i64toi32_i32$1 = $0_1;
    i64toi32_i32$5 = $34$hi;
    i64toi32_i32$3 = $34_1;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$5 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
    i64toi32_i32$1 = 0;
    i64toi32_i32$3 = 0;
    if ((i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | (i64toi32_i32$5 | 0) != (i64toi32_i32$1 | 0) | 0) {
     break label$1
    }
    $4_1 = $4_1 + ($3_1 & 1 | 0) | 0;
    break label$1;
   }
   label$4 : {
    i64toi32_i32$4 = $0$hi;
    $42_1 = !($0_1 | i64toi32_i32$4 | 0);
    i64toi32_i32$4 = $5$hi;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 2147418112;
    i64toi32_i32$1 = 0;
    $44_1 = i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
    i64toi32_i32$3 = i64toi32_i32$4;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 2147418112;
    i64toi32_i32$5 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & (i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) | 0 ? $42_1 : $44_1) {
     break label$4
    }
    i64toi32_i32$1 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$4 = 25;
    i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $38_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
     $38_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
    }
    $4_1 = $38_1 & 4194303 | 0 | 2143289344 | 0;
    break label$1;
   }
   $4_1 = 2139095040;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$1 = $5_1;
   i64toi32_i32$5 = 1082064895;
   i64toi32_i32$4 = -1;
   if (i64toi32_i32$3 >>> 0 > i64toi32_i32$5 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 > i64toi32_i32$4 >>> 0 | 0) | 0) {
    break label$1
   }
   $4_1 = 0;
   i64toi32_i32$1 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 48;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = 0;
    $39_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$3 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
    $39_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $3_1 = $39_1;
   if ($3_1 >>> 0 < 16145 >>> 0) {
    break label$1
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$4 = 65535;
   i64toi32_i32$5 = -1;
   i64toi32_i32$4 = i64toi32_i32$3 & i64toi32_i32$4 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   i64toi32_i32$1 = 65536;
   i64toi32_i32$5 = 0;
   i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
   $5_1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   $5$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   $190($2_1 + 16 | 0 | 0, $0_1 | 0, i64toi32_i32$1 | 0, $5_1 | 0, i64toi32_i32$3 | 0, $3_1 + -16129 | 0 | 0);
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$1 = $5$hi;
   $184($2_1 | 0, $0_1 | 0, i64toi32_i32$3 | 0, $5_1 | 0, i64toi32_i32$1 | 0, 16257 - $3_1 | 0 | 0);
   i64toi32_i32$4 = $2_1 + 8 | 0;
   i64toi32_i32$1 = HEAP32[i64toi32_i32$4 >> 2] | 0;
   i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] | 0;
   $5_1 = i64toi32_i32$1;
   $5$hi = i64toi32_i32$3;
   i64toi32_i32$4 = i64toi32_i32$1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 25;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $40_1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$0 | 0;
    $40_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$0 | 0) | 0;
   }
   $4_1 = $40_1;
   label$5 : {
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $81_1 = i64toi32_i32$1;
    $81$hi = i64toi32_i32$4;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 16 | 0) >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$3 + 20 | 0) >> 2] | 0;
    $83_1 = i64toi32_i32$4;
    $83$hi = i64toi32_i32$1;
    i64toi32_i32$3 = (i64toi32_i32$3 + 16 | 0) + 8 | 0;
    i64toi32_i32$1 = HEAP32[i64toi32_i32$3 >> 2] | 0;
    i64toi32_i32$4 = HEAP32[(i64toi32_i32$3 + 4 | 0) >> 2] | 0;
    $87_1 = i64toi32_i32$1;
    $87$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $83$hi;
    i64toi32_i32$3 = $83_1;
    i64toi32_i32$1 = $87$hi;
    i64toi32_i32$5 = $87_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 0;
    $89_1 = (i64toi32_i32$4 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$1 | 0) != (i64toi32_i32$3 | 0) | 0;
    i64toi32_i32$4 = 0;
    $90$hi = i64toi32_i32$4;
    i64toi32_i32$4 = $81$hi;
    i64toi32_i32$5 = $81_1;
    i64toi32_i32$1 = $90$hi;
    i64toi32_i32$3 = $89_1;
    i64toi32_i32$1 = i64toi32_i32$4 | i64toi32_i32$1 | 0;
    $0_1 = i64toi32_i32$5 | i64toi32_i32$3 | 0;
    $0$hi = i64toi32_i32$1;
    $93_1 = !($0_1 | i64toi32_i32$1 | 0);
    i64toi32_i32$1 = $5$hi;
    i64toi32_i32$4 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$3 = 33554431;
    i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
    $5_1 = i64toi32_i32$4 & i64toi32_i32$3 | 0;
    $5$hi = i64toi32_i32$5;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$4 = 0;
    i64toi32_i32$3 = 16777216;
    $97_1 = i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
    i64toi32_i32$1 = i64toi32_i32$5;
    i64toi32_i32$3 = $5_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$4 = 16777216;
    if ((i64toi32_i32$3 | 0) == (i64toi32_i32$4 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) | 0 ? $93_1 : $97_1) {
     break label$5
    }
    $4_1 = $4_1 + 1 | 0;
    break label$1;
   }
   i64toi32_i32$3 = $0$hi;
   i64toi32_i32$3 = $5$hi;
   i64toi32_i32$4 = $5_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 16777216;
   i64toi32_i32$1 = i64toi32_i32$3 ^ i64toi32_i32$1 | 0;
   $105_1 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
   $105$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $0$hi;
   i64toi32_i32$3 = $0_1;
   i64toi32_i32$4 = $105$hi;
   i64toi32_i32$5 = $105_1;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 0;
   if ((i64toi32_i32$1 | 0) != (i64toi32_i32$5 | 0) | (i64toi32_i32$4 | 0) != (i64toi32_i32$3 | 0) | 0) {
    break label$1
   }
   $4_1 = ($4_1 & 1 | 0) + $4_1 | 0;
  }
  global$0 = $2_1 + 32 | 0;
  $114_1 = $4_1;
  i64toi32_i32$1 = $1$hi;
  i64toi32_i32$5 = $1_1;
  i64toi32_i32$4 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$4 = 0;
   $41_1 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
  } else {
   i64toi32_i32$4 = i64toi32_i32$1 >>> i64toi32_i32$0 | 0;
   $41_1 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
  }
  return Math_fround((wasm2js_scratch_store_i32(2, $114_1 | ($41_1 & -2147483648 | 0) | 0), wasm2js_scratch_load_f32()));
 }
 
 function $189($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1, $3$hi, $4_1, $4$hi) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  $3$hi = $3$hi | 0;
  $4_1 = $4_1 | 0;
  $4$hi = $4$hi | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$5 = 0, i64toi32_i32$4 = 0, $5_1 = 0, $14$hi = 0, $14_1 = 0, $12$hi = 0, $11$hi = 0, $10$hi = 0, $15$hi = 0, $12_1 = 0, $6_1 = 0, $15_1 = 0, $11_1 = 0, $10_1 = 0, $18$hi = 0, $8_1 = 0, $18_1 = 0, $13$hi = 0, $16$hi = 0, $17$hi = 0, $7_1 = 0, $13_1 = 0, $16_1 = 0, $17_1 = 0, $19$hi = 0, $22$hi = 0, $19_1 = 0, $9_1 = 0, $20$hi = 0, $21$hi = 0, $23$hi = 0, $24$hi = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $237 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $242 = 0, $244 = 0, $246 = 0, $248 = 0, $249 = 0, $251 = 0, $252 = 0, $254 = 0, $256 = 0, $20_1 = 0, $257 = 0, $258 = 0, $21_1 = 0, $22_1 = 0, $259 = 0, $24_1 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $278 = 0, $29_1 = 0, $29$hi = 0, $31$hi = 0, $34_1 = 0, $34$hi = 0, $36$hi = 0, $39_1 = 0, $39$hi = 0, $43$hi = 0, $70_1 = 0, $74_1 = 0, $81_1 = 0, $85_1 = 0, $94_1 = 0, $94$hi = 0, $106_1 = 0, $106$hi = 0, $128_1 = 0, $129_1 = 0, $129$hi = 0, $130_1 = 0, $130$hi = 0, $137$hi = 0, $140$hi = 0, $150_1 = 0, $150$hi = 0, $155$hi = 0, $162_1 = 0, $163_1 = 0, $163$hi = 0, $164_1 = 0, $164$hi = 0, $171$hi = 0, $174$hi = 0, $186_1 = 0, $186$hi = 0, $191$hi = 0, $194_1 = 0, $194$hi = 0, $196$hi = 0, $207_1 = 0, $207$hi = 0, $215 = 0, $215$hi = 0, $222 = 0, $222$hi = 0, $227 = 0, $227$hi = 0, $236 = 0, $236$hi = 0, $243 = 0, $243$hi = 0, $245 = 0, $245$hi = 0, $247 = 0, $247$hi = 0, $250 = 0, $252$hi = 0, $253 = 0, $253$hi = 0, $255 = 0, $255$hi = 0, $264 = 0, $264$hi = 0, $269 = 0, $269$hi = 0, $277 = 0, $277$hi = 0, $280$hi = 0, $23_1 = 0, $296 = 0, $296$hi = 0, $300 = 0, $301 = 0, $301$hi = 0, $305 = 0, $305$hi = 0, $309 = 0, $310$hi = 0, $311 = 0, $311$hi = 0, $312 = 0, $312$hi = 0, $315 = 0, $316$hi = 0, $319 = 0, $320$hi = 0, $321$hi = 0, $325 = 0, $326$hi = 0, $327$hi = 0, $330 = 0, $330$hi = 0, $331 = 0, $331$hi = 0, $338 = 0, $338$hi = 0, $344 = 0, $344$hi = 0, $346$hi = 0, $347 = 0, $347$hi = 0, $348 = 0, $348$hi = 0, $349 = 0, $349$hi = 0, $351$hi = 0, $355 = 0, $356$hi = 0, $357 = 0, $357$hi = 0, $358 = 0, $358$hi = 0, $360 = 0, $360$hi = 0, $363 = 0, $364$hi = 0, $367 = 0, $368$hi = 0, $369$hi = 0, $372 = 0, $373$hi = 0, $375$hi = 0, $376 = 0, $376$hi = 0, $380 = 0, $381$hi = 0, $382 = 0, $382$hi = 0, $383 = 0, $383$hi = 0, $386 = 0, $387$hi = 0, $390 = 0, $391$hi = 0, $392$hi = 0, $396 = 0, $397$hi = 0, $407 = 0, $407$hi = 0, $409$hi = 0, $412 = 0, $412$hi = 0, $414$hi = 0, $418 = 0, $418$hi = 0, $420$hi = 0, $454 = 0, $454$hi = 0, $456 = 0, $456$hi = 0, $457 = 0, $457$hi = 0, $459 = 0, $459$hi = 0, $463 = 0, $463$hi = 0, $465 = 0, $466$hi = 0, $471 = 0, $471$hi = 0, $475 = 0, $475$hi = 0, $484$hi = 0, $486 = 0, $486$hi = 0, $492 = 0, $498 = 0, $498$hi = 0, $503 = 0, $504$hi = 0, $508 = 0, $508$hi = 0, $512 = 0, $512$hi = 0, $515 = 0, $515$hi = 0, $519 = 0, $520$hi = 0;
  $5_1 = global$0 - 96 | 0;
  global$0 = $5_1;
  i64toi32_i32$0 = $1$hi;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $228 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $228 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $228;
  $29$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$0 = $2_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $229 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $229 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $31$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $29$hi;
  i64toi32_i32$1 = $29_1;
  i64toi32_i32$0 = $31$hi;
  i64toi32_i32$3 = $229;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $10_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $10$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $230 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $230 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $34_1 = $230;
  $34$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 47;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   $231 = 0;
  } else {
   i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
   $231 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
  }
  $36$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $34$hi;
  i64toi32_i32$1 = $34_1;
  i64toi32_i32$0 = $36$hi;
  i64toi32_i32$3 = $231;
  i64toi32_i32$0 = i64toi32_i32$2 | i64toi32_i32$0 | 0;
  $11_1 = i64toi32_i32$1 | i64toi32_i32$3 | 0;
  $11$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $3$hi;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 49;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $232 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $232 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $39_1 = $232;
  $39$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$2 = i64toi32_i32$1 & i64toi32_i32$2 | 0;
  $12_1 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
  $12$hi = i64toi32_i32$2;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 15;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $233 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $233 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $43$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $39$hi;
  i64toi32_i32$2 = $39_1;
  i64toi32_i32$1 = $43$hi;
  i64toi32_i32$3 = $233;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  $13_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  $13$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$1 = $2$hi;
  i64toi32_i32$1 = $4$hi;
  i64toi32_i32$0 = $4_1;
  i64toi32_i32$2 = $2$hi;
  i64toi32_i32$3 = $2_1;
  i64toi32_i32$2 = i64toi32_i32$1 ^ i64toi32_i32$2 | 0;
  i64toi32_i32$1 = i64toi32_i32$0 ^ i64toi32_i32$3 | 0;
  i64toi32_i32$0 = -2147483648;
  i64toi32_i32$3 = 0;
  i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
  $14_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
  $14$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$2 = $2_1;
  i64toi32_i32$1 = 65535;
  i64toi32_i32$3 = -1;
  i64toi32_i32$1 = i64toi32_i32$0 & i64toi32_i32$1 | 0;
  $15_1 = i64toi32_i32$2 & i64toi32_i32$3 | 0;
  $15$hi = i64toi32_i32$1;
  i64toi32_i32$0 = $15_1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $234 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $234 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $16_1 = $234;
  $16$hi = i64toi32_i32$2;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$1 = $12_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 17;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = 0;
   $235 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$0 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
   $235 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  $17_1 = $235;
  $17$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $4$hi;
  i64toi32_i32$2 = $4_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 48;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $237 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $237 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $6_1 = $237 & 32767 | 0;
  label$1 : {
   label$2 : {
    label$3 : {
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 48;
     i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $238 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
      $238 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
     }
     $7_1 = $238 & 32767 | 0;
     if (($7_1 + -1 | 0) >>> 0 > 32765 >>> 0) {
      break label$3
     }
     $8_1 = 0;
     if (($6_1 + -1 | 0) >>> 0 < 32766 >>> 0) {
      break label$2
     }
    }
    label$4 : {
     i64toi32_i32$2 = $1$hi;
     $70_1 = !($1_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$0 = 2147483647;
     i64toi32_i32$3 = -1;
     i64toi32_i32$0 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
     $18_1 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
     $18$hi = i64toi32_i32$0;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     $74_1 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$3 = $18_1;
     i64toi32_i32$0 = 2147418112;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) == (i64toi32_i32$1 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) | 0 ? $70_1 : $74_1) {
      break label$4
     }
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$1 = $2_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$0 = 0;
     i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$5 : {
     i64toi32_i32$2 = $3$hi;
     $81_1 = !($3_1 | i64toi32_i32$2 | 0);
     i64toi32_i32$2 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$1 = 2147483647;
     i64toi32_i32$0 = -1;
     i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
     $2_1 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
     $2$hi = i64toi32_i32$1;
     i64toi32_i32$2 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$0 = 0;
     $85_1 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$3 = 0;
     if ((i64toi32_i32$0 | 0) == (i64toi32_i32$3 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) | 0 ? $81_1 : $85_1) {
      break label$5
     }
     i64toi32_i32$0 = $4$hi;
     i64toi32_i32$3 = $4_1;
     i64toi32_i32$2 = 32768;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $3$hi;
     $1_1 = $3_1;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$6 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$3 = i64toi32_i32$2 ^ i64toi32_i32$3 | 0;
     $94_1 = i64toi32_i32$0 ^ i64toi32_i32$1 | 0;
     $94$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $94$hi;
     i64toi32_i32$1 = $94_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$2 | 0) | 0) {
      break label$6
     }
     label$7 : {
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$3 = $2$hi;
      i64toi32_i32$3 = $3$hi;
      i64toi32_i32$1 = $3_1;
      i64toi32_i32$0 = $2$hi;
      i64toi32_i32$2 = $2_1;
      i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
      if (!!(i64toi32_i32$1 | i64toi32_i32$2 | 0 | i64toi32_i32$0 | 0)) {
       break label$7
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      i64toi32_i32$0 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$1 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
     $14$hi = i64toi32_i32$1;
     i64toi32_i32$1 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$1;
     break label$1;
    }
    label$8 : {
     i64toi32_i32$1 = $3$hi;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = 2147418112;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = i64toi32_i32$1 ^ i64toi32_i32$3 | 0;
     $106_1 = i64toi32_i32$0 ^ i64toi32_i32$2 | 0;
     $106$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$0 = $106$hi;
     i64toi32_i32$2 = $106_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     i64toi32_i32$3 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     if ((i64toi32_i32$3 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$8
     }
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$3 = $1$hi;
     i64toi32_i32$2 = $1_1;
     i64toi32_i32$0 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
     $2_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$0;
     label$9 : {
      i64toi32_i32$0 = $2$hi;
      if (!!($2_1 | i64toi32_i32$0 | 0)) {
       break label$9
      }
      i64toi32_i32$0 = 2147450880;
      $14_1 = 0;
      $14$hi = i64toi32_i32$0;
      break label$1;
     }
     i64toi32_i32$0 = $14$hi;
     i64toi32_i32$3 = $14_1;
     i64toi32_i32$2 = 2147418112;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $14_1 = i64toi32_i32$3 | i64toi32_i32$1 | 0;
     $14$hi = i64toi32_i32$2;
     break label$1;
    }
    label$10 : {
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $1_1;
     i64toi32_i32$3 = $18$hi;
     i64toi32_i32$1 = $18_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
     i64toi32_i32$0 = 0;
     i64toi32_i32$1 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$1 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$0 | 0) | 0) {
      break label$10
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    label$11 : {
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$1 = $3_1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$0 = $2_1;
     i64toi32_i32$3 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$0 = 0;
     if ((i64toi32_i32$2 | 0) != (i64toi32_i32$0 | 0) | (i64toi32_i32$3 | 0) != (i64toi32_i32$1 | 0) | 0) {
      break label$11
     }
     i64toi32_i32$2 = 0;
     $1_1 = 0;
     $1$hi = i64toi32_i32$2;
     break label$1;
    }
    $8_1 = 0;
    label$12 : {
     i64toi32_i32$2 = $18$hi;
     i64toi32_i32$0 = $18_1;
     i64toi32_i32$3 = 65535;
     i64toi32_i32$1 = -1;
     if (i64toi32_i32$2 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 > i64toi32_i32$1 >>> 0 | 0) | 0) {
      break label$12
     }
     $128_1 = $5_1 + 80 | 0;
     i64toi32_i32$0 = $1$hi;
     $129_1 = $1_1;
     $129$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $15$hi;
     $130_1 = $15_1;
     $130$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$0 = $15$hi;
     $8_1 = !($15_1 | i64toi32_i32$0 | 0);
     i64toi32_i32$4 = $8_1;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$3 = i64toi32_i32$4 ? $1_1 : $15_1;
     i64toi32_i32$1 = i64toi32_i32$4 ? i64toi32_i32$0 : i64toi32_i32$2;
     i64toi32_i32$0 = Math_clz32(i64toi32_i32$1);
     i64toi32_i32$4 = 0;
     if ((i64toi32_i32$0 | 0) == (32 | 0)) {
      $239 = Math_clz32(i64toi32_i32$3) + 32 | 0
     } else {
      $239 = i64toi32_i32$0
     }
     $137$hi = i64toi32_i32$4;
     i64toi32_i32$4 = 0;
     $140$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $137$hi;
     i64toi32_i32$3 = $239;
     i64toi32_i32$1 = $140$hi;
     i64toi32_i32$0 = $8_1 << 6 | 0;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $8_1 = i64toi32_i32$2;
     i64toi32_i32$5 = $129$hi;
     i64toi32_i32$3 = $130$hi;
     $190($128_1 | 0, $129_1 | 0, i64toi32_i32$5 | 0, $130_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$2 + -15 | 0 | 0);
     $8_1 = 16 - i64toi32_i32$2 | 0;
     i64toi32_i32$4 = $5_1;
     i64toi32_i32$3 = HEAP32[(i64toi32_i32$4 + 80 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$4 + 84 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$4 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $240 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $240 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$4 >>> i64toi32_i32$1 | 0) | 0;
     }
     $150_1 = $240;
     $150$hi = i64toi32_i32$3;
     i64toi32_i32$5 = $5_1 + 88 | 0;
     i64toi32_i32$3 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$4 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $15_1 = i64toi32_i32$3;
     $15$hi = i64toi32_i32$4;
     i64toi32_i32$5 = i64toi32_i32$3;
     i64toi32_i32$3 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
      $241 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
      $241 = i64toi32_i32$5 << i64toi32_i32$1 | 0;
     }
     $155$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $150$hi;
     i64toi32_i32$4 = $150_1;
     i64toi32_i32$5 = $155$hi;
     i64toi32_i32$0 = $241;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $10_1 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
     $10$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$3 = $15_1;
     i64toi32_i32$4 = 0;
     i64toi32_i32$0 = 32;
     i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = 0;
      $242 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
     } else {
      i64toi32_i32$4 = i64toi32_i32$5 >>> i64toi32_i32$1 | 0;
      $242 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$1 | 0) | 0;
     }
     $16_1 = $242;
     $16$hi = i64toi32_i32$4;
    }
    i64toi32_i32$4 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$3 = 65535;
    i64toi32_i32$0 = -1;
    if (i64toi32_i32$4 >>> 0 > i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$5 >>> 0 > i64toi32_i32$0 >>> 0 | 0) | 0) {
     break label$2
    }
    $162_1 = $5_1 + 64 | 0;
    i64toi32_i32$5 = $3$hi;
    $163_1 = $3_1;
    $163$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $12$hi;
    $164_1 = $12_1;
    $164$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$5 = $12$hi;
    $9_1 = !($12_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$1 = $9_1;
    i64toi32_i32$5 = $3$hi;
    i64toi32_i32$4 = $12$hi;
    i64toi32_i32$3 = i64toi32_i32$1 ? $3_1 : $12_1;
    i64toi32_i32$0 = i64toi32_i32$1 ? i64toi32_i32$5 : i64toi32_i32$4;
    i64toi32_i32$5 = Math_clz32(i64toi32_i32$0);
    i64toi32_i32$1 = 0;
    if ((i64toi32_i32$5 | 0) == (32 | 0)) {
     $244 = Math_clz32(i64toi32_i32$3) + 32 | 0
    } else {
     $244 = i64toi32_i32$5
    }
    $171$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $174$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $171$hi;
    i64toi32_i32$3 = $244;
    i64toi32_i32$0 = $174$hi;
    i64toi32_i32$5 = $9_1 << 6 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
    i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
    }
    $9_1 = i64toi32_i32$4;
    i64toi32_i32$2 = $163$hi;
    i64toi32_i32$3 = $164$hi;
    $190($162_1 | 0, $163_1 | 0, i64toi32_i32$2 | 0, $164_1 | 0, i64toi32_i32$3 | 0, i64toi32_i32$4 + -15 | 0 | 0);
    $8_1 = ($8_1 - i64toi32_i32$4 | 0) + 16 | 0;
    i64toi32_i32$1 = $5_1;
    i64toi32_i32$3 = HEAP32[(i64toi32_i32$1 + 64 | 0) >> 2] | 0;
    i64toi32_i32$2 = HEAP32[(i64toi32_i32$1 + 68 | 0) >> 2] | 0;
    $3_1 = i64toi32_i32$3;
    $3$hi = i64toi32_i32$2;
    i64toi32_i32$1 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 49;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = 0;
     $246 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$3 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $246 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$0 | 0) | 0;
    }
    $186_1 = $246;
    $186$hi = i64toi32_i32$3;
    i64toi32_i32$2 = $5_1 + 72 | 0;
    i64toi32_i32$3 = HEAP32[i64toi32_i32$2 >> 2] | 0;
    i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 4 | 0) >> 2] | 0;
    $2_1 = i64toi32_i32$3;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$2 = i64toi32_i32$3;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 15;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $248 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $248 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $191$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $186$hi;
    i64toi32_i32$1 = $186_1;
    i64toi32_i32$2 = $191$hi;
    i64toi32_i32$5 = $248;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $13_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $13$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $3$hi;
    i64toi32_i32$3 = $3_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $249 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $249 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $194_1 = $249;
    $194$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$2 = $2_1;
    i64toi32_i32$3 = 0;
    i64toi32_i32$5 = 47;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
     $251 = 0;
    } else {
     i64toi32_i32$3 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$0 | 0) | 0;
     $251 = i64toi32_i32$2 << i64toi32_i32$0 | 0;
    }
    $196$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $194$hi;
    i64toi32_i32$1 = $194_1;
    i64toi32_i32$2 = $196$hi;
    i64toi32_i32$5 = $251;
    i64toi32_i32$2 = i64toi32_i32$3 | i64toi32_i32$2 | 0;
    $11_1 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
    $11$hi = i64toi32_i32$2;
    i64toi32_i32$2 = $2$hi;
    i64toi32_i32$3 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$5 = 17;
    i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $252 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
     $252 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
    }
    $17_1 = $252;
    $17$hi = i64toi32_i32$1;
   }
   i64toi32_i32$1 = $11$hi;
   i64toi32_i32$2 = $11_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $2_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $2$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$1 = $1_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $4_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $4_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $19_1 = i64toi32_i32$1;
   $19$hi = i64toi32_i32$2;
   $207_1 = i64toi32_i32$1;
   $207$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $3$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$5 = 15;
   i64toi32_i32$0 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
    $254 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $254 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
   }
   i64toi32_i32$2 = $254;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = -32768;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $1_1 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
   $1$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $10$hi;
   i64toi32_i32$1 = $10_1;
   i64toi32_i32$2 = 0;
   i64toi32_i32$5 = -1;
   i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
   $3_1 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
   $3$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = $3$hi;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
   $215 = i64toi32_i32$1;
   $215$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $207$hi;
   i64toi32_i32$3 = $207_1;
   i64toi32_i32$1 = $215$hi;
   i64toi32_i32$5 = $215;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
   i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $10_1 = i64toi32_i32$0;
   $10$hi = i64toi32_i32$4;
   i64toi32_i32$2 = i64toi32_i32$0;
   i64toi32_i32$3 = 0;
   i64toi32_i32$5 = 32;
   i64toi32_i32$1 = i64toi32_i32$5 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$5 & 63 | 0) >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
    $256 = 0;
   } else {
    i64toi32_i32$3 = ((1 << i64toi32_i32$1 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$1 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$1 | 0) | 0;
    $256 = i64toi32_i32$2 << i64toi32_i32$1 | 0;
   }
   $12_1 = $256;
   $12$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $222 = i64toi32_i32$2;
   $222$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $12$hi;
   i64toi32_i32$4 = $12_1;
   i64toi32_i32$2 = $222$hi;
   i64toi32_i32$5 = $222;
   i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $11_1 = i64toi32_i32$1;
   $11$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $12$hi;
   i64toi32_i32$0 = $11$hi;
   i64toi32_i32$3 = i64toi32_i32$1;
   i64toi32_i32$4 = $12$hi;
   i64toi32_i32$5 = $12_1;
   i64toi32_i32$3 = 0;
   $227 = i64toi32_i32$0 >>> 0 < i64toi32_i32$4 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$4 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
   $227$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$3 = $3$hi;
   i64toi32_i32$3 = $2$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$3 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $20_1 = i64toi32_i32$0;
   $20$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $1$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$5 = $15_1;
   i64toi32_i32$0 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$0 = i64toi32_i32$3 & i64toi32_i32$0 | 0;
   $12_1 = i64toi32_i32$5 & i64toi32_i32$4 | 0;
   $12$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $12_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $236 = i64toi32_i32$5;
   $236$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $20$hi;
   i64toi32_i32$3 = $20_1;
   i64toi32_i32$5 = $236$hi;
   i64toi32_i32$4 = $236;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$4 | 0;
   i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
   }
   $18_1 = i64toi32_i32$2;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $13$hi;
   i64toi32_i32$0 = $13_1;
   i64toi32_i32$3 = 0;
   i64toi32_i32$4 = -1;
   i64toi32_i32$3 = i64toi32_i32$1 & i64toi32_i32$3 | 0;
   $15_1 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $15$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $4$hi;
   i64toi32_i32$3 = $15$hi;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$3 | 0, $4_1 | 0, i64toi32_i32$0 | 0) | 0;
   i64toi32_i32$3 = i64toi32_i32$HIGH_BITS;
   $243 = i64toi32_i32$0;
   $243$hi = i64toi32_i32$3;
   i64toi32_i32$3 = $18$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$0 = $243$hi;
   i64toi32_i32$4 = $243;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $13_1 = i64toi32_i32$5;
   $13$hi = i64toi32_i32$2;
   $245 = i64toi32_i32$5;
   $245$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $10$hi;
   i64toi32_i32$3 = $10_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 32;
   i64toi32_i32$0 = i64toi32_i32$4 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$4 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = 0;
    $257 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
   } else {
    i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$0 | 0;
    $257 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
   }
   $247 = $257;
   $247$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$1 = $19$hi;
   i64toi32_i32$1 = $10$hi;
   i64toi32_i32$2 = $10_1;
   i64toi32_i32$3 = $19$hi;
   i64toi32_i32$4 = $19_1;
   $250 = i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$2 = 0;
   i64toi32_i32$4 = $250;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$0 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
    $258 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$4 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$0 | 0) | 0;
    $258 = i64toi32_i32$4 << i64toi32_i32$0 | 0;
   }
   $252$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $247$hi;
   i64toi32_i32$2 = $247;
   i64toi32_i32$4 = $252$hi;
   i64toi32_i32$3 = $258;
   i64toi32_i32$4 = i64toi32_i32$1 | i64toi32_i32$4 | 0;
   $253 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $253$hi = i64toi32_i32$4;
   i64toi32_i32$4 = $245$hi;
   i64toi32_i32$1 = $245;
   i64toi32_i32$2 = $253$hi;
   i64toi32_i32$3 = $253;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$4 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $19_1 = i64toi32_i32$0;
   $19$hi = i64toi32_i32$5;
   $255 = i64toi32_i32$0;
   $255$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$5 = $12$hi;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$1 = $12$hi;
   i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
   $21_1 = i64toi32_i32$1;
   $21$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $1$hi;
   i64toi32_i32$5 = $16$hi;
   i64toi32_i32$4 = $16_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 65536;
   i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
   $10_1 = i64toi32_i32$4 | i64toi32_i32$3 | 0;
   $10$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$4 = $10$hi;
   i64toi32_i32$4 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$1 | 0, $10_1 | 0, i64toi32_i32$4 | 0) | 0;
   i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
   $264 = i64toi32_i32$4;
   $264$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $21$hi;
   i64toi32_i32$5 = $21_1;
   i64toi32_i32$4 = $264$hi;
   i64toi32_i32$3 = $264;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
   }
   $16_1 = i64toi32_i32$2;
   $16$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$0 = $3$hi;
   i64toi32_i32$0 = $15$hi;
   i64toi32_i32$5 = $3$hi;
   i64toi32_i32$5 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$0 | 0, $3_1 | 0, i64toi32_i32$5 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $269 = i64toi32_i32$5;
   $269$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $16$hi;
   i64toi32_i32$1 = i64toi32_i32$2;
   i64toi32_i32$5 = $269$hi;
   i64toi32_i32$3 = $269;
   i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
   if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $22_1 = i64toi32_i32$4;
   $22$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $17$hi;
   i64toi32_i32$0 = $17_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 2147483647;
   i64toi32_i32$1 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
   i64toi32_i32$2 = i64toi32_i32$0 & i64toi32_i32$3 | 0;
   i64toi32_i32$0 = 0;
   i64toi32_i32$3 = -2147483648;
   i64toi32_i32$0 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
   $1_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $1$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$0 = $1$hi;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$2 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, $4_1 | 0, i64toi32_i32$2 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $277 = i64toi32_i32$2;
   $277$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $22$hi;
   i64toi32_i32$1 = i64toi32_i32$4;
   i64toi32_i32$2 = $277$hi;
   i64toi32_i32$3 = $277;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
   i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
   }
   $17_1 = i64toi32_i32$5;
   $17$hi = i64toi32_i32$4;
   i64toi32_i32$0 = i64toi32_i32$5;
   i64toi32_i32$1 = 0;
   i64toi32_i32$3 = 32;
   i64toi32_i32$2 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$1 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
    $259 = 0;
   } else {
    i64toi32_i32$1 = ((1 << i64toi32_i32$2 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$2 | 0) | 0) | 0 | (i64toi32_i32$4 << i64toi32_i32$2 | 0) | 0;
    $259 = i64toi32_i32$0 << i64toi32_i32$2 | 0;
   }
   $280$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $255$hi;
   i64toi32_i32$4 = $255;
   i64toi32_i32$0 = $280$hi;
   i64toi32_i32$3 = $259;
   i64toi32_i32$2 = i64toi32_i32$4 + i64toi32_i32$3 | 0;
   i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
   }
   $23_1 = i64toi32_i32$2;
   $23$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $227$hi;
   i64toi32_i32$1 = $227;
   i64toi32_i32$4 = $23$hi;
   i64toi32_i32$3 = i64toi32_i32$2;
   i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $4_1 = i64toi32_i32$0;
   $4$hi = i64toi32_i32$2;
   $6_1 = (($7_1 + $6_1 | 0) + $8_1 | 0) + -16383 | 0;
   label$13 : {
    label$14 : {
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$2 = $12$hi;
     i64toi32_i32$2 = $15$hi;
     i64toi32_i32$1 = $12$hi;
     i64toi32_i32$1 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$2 | 0, $12_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $24_1 = i64toi32_i32$1;
     $24$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($2_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $296 = i64toi32_i32$1;
     $296$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $24$hi;
     i64toi32_i32$5 = $24_1;
     i64toi32_i32$1 = $296$hi;
     i64toi32_i32$3 = $296;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $2_1 = i64toi32_i32$4;
     $2$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $24$hi;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$2 = i64toi32_i32$4;
     i64toi32_i32$5 = $24$hi;
     i64toi32_i32$3 = $24_1;
     $300 = i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $301 = $300;
     $301$hi = i64toi32_i32$2;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$0 = $3$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $3_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $305 = i64toi32_i32$0;
     $305$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $2$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$0 = $305$hi;
     i64toi32_i32$5 = $305;
     i64toi32_i32$1 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
     i64toi32_i32$4 = i64toi32_i32$2 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$1;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$3 = $2$hi;
     i64toi32_i32$5 = $2_1;
     $309 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $310$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $301$hi;
     i64toi32_i32$5 = $301;
     i64toi32_i32$4 = $310$hi;
     i64toi32_i32$3 = $309;
     i64toi32_i32$0 = i64toi32_i32$5 + i64toi32_i32$3 | 0;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $311 = i64toi32_i32$0;
     $311$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $3$hi;
     $312 = $3_1;
     $312$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$1 = $20$hi;
     i64toi32_i32$1 = $18$hi;
     i64toi32_i32$2 = $18_1;
     i64toi32_i32$5 = $20$hi;
     i64toi32_i32$3 = $20_1;
     $315 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $316$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$2 = i64toi32_i32$1;
     i64toi32_i32$2 = $13$hi;
     i64toi32_i32$3 = $13_1;
     i64toi32_i32$5 = $18_1;
     $319 = i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$3 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $320$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $316$hi;
     i64toi32_i32$5 = $315;
     i64toi32_i32$2 = $320$hi;
     i64toi32_i32$1 = $319;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$1 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $321$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $312$hi;
     i64toi32_i32$3 = $312;
     i64toi32_i32$5 = $321$hi;
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = i64toi32_i32$3 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$2 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$2;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$2;
     i64toi32_i32$3 = $3$hi;
     i64toi32_i32$1 = $3_1;
     $325 = i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $326$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $311$hi;
     i64toi32_i32$1 = $311;
     i64toi32_i32$4 = $326$hi;
     i64toi32_i32$3 = $325;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
     i64toi32_i32$2 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
     }
     $327$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$2 = $10$hi;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$1 = $10$hi;
     i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$2 | 0, $10_1 | 0, i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$2 = i64toi32_i32$HIGH_BITS;
     $330 = i64toi32_i32$1;
     $330$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $327$hi;
     i64toi32_i32$0 = i64toi32_i32$5;
     i64toi32_i32$1 = $330$hi;
     i64toi32_i32$3 = $330;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $331 = i64toi32_i32$4;
     $331$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $12$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$0 = $12$hi;
     i64toi32_i32$0 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$5 | 0, $12_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $3_1 = i64toi32_i32$0;
     $3$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$5 = $10$hi;
     i64toi32_i32$5 = $15$hi;
     i64toi32_i32$0 = $10$hi;
     i64toi32_i32$0 = __wasm_i64_mul($15_1 | 0, i64toi32_i32$5 | 0, $10_1 | 0, i64toi32_i32$0 | 0) | 0;
     i64toi32_i32$5 = i64toi32_i32$HIGH_BITS;
     $338 = i64toi32_i32$0;
     $338$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     i64toi32_i32$2 = $3_1;
     i64toi32_i32$0 = $338$hi;
     i64toi32_i32$3 = $338;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $1_1 = i64toi32_i32$1;
     $1$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$3 = $3_1;
     i64toi32_i32$5 = 0;
     i64toi32_i32$3 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
      $260 = 0;
     } else {
      i64toi32_i32$4 = ((1 << i64toi32_i32$0 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$0 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$0 | 0) | 0;
      $260 = i64toi32_i32$3 << i64toi32_i32$0 | 0;
     }
     $344 = $260;
     $344$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$0 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = 0;
      $261 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$3 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $261 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$0 | 0) | 0;
     }
     $346$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $344$hi;
     i64toi32_i32$4 = $344;
     i64toi32_i32$5 = $346$hi;
     i64toi32_i32$2 = $261;
     i64toi32_i32$5 = i64toi32_i32$3 | i64toi32_i32$5 | 0;
     $347 = i64toi32_i32$4 | i64toi32_i32$2 | 0;
     $347$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $331$hi;
     i64toi32_i32$3 = $331;
     i64toi32_i32$4 = $347$hi;
     i64toi32_i32$2 = $347;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $348 = i64toi32_i32$0;
     $348$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $2$hi;
     $349 = $2_1;
     $349$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $1$hi;
     i64toi32_i32$5 = $1_1;
     i64toi32_i32$3 = 0;
     i64toi32_i32$2 = 32;
     i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
      i64toi32_i32$3 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
      $262 = 0;
     } else {
      i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
      $262 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     }
     $351$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $349$hi;
     i64toi32_i32$1 = $349;
     i64toi32_i32$5 = $351$hi;
     i64toi32_i32$2 = $262;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $1_1 = i64toi32_i32$4;
     $1$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $2$hi;
     i64toi32_i32$0 = $1$hi;
     i64toi32_i32$3 = i64toi32_i32$4;
     i64toi32_i32$1 = $2$hi;
     i64toi32_i32$2 = $2_1;
     $355 = i64toi32_i32$0 >>> 0 < i64toi32_i32$1 >>> 0 | ((i64toi32_i32$0 | 0) == (i64toi32_i32$1 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$3 = 0;
     $356$hi = i64toi32_i32$3;
     i64toi32_i32$3 = $348$hi;
     i64toi32_i32$2 = $348;
     i64toi32_i32$0 = $356$hi;
     i64toi32_i32$1 = $355;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$1 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $357 = i64toi32_i32$5;
     $357$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     $358 = $1_1;
     $358$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $17$hi;
     i64toi32_i32$3 = $17_1;
     i64toi32_i32$2 = 0;
     i64toi32_i32$1 = 32;
     i64toi32_i32$0 = i64toi32_i32$1 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = 0;
      $263 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
     } else {
      i64toi32_i32$2 = i64toi32_i32$4 >>> i64toi32_i32$0 | 0;
      $263 = (((1 << i64toi32_i32$0 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$0 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$0 | 0) | 0;
     }
     $360 = $263;
     $360$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$2 = $21$hi;
     i64toi32_i32$2 = $16$hi;
     i64toi32_i32$4 = $16_1;
     i64toi32_i32$3 = $21$hi;
     i64toi32_i32$1 = $21_1;
     $363 = i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$4 >>> 0 < i64toi32_i32$1 >>> 0 | 0) | 0;
     i64toi32_i32$4 = 0;
     $364$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$4 = i64toi32_i32$2;
     i64toi32_i32$4 = $22$hi;
     i64toi32_i32$1 = $22_1;
     i64toi32_i32$3 = $16_1;
     $367 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $368$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $364$hi;
     i64toi32_i32$3 = $363;
     i64toi32_i32$4 = $368$hi;
     i64toi32_i32$2 = $367;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $369$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$5 = $22$hi;
     i64toi32_i32$5 = $17$hi;
     i64toi32_i32$1 = $17_1;
     i64toi32_i32$3 = $22$hi;
     i64toi32_i32$2 = $22_1;
     $372 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $373$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $369$hi;
     i64toi32_i32$2 = i64toi32_i32$0;
     i64toi32_i32$5 = $373$hi;
     i64toi32_i32$3 = $372;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     i64toi32_i32$0 = i64toi32_i32$1 + i64toi32_i32$5 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     i64toi32_i32$1 = i64toi32_i32$4;
     i64toi32_i32$2 = 0;
     i64toi32_i32$3 = 32;
     i64toi32_i32$5 = i64toi32_i32$3 & 31 | 0;
     if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
      i64toi32_i32$2 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
      $265 = 0;
     } else {
      i64toi32_i32$2 = ((1 << i64toi32_i32$5 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$5 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$5 | 0) | 0;
      $265 = i64toi32_i32$1 << i64toi32_i32$5 | 0;
     }
     $375$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $360$hi;
     i64toi32_i32$0 = $360;
     i64toi32_i32$1 = $375$hi;
     i64toi32_i32$3 = $265;
     i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $376 = i64toi32_i32$0 | i64toi32_i32$3 | 0;
     $376$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $358$hi;
     i64toi32_i32$2 = $358;
     i64toi32_i32$0 = $376$hi;
     i64toi32_i32$3 = $376;
     i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
     i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
     if (i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $3_1 = i64toi32_i32$5;
     $3$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $1$hi;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$2 = $1$hi;
     i64toi32_i32$3 = $1_1;
     $380 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $381$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $357$hi;
     i64toi32_i32$3 = $357;
     i64toi32_i32$4 = $381$hi;
     i64toi32_i32$2 = $380;
     i64toi32_i32$0 = i64toi32_i32$3 + i64toi32_i32$2 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$0 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
     }
     $382 = i64toi32_i32$0;
     $382$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $3$hi;
     $383 = $3_1;
     $383$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$5 = $13$hi;
     i64toi32_i32$5 = $19$hi;
     i64toi32_i32$1 = $19_1;
     i64toi32_i32$3 = $13$hi;
     i64toi32_i32$2 = $13_1;
     $386 = i64toi32_i32$5 >>> 0 < i64toi32_i32$3 >>> 0 | ((i64toi32_i32$5 | 0) == (i64toi32_i32$3 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$2 >>> 0 | 0) | 0;
     i64toi32_i32$1 = 0;
     $387$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$1 = i64toi32_i32$5;
     i64toi32_i32$1 = $23$hi;
     i64toi32_i32$2 = $23_1;
     i64toi32_i32$3 = $19_1;
     $390 = i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$1 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$2 >>> 0 < i64toi32_i32$3 >>> 0 | 0) | 0;
     i64toi32_i32$2 = 0;
     $391$hi = i64toi32_i32$2;
     i64toi32_i32$2 = $387$hi;
     i64toi32_i32$3 = $386;
     i64toi32_i32$1 = $391$hi;
     i64toi32_i32$5 = $390;
     i64toi32_i32$4 = i64toi32_i32$3 + i64toi32_i32$5 | 0;
     i64toi32_i32$0 = i64toi32_i32$2 + i64toi32_i32$1 | 0;
     if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$0 = i64toi32_i32$0 + 1 | 0
     }
     $392$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $383$hi;
     i64toi32_i32$2 = $383;
     i64toi32_i32$3 = $392$hi;
     i64toi32_i32$5 = i64toi32_i32$4;
     i64toi32_i32$1 = i64toi32_i32$2 + i64toi32_i32$4 | 0;
     i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$3 | 0;
     if (i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0) {
      i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
     }
     $2_1 = i64toi32_i32$1;
     $2$hi = i64toi32_i32$4;
     i64toi32_i32$4 = $3$hi;
     i64toi32_i32$4 = $2$hi;
     i64toi32_i32$0 = i64toi32_i32$1;
     i64toi32_i32$2 = $3$hi;
     i64toi32_i32$5 = $3_1;
     $396 = i64toi32_i32$4 >>> 0 < i64toi32_i32$2 >>> 0 | ((i64toi32_i32$4 | 0) == (i64toi32_i32$2 | 0) & i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
     i64toi32_i32$0 = 0;
     $397$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $382$hi;
     i64toi32_i32$5 = $382;
     i64toi32_i32$4 = $397$hi;
     i64toi32_i32$2 = $396;
     i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$2 | 0;
     i64toi32_i32$1 = i64toi32_i32$0 + i64toi32_i32$4 | 0;
     if (i64toi32_i32$3 >>> 0 < i64toi32_i32$2 >>> 0) {
      i64toi32_i32$1 = i64toi32_i32$1 + 1 | 0
     }
     $1_1 = i64toi32_i32$3;
     $1$hi = i64toi32_i32$1;
     i64toi32_i32$0 = i64toi32_i32$3;
     i64toi32_i32$5 = 65536;
     i64toi32_i32$2 = 0;
     i64toi32_i32$5 = i64toi32_i32$1 & i64toi32_i32$5 | 0;
     if (!(i64toi32_i32$0 & i64toi32_i32$2 | 0 | i64toi32_i32$5 | 0)) {
      break label$14
     }
     $6_1 = $6_1 + 1 | 0;
     break label$13;
    }
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$1 = $11_1;
    i64toi32_i32$0 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$0 = 0;
     $266 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$0 = i64toi32_i32$5 >>> i64toi32_i32$4 | 0;
     $266 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$5 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
    }
    $3_1 = $266;
    $3$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$5 = $1_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $267 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $267 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $407 = $267;
    $407$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $268 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $268 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $409$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $407$hi;
    i64toi32_i32$1 = $407;
    i64toi32_i32$0 = $409$hi;
    i64toi32_i32$2 = $268;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $1_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $1$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $270 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $270 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $412 = $270;
    $412$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 63;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = 0;
     $271 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$5 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
     $271 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
    }
    $414$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $412$hi;
    i64toi32_i32$1 = $412;
    i64toi32_i32$0 = $414$hi;
    i64toi32_i32$2 = $271;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $2_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $2$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $11$hi;
    i64toi32_i32$5 = $11_1;
    i64toi32_i32$1 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $272 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $272 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $11_1 = $272;
    $11$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $3$hi;
    $418 = $3_1;
    $418$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $4$hi;
    i64toi32_i32$0 = $4_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$2 = 1;
    i64toi32_i32$4 = i64toi32_i32$2 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$2 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $273 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $273 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $420$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $418$hi;
    i64toi32_i32$1 = $418;
    i64toi32_i32$0 = $420$hi;
    i64toi32_i32$2 = $273;
    i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
    $4_1 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
    $4$hi = i64toi32_i32$0;
   }
   label$15 : {
    if (($6_1 | 0) < (32767 | 0)) {
     break label$15
    }
    i64toi32_i32$0 = $14$hi;
    i64toi32_i32$5 = $14_1;
    i64toi32_i32$1 = 2147418112;
    i64toi32_i32$2 = 0;
    i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
    $14_1 = i64toi32_i32$5 | i64toi32_i32$2 | 0;
    $14$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   label$16 : {
    label$17 : {
     if (($6_1 | 0) > (0 | 0)) {
      break label$17
     }
     label$18 : {
      $7_1 = 1 - $6_1 | 0;
      if ($7_1 >>> 0 < 128 >>> 0) {
       break label$18
      }
      i64toi32_i32$1 = 0;
      $1_1 = 0;
      $1$hi = i64toi32_i32$1;
      break label$1;
     }
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     $6_1 = $6_1 + 127 | 0;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $190($5_1 + 48 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $6_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $190($5_1 + 32 | 0 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $6_1 | 0);
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$1 = $4$hi;
     i64toi32_i32$1 = $11$hi;
     i64toi32_i32$5 = $4$hi;
     $184($5_1 + 16 | 0 | 0, $11_1 | 0, i64toi32_i32$1 | 0, $4_1 | 0, i64toi32_i32$5 | 0, $7_1 | 0);
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$5 = $1$hi;
     i64toi32_i32$5 = $2$hi;
     i64toi32_i32$1 = $1$hi;
     $184($5_1 | 0, $2_1 | 0, i64toi32_i32$5 | 0, $1_1 | 0, i64toi32_i32$1 | 0, $7_1 | 0);
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 32 | 0) >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 36 | 0) >> 2] | 0;
     $454 = i64toi32_i32$1;
     $454$hi = i64toi32_i32$5;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 16 | 0) >> 2] | 0;
     i64toi32_i32$1 = HEAP32[(i64toi32_i32$0 + 20 | 0) >> 2] | 0;
     $456 = i64toi32_i32$5;
     $456$hi = i64toi32_i32$1;
     i64toi32_i32$1 = $454$hi;
     i64toi32_i32$0 = $454;
     i64toi32_i32$5 = $456$hi;
     i64toi32_i32$2 = $456;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$5 | 0;
     $457 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $457$hi = i64toi32_i32$5;
     i64toi32_i32$1 = $5_1;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 48 | 0) >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$1 + 52 | 0) >> 2] | 0;
     $459 = i64toi32_i32$5;
     $459$hi = i64toi32_i32$0;
     i64toi32_i32$1 = (i64toi32_i32$1 + 48 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$1 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$1 + 4 | 0) >> 2] | 0;
     $463 = i64toi32_i32$0;
     $463$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $459$hi;
     i64toi32_i32$1 = $459;
     i64toi32_i32$0 = $463$hi;
     i64toi32_i32$2 = $463;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     i64toi32_i32$5 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
     i64toi32_i32$1 = 0;
     i64toi32_i32$2 = 0;
     $465 = (i64toi32_i32$5 | 0) != (i64toi32_i32$2 | 0) | (i64toi32_i32$0 | 0) != (i64toi32_i32$1 | 0) | 0;
     i64toi32_i32$5 = 0;
     $466$hi = i64toi32_i32$5;
     i64toi32_i32$5 = $457$hi;
     i64toi32_i32$2 = $457;
     i64toi32_i32$0 = $466$hi;
     i64toi32_i32$1 = $465;
     i64toi32_i32$0 = i64toi32_i32$5 | i64toi32_i32$0 | 0;
     $11_1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
     $11$hi = i64toi32_i32$0;
     i64toi32_i32$5 = ($5_1 + 32 | 0) + 8 | 0;
     i64toi32_i32$0 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $471 = i64toi32_i32$0;
     $471$hi = i64toi32_i32$2;
     i64toi32_i32$5 = ($5_1 + 16 | 0) + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$5 >> 2] | 0;
     i64toi32_i32$0 = HEAP32[(i64toi32_i32$5 + 4 | 0) >> 2] | 0;
     $475 = i64toi32_i32$2;
     $475$hi = i64toi32_i32$0;
     i64toi32_i32$0 = $471$hi;
     i64toi32_i32$5 = $471;
     i64toi32_i32$2 = $475$hi;
     i64toi32_i32$1 = $475;
     i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
     $4_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
     $4$hi = i64toi32_i32$2;
     i64toi32_i32$0 = $5_1 + 8 | 0;
     i64toi32_i32$2 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$5 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $1_1 = i64toi32_i32$2;
     $1$hi = i64toi32_i32$5;
     i64toi32_i32$0 = $5_1;
     i64toi32_i32$5 = HEAP32[i64toi32_i32$0 >> 2] | 0;
     i64toi32_i32$2 = HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] | 0;
     $2_1 = i64toi32_i32$5;
     $2$hi = i64toi32_i32$2;
     break label$16;
    }
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = $6_1;
    i64toi32_i32$5 = 0;
    i64toi32_i32$1 = 48;
    i64toi32_i32$4 = i64toi32_i32$1 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$1 & 63 | 0) >>> 0) {
     i64toi32_i32$5 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
     $274 = 0;
    } else {
     i64toi32_i32$5 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
     $274 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    }
    $484$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$0 = 65535;
    i64toi32_i32$1 = -1;
    i64toi32_i32$0 = i64toi32_i32$5 & i64toi32_i32$0 | 0;
    $486 = i64toi32_i32$2 & i64toi32_i32$1 | 0;
    $486$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $484$hi;
    i64toi32_i32$5 = $274;
    i64toi32_i32$2 = $486$hi;
    i64toi32_i32$1 = $486;
    i64toi32_i32$2 = i64toi32_i32$0 | i64toi32_i32$2 | 0;
    $1_1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    $1$hi = i64toi32_i32$2;
   }
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$2 = $14$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$5 = $14$hi;
   i64toi32_i32$1 = $14_1;
   i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
   $14_1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $14$hi = i64toi32_i32$5;
   label$19 : {
    i64toi32_i32$5 = $11$hi;
    $492 = !($11_1 | i64toi32_i32$5 | 0);
    i64toi32_i32$5 = $4$hi;
    i64toi32_i32$2 = $4_1;
    i64toi32_i32$0 = -1;
    i64toi32_i32$1 = -1;
    if ((i64toi32_i32$5 | 0) > (i64toi32_i32$0 | 0)) {
     $275 = 1
    } else {
     if ((i64toi32_i32$5 | 0) >= (i64toi32_i32$0 | 0)) {
      if (i64toi32_i32$2 >>> 0 <= i64toi32_i32$1 >>> 0) {
       $276 = 0
      } else {
       $276 = 1
      }
      $278 = $276;
     } else {
      $278 = 0
     }
     $275 = $278;
    }
    i64toi32_i32$2 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$1 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) | 0 ? $492 : $275) {
     break label$19
    }
    i64toi32_i32$1 = $14$hi;
    $498 = $14_1;
    $498$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $2$hi;
    i64toi32_i32$0 = $2_1;
    i64toi32_i32$2 = 0;
    i64toi32_i32$5 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 + i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
    if (i64toi32_i32$4 >>> 0 < i64toi32_i32$5 >>> 0) {
     i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
    }
    $1_1 = i64toi32_i32$4;
    $1$hi = i64toi32_i32$3;
    i64toi32_i32$3 = $2$hi;
    i64toi32_i32$3 = $1$hi;
    i64toi32_i32$1 = i64toi32_i32$4;
    i64toi32_i32$0 = $2$hi;
    i64toi32_i32$5 = $2_1;
    $503 = i64toi32_i32$3 >>> 0 < i64toi32_i32$0 >>> 0 | ((i64toi32_i32$3 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$5 >>> 0 | 0) | 0;
    i64toi32_i32$1 = 0;
    $504$hi = i64toi32_i32$1;
    i64toi32_i32$1 = $498$hi;
    i64toi32_i32$5 = $498;
    i64toi32_i32$3 = $504$hi;
    i64toi32_i32$0 = $503;
    i64toi32_i32$2 = i64toi32_i32$5 + i64toi32_i32$0 | 0;
    i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$3 | 0;
    if (i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0) {
     i64toi32_i32$4 = i64toi32_i32$4 + 1 | 0
    }
    $14_1 = i64toi32_i32$2;
    $14$hi = i64toi32_i32$4;
    break label$1;
   }
   label$20 : {
    i64toi32_i32$4 = $11$hi;
    i64toi32_i32$4 = $4$hi;
    i64toi32_i32$1 = $4_1;
    i64toi32_i32$5 = -2147483648;
    i64toi32_i32$0 = 0;
    i64toi32_i32$5 = i64toi32_i32$4 ^ i64toi32_i32$5 | 0;
    $508 = i64toi32_i32$1 ^ i64toi32_i32$0 | 0;
    $508$hi = i64toi32_i32$5;
    i64toi32_i32$5 = $11$hi;
    i64toi32_i32$4 = $11_1;
    i64toi32_i32$1 = $508$hi;
    i64toi32_i32$0 = $508;
    i64toi32_i32$1 = i64toi32_i32$5 | i64toi32_i32$1 | 0;
    i64toi32_i32$5 = i64toi32_i32$4 | i64toi32_i32$0 | 0;
    i64toi32_i32$4 = 0;
    i64toi32_i32$0 = 0;
    if ((i64toi32_i32$5 | 0) == (i64toi32_i32$0 | 0) & (i64toi32_i32$1 | 0) == (i64toi32_i32$4 | 0) | 0) {
     break label$20
    }
    i64toi32_i32$5 = $2$hi;
    $1_1 = $2_1;
    $1$hi = i64toi32_i32$5;
    break label$1;
   }
   i64toi32_i32$5 = $14$hi;
   $512 = $14_1;
   $512$hi = i64toi32_i32$5;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$0 = $2_1;
   i64toi32_i32$1 = 0;
   i64toi32_i32$4 = 1;
   i64toi32_i32$1 = i64toi32_i32$5 & i64toi32_i32$1 | 0;
   $515 = i64toi32_i32$0 & i64toi32_i32$4 | 0;
   $515$hi = i64toi32_i32$1;
   i64toi32_i32$1 = i64toi32_i32$5;
   i64toi32_i32$5 = i64toi32_i32$0;
   i64toi32_i32$0 = $515$hi;
   i64toi32_i32$4 = $515;
   i64toi32_i32$3 = i64toi32_i32$5 + i64toi32_i32$4 | 0;
   i64toi32_i32$2 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
   if (i64toi32_i32$3 >>> 0 < i64toi32_i32$4 >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$2 + 1 | 0
   }
   $1_1 = i64toi32_i32$3;
   $1$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = $1$hi;
   i64toi32_i32$1 = i64toi32_i32$3;
   i64toi32_i32$5 = $2$hi;
   i64toi32_i32$4 = $2_1;
   $519 = i64toi32_i32$2 >>> 0 < i64toi32_i32$5 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$5 | 0) & i64toi32_i32$1 >>> 0 < i64toi32_i32$4 >>> 0 | 0) | 0;
   i64toi32_i32$1 = 0;
   $520$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $512$hi;
   i64toi32_i32$4 = $512;
   i64toi32_i32$2 = $520$hi;
   i64toi32_i32$5 = $519;
   i64toi32_i32$0 = i64toi32_i32$4 + i64toi32_i32$5 | 0;
   i64toi32_i32$3 = i64toi32_i32$1 + i64toi32_i32$2 | 0;
   if (i64toi32_i32$0 >>> 0 < i64toi32_i32$5 >>> 0) {
    i64toi32_i32$3 = i64toi32_i32$3 + 1 | 0
   }
   $14_1 = i64toi32_i32$0;
   $14$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = $1$hi;
  i64toi32_i32$4 = $0_1;
  HEAP32[i64toi32_i32$4 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$4 + 4 | 0) >> 2] = i64toi32_i32$3;
  i64toi32_i32$3 = $14$hi;
  HEAP32[(i64toi32_i32$4 + 8 | 0) >> 2] = $14_1;
  HEAP32[(i64toi32_i32$4 + 12 | 0) >> 2] = i64toi32_i32$3;
  global$0 = $5_1 + 96 | 0;
 }
 
 function $190($0_1, $1_1, $1$hi, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$1 = 0, i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$0 = 0, i64toi32_i32$3 = 0, $4$hi = 0, $18_1 = 0, $20_1 = 0, $21_1 = 0, $22_1 = 0, $11$hi = 0, $18$hi = 0, $19_1 = 0, $19$hi = 0, $4_1 = 0, $24$hi = 0;
  label$1 : {
   label$2 : {
    if (!($3_1 & 64 | 0)) {
     break label$2
    }
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$0 = 0;
    $11$hi = i64toi32_i32$0;
    i64toi32_i32$0 = $1$hi;
    i64toi32_i32$2 = $1_1;
    i64toi32_i32$1 = $11$hi;
    i64toi32_i32$3 = $3_1 + -64 | 0;
    i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
     $18_1 = 0;
    } else {
     i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
     $18_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
    }
    $2_1 = $18_1;
    $2$hi = i64toi32_i32$1;
    i64toi32_i32$1 = 0;
    $1_1 = 0;
    $1$hi = i64toi32_i32$1;
    break label$1;
   }
   if (!$3_1) {
    break label$1
   }
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = 0;
   $18$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $18$hi;
   i64toi32_i32$3 = 64 - $3_1 | 0;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = 0;
    $20_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   } else {
    i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
    $20_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
   }
   $19_1 = $20_1;
   $19$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$2 = 0;
   $4_1 = $3_1;
   $4$hi = i64toi32_i32$2;
   i64toi32_i32$2 = $2$hi;
   i64toi32_i32$1 = $2_1;
   i64toi32_i32$0 = $4$hi;
   i64toi32_i32$3 = $3_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
    $21_1 = 0;
   } else {
    i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
    $21_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   }
   $24$hi = i64toi32_i32$0;
   i64toi32_i32$0 = $19$hi;
   i64toi32_i32$2 = $19_1;
   i64toi32_i32$1 = $24$hi;
   i64toi32_i32$3 = $21_1;
   i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
   $2_1 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
   $2$hi = i64toi32_i32$1;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$1 = $4$hi;
   i64toi32_i32$1 = $1$hi;
   i64toi32_i32$0 = $1_1;
   i64toi32_i32$2 = $4$hi;
   i64toi32_i32$3 = $4_1;
   i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
   if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
    i64toi32_i32$2 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
    $22_1 = 0;
   } else {
    i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$0 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
    $22_1 = i64toi32_i32$0 << i64toi32_i32$4 | 0;
   }
   $1_1 = $22_1;
   $1$hi = i64toi32_i32$2;
  }
  i64toi32_i32$2 = $1$hi;
  i64toi32_i32$0 = $0_1;
  HEAP32[i64toi32_i32$0 >> 2] = $1_1;
  HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$2;
  i64toi32_i32$2 = $2$hi;
  HEAP32[(i64toi32_i32$0 + 8 | 0) >> 2] = $2_1;
  HEAP32[(i64toi32_i32$0 + 12 | 0) >> 2] = i64toi32_i32$2;
 }
 
 function $191() {
  global$2 = 5258704;
  global$1 = (15816 + 15 | 0) & -16 | 0;
 }
 
 function $192() {
  return global$0 - global$1 | 0 | 0;
 }
 
 function $193() {
  return global$1 | 0;
 }
 
 function $194($0_1) {
  $0_1 = $0_1 | 0;
  var $4_1 = 0, $5_1 = 0, $6_1 = 0, $8_1 = 0, $3_1 = 0, $2_1 = 0, $11_1 = 0, $7_1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, $9_1 = 0, i64toi32_i32$2 = 0, $10_1 = 0, $1_1 = 0, $79_1 = 0, $92_1 = 0, $103_1 = 0, $111_1 = 0, $119_1 = 0, $210_1 = 0, $221 = 0, $229 = 0, $237 = 0, $272 = 0, $339 = 0, $346 = 0, $353 = 0, $444 = 0, $455 = 0, $463 = 0, $471 = 0, $1157 = 0, $1164 = 0, $1171 = 0, $1293 = 0, $1295 = 0, $1356 = 0, $1363 = 0, $1370 = 0, $1606 = 0, $1613 = 0, $1620 = 0;
  $1_1 = global$0 - 16 | 0;
  global$0 = $1_1;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             label$12 : {
              if ($0_1 >>> 0 > 244 >>> 0) {
               break label$12
              }
              label$13 : {
               $2_1 = HEAP32[(0 + 14288 | 0) >> 2] | 0;
               $3_1 = $0_1 >>> 0 < 11 >>> 0 ? 16 : ($0_1 + 11 | 0) & -8 | 0;
               $4_1 = $3_1 >>> 3 | 0;
               $0_1 = $2_1 >>> $4_1 | 0;
               if (!($0_1 & 3 | 0)) {
                break label$13
               }
               $5_1 = (($0_1 ^ -1 | 0) & 1 | 0) + $4_1 | 0;
               $6_1 = $5_1 << 3 | 0;
               $4_1 = HEAP32[($6_1 + 14336 | 0) >> 2] | 0;
               $0_1 = $4_1 + 8 | 0;
               label$14 : {
                label$15 : {
                 $3_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $6_1 = $6_1 + 14328 | 0;
                 if (($3_1 | 0) != ($6_1 | 0)) {
                  break label$15
                 }
                 HEAP32[(0 + 14288 | 0) >> 2] = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                 break label$14;
                }
                HEAP32[($3_1 + 12 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 8 | 0) >> 2] = $3_1;
               }
               $5_1 = $5_1 << 3 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 3 | 0;
               $4_1 = $4_1 + $5_1 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = HEAP32[($4_1 + 4 | 0) >> 2] | 0 | 1 | 0;
               break label$1;
              }
              $7_1 = HEAP32[(0 + 14296 | 0) >> 2] | 0;
              if ($3_1 >>> 0 <= $7_1 >>> 0) {
               break label$11
              }
              label$16 : {
               if (!$0_1) {
                break label$16
               }
               label$17 : {
                label$18 : {
                 $79_1 = $0_1 << $4_1 | 0;
                 $0_1 = 2 << $4_1 | 0;
                 $0_1 = $79_1 & ($0_1 | (0 - $0_1 | 0) | 0) | 0;
                 $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                 $92_1 = $0_1;
                 $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                 $4_1 = $92_1 >>> $0_1 | 0;
                 $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
                 $103_1 = $5_1 | $0_1 | 0;
                 $0_1 = $4_1 >>> $5_1 | 0;
                 $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                 $111_1 = $103_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                 $119_1 = $111_1 | $4_1 | 0;
                 $0_1 = $0_1 >>> $4_1 | 0;
                 $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                 $5_1 = ($119_1 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0;
                 $6_1 = $5_1 << 3 | 0;
                 $4_1 = HEAP32[($6_1 + 14336 | 0) >> 2] | 0;
                 $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
                 $6_1 = $6_1 + 14328 | 0;
                 if (($0_1 | 0) != ($6_1 | 0)) {
                  break label$18
                 }
                 $2_1 = $2_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
                 HEAP32[(0 + 14288 | 0) >> 2] = $2_1;
                 break label$17;
                }
                HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
                HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               }
               $0_1 = $4_1 + 8 | 0;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               $6_1 = $4_1 + $3_1 | 0;
               $8_1 = $5_1 << 3 | 0;
               $5_1 = $8_1 - $3_1 | 0;
               HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($4_1 + $8_1 | 0) >> 2] = $5_1;
               label$19 : {
                if (!$7_1) {
                 break label$19
                }
                $8_1 = $7_1 >>> 3 | 0;
                $3_1 = ($8_1 << 3 | 0) + 14328 | 0;
                $4_1 = HEAP32[(0 + 14308 | 0) >> 2] | 0;
                label$20 : {
                 label$21 : {
                  $8_1 = 1 << $8_1 | 0;
                  if ($2_1 & $8_1 | 0) {
                   break label$21
                  }
                  HEAP32[(0 + 14288 | 0) >> 2] = $2_1 | $8_1 | 0;
                  $8_1 = $3_1;
                  break label$20;
                 }
                 $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
                }
                HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
                HEAP32[($8_1 + 12 | 0) >> 2] = $4_1;
                HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
                HEAP32[($4_1 + 8 | 0) >> 2] = $8_1;
               }
               HEAP32[(0 + 14308 | 0) >> 2] = $6_1;
               HEAP32[(0 + 14296 | 0) >> 2] = $5_1;
               break label$1;
              }
              $9_1 = HEAP32[(0 + 14292 | 0) >> 2] | 0;
              if (!$9_1) {
               break label$11
              }
              $0_1 = ($9_1 & (0 - $9_1 | 0) | 0) + -1 | 0;
              $210_1 = $0_1;
              $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
              $4_1 = $210_1 >>> $0_1 | 0;
              $5_1 = ($4_1 >>> 5 | 0) & 8 | 0;
              $221 = $5_1 | $0_1 | 0;
              $0_1 = $4_1 >>> $5_1 | 0;
              $4_1 = ($0_1 >>> 2 | 0) & 4 | 0;
              $229 = $221 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 2 | 0;
              $237 = $229 | $4_1 | 0;
              $0_1 = $0_1 >>> $4_1 | 0;
              $4_1 = ($0_1 >>> 1 | 0) & 1 | 0;
              $6_1 = HEAP32[(((($237 | $4_1 | 0) + ($0_1 >>> $4_1 | 0) | 0) << 2 | 0) + 14592 | 0) >> 2] | 0;
              $4_1 = ((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
              $5_1 = $6_1;
              label$22 : {
               label$23 : while (1) {
                label$24 : {
                 $0_1 = HEAP32[($5_1 + 16 | 0) >> 2] | 0;
                 if ($0_1) {
                  break label$24
                 }
                 $0_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 if (!$0_1) {
                  break label$22
                 }
                }
                $5_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                $272 = $5_1;
                $5_1 = $5_1 >>> 0 < $4_1 >>> 0;
                $4_1 = $5_1 ? $272 : $4_1;
                $6_1 = $5_1 ? $0_1 : $6_1;
                $5_1 = $0_1;
                continue label$23;
               };
              }
              $10_1 = HEAP32[($6_1 + 24 | 0) >> 2] | 0;
              label$25 : {
               $8_1 = HEAP32[($6_1 + 12 | 0) >> 2] | 0;
               if (($8_1 | 0) == ($6_1 | 0)) {
                break label$25
               }
               $0_1 = HEAP32[($6_1 + 8 | 0) >> 2] | 0;
               HEAP32[(0 + 14304 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $8_1;
               HEAP32[($8_1 + 8 | 0) >> 2] = $0_1;
               break label$2;
              }
              label$26 : {
               $5_1 = $6_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                break label$26
               }
               $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$10
               }
               $5_1 = $6_1 + 16 | 0;
              }
              label$27 : while (1) {
               $11_1 = $5_1;
               $8_1 = $0_1;
               $5_1 = $0_1 + 20 | 0;
               $0_1 = HEAP32[$5_1 >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               $5_1 = $8_1 + 16 | 0;
               $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$27
               }
               break label$27;
              };
              HEAP32[$11_1 >> 2] = 0;
              break label$2;
             }
             $3_1 = -1;
             if ($0_1 >>> 0 > -65 >>> 0) {
              break label$11
             }
             $0_1 = $0_1 + 11 | 0;
             $3_1 = $0_1 & -8 | 0;
             $7_1 = HEAP32[(0 + 14292 | 0) >> 2] | 0;
             if (!$7_1) {
              break label$11
             }
             $11_1 = 0;
             label$28 : {
              if ($3_1 >>> 0 < 256 >>> 0) {
               break label$28
              }
              $11_1 = 31;
              if ($3_1 >>> 0 > 16777215 >>> 0) {
               break label$28
              }
              $0_1 = $0_1 >>> 8 | 0;
              $339 = $0_1;
              $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
              $4_1 = $339 << $0_1 | 0;
              $346 = $4_1;
              $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
              $5_1 = $346 << $4_1 | 0;
              $353 = $5_1;
              $5_1 = (($5_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
              $0_1 = (($353 << $5_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $5_1 | 0) | 0;
              $11_1 = ($0_1 << 1 | 0 | (($3_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
             }
             $4_1 = 0 - $3_1 | 0;
             label$29 : {
              label$30 : {
               label$31 : {
                label$32 : {
                 $5_1 = HEAP32[(($11_1 << 2 | 0) + 14592 | 0) >> 2] | 0;
                 if ($5_1) {
                  break label$32
                 }
                 $0_1 = 0;
                 $8_1 = 0;
                 break label$31;
                }
                $0_1 = 0;
                $6_1 = $3_1 << (($11_1 | 0) == (31 | 0) ? 0 : 25 - ($11_1 >>> 1 | 0) | 0) | 0;
                $8_1 = 0;
                label$33 : while (1) {
                 label$34 : {
                  $2_1 = ((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
                  if ($2_1 >>> 0 >= $4_1 >>> 0) {
                   break label$34
                  }
                  $4_1 = $2_1;
                  $8_1 = $5_1;
                  if ($4_1) {
                   break label$34
                  }
                  $4_1 = 0;
                  $8_1 = $5_1;
                  $0_1 = $5_1;
                  break label$30;
                 }
                 $2_1 = HEAP32[($5_1 + 20 | 0) >> 2] | 0;
                 $5_1 = HEAP32[(($5_1 + (($6_1 >>> 29 | 0) & 4 | 0) | 0) + 16 | 0) >> 2] | 0;
                 $0_1 = $2_1 ? (($2_1 | 0) == ($5_1 | 0) ? $0_1 : $2_1) : $0_1;
                 $6_1 = $6_1 << 1 | 0;
                 if ($5_1) {
                  continue label$33
                 }
                 break label$33;
                };
               }
               label$35 : {
                if ($0_1 | $8_1 | 0) {
                 break label$35
                }
                $8_1 = 0;
                $0_1 = 2 << $11_1 | 0;
                $0_1 = ($0_1 | (0 - $0_1 | 0) | 0) & $7_1 | 0;
                if (!$0_1) {
                 break label$11
                }
                $0_1 = ($0_1 & (0 - $0_1 | 0) | 0) + -1 | 0;
                $444 = $0_1;
                $0_1 = ($0_1 >>> 12 | 0) & 16 | 0;
                $5_1 = $444 >>> $0_1 | 0;
                $6_1 = ($5_1 >>> 5 | 0) & 8 | 0;
                $455 = $6_1 | $0_1 | 0;
                $0_1 = $5_1 >>> $6_1 | 0;
                $5_1 = ($0_1 >>> 2 | 0) & 4 | 0;
                $463 = $455 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 2 | 0;
                $471 = $463 | $5_1 | 0;
                $0_1 = $0_1 >>> $5_1 | 0;
                $5_1 = ($0_1 >>> 1 | 0) & 1 | 0;
                $0_1 = HEAP32[(((($471 | $5_1 | 0) + ($0_1 >>> $5_1 | 0) | 0) << 2 | 0) + 14592 | 0) >> 2] | 0;
               }
               if (!$0_1) {
                break label$29
               }
              }
              label$36 : while (1) {
               $2_1 = ((HEAP32[($0_1 + 4 | 0) >> 2] | 0) & -8 | 0) - $3_1 | 0;
               $6_1 = $2_1 >>> 0 < $4_1 >>> 0;
               label$37 : {
                $5_1 = HEAP32[($0_1 + 16 | 0) >> 2] | 0;
                if ($5_1) {
                 break label$37
                }
                $5_1 = HEAP32[($0_1 + 20 | 0) >> 2] | 0;
               }
               $4_1 = $6_1 ? $2_1 : $4_1;
               $8_1 = $6_1 ? $0_1 : $8_1;
               $0_1 = $5_1;
               if ($0_1) {
                continue label$36
               }
               break label$36;
              };
             }
             if (!$8_1) {
              break label$11
             }
             if ($4_1 >>> 0 >= ((HEAP32[(0 + 14296 | 0) >> 2] | 0) - $3_1 | 0) >>> 0) {
              break label$11
             }
             $11_1 = HEAP32[($8_1 + 24 | 0) >> 2] | 0;
             label$38 : {
              $6_1 = HEAP32[($8_1 + 12 | 0) >> 2] | 0;
              if (($6_1 | 0) == ($8_1 | 0)) {
               break label$38
              }
              $0_1 = HEAP32[($8_1 + 8 | 0) >> 2] | 0;
              HEAP32[(0 + 14304 | 0) >> 2] | 0;
              HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
              HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
              break label$3;
             }
             label$39 : {
              $5_1 = $8_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               break label$39
              }
              $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$9
              }
              $5_1 = $8_1 + 16 | 0;
             }
             label$40 : while (1) {
              $2_1 = $5_1;
              $6_1 = $0_1;
              $5_1 = $0_1 + 20 | 0;
              $0_1 = HEAP32[$5_1 >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              $5_1 = $6_1 + 16 | 0;
              $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
              if ($0_1) {
               continue label$40
              }
              break label$40;
             };
             HEAP32[$2_1 >> 2] = 0;
             break label$3;
            }
            label$41 : {
             $0_1 = HEAP32[(0 + 14296 | 0) >> 2] | 0;
             if ($0_1 >>> 0 < $3_1 >>> 0) {
              break label$41
             }
             $4_1 = HEAP32[(0 + 14308 | 0) >> 2] | 0;
             label$42 : {
              label$43 : {
               $5_1 = $0_1 - $3_1 | 0;
               if ($5_1 >>> 0 < 16 >>> 0) {
                break label$43
               }
               HEAP32[(0 + 14296 | 0) >> 2] = $5_1;
               $6_1 = $4_1 + $3_1 | 0;
               HEAP32[(0 + 14308 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
               HEAP32[($4_1 + $0_1 | 0) >> 2] = $5_1;
               HEAP32[($4_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
               break label$42;
              }
              HEAP32[(0 + 14308 | 0) >> 2] = 0;
              HEAP32[(0 + 14296 | 0) >> 2] = 0;
              HEAP32[($4_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
              $0_1 = $4_1 + $0_1 | 0;
              HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
             }
             $0_1 = $4_1 + 8 | 0;
             break label$1;
            }
            label$44 : {
             $6_1 = HEAP32[(0 + 14300 | 0) >> 2] | 0;
             if ($6_1 >>> 0 <= $3_1 >>> 0) {
              break label$44
             }
             $4_1 = $6_1 - $3_1 | 0;
             HEAP32[(0 + 14300 | 0) >> 2] = $4_1;
             $0_1 = HEAP32[(0 + 14312 | 0) >> 2] | 0;
             $5_1 = $0_1 + $3_1 | 0;
             HEAP32[(0 + 14312 | 0) >> 2] = $5_1;
             HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
             HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
             $0_1 = $0_1 + 8 | 0;
             break label$1;
            }
            label$45 : {
             label$46 : {
              if (!(HEAP32[(0 + 14760 | 0) >> 2] | 0)) {
               break label$46
              }
              $4_1 = HEAP32[(0 + 14768 | 0) >> 2] | 0;
              break label$45;
             }
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = -1;
             HEAP32[(i64toi32_i32$1 + 14772 | 0) >> 2] = -1;
             HEAP32[(i64toi32_i32$1 + 14776 | 0) >> 2] = i64toi32_i32$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$0 = 4096;
             HEAP32[(i64toi32_i32$1 + 14764 | 0) >> 2] = 4096;
             HEAP32[(i64toi32_i32$1 + 14768 | 0) >> 2] = i64toi32_i32$0;
             HEAP32[(0 + 14760 | 0) >> 2] = (($1_1 + 12 | 0) & -16 | 0) ^ 1431655768 | 0;
             HEAP32[(0 + 14780 | 0) >> 2] = 0;
             HEAP32[(0 + 14732 | 0) >> 2] = 0;
             $4_1 = 4096;
            }
            $0_1 = 0;
            $7_1 = $3_1 + 47 | 0;
            $2_1 = $4_1 + $7_1 | 0;
            $11_1 = 0 - $4_1 | 0;
            $8_1 = $2_1 & $11_1 | 0;
            if ($8_1 >>> 0 <= $3_1 >>> 0) {
             break label$1
            }
            $0_1 = 0;
            label$47 : {
             $4_1 = HEAP32[(0 + 14728 | 0) >> 2] | 0;
             if (!$4_1) {
              break label$47
             }
             $5_1 = HEAP32[(0 + 14720 | 0) >> 2] | 0;
             $9_1 = $5_1 + $8_1 | 0;
             if ($9_1 >>> 0 <= $5_1 >>> 0) {
              break label$1
             }
             if ($9_1 >>> 0 > $4_1 >>> 0) {
              break label$1
             }
            }
            if ((HEAPU8[(0 + 14732 | 0) >> 0] | 0) & 4 | 0) {
             break label$6
            }
            label$48 : {
             label$49 : {
              label$50 : {
               $4_1 = HEAP32[(0 + 14312 | 0) >> 2] | 0;
               if (!$4_1) {
                break label$50
               }
               $0_1 = 14736;
               label$51 : while (1) {
                label$52 : {
                 $5_1 = HEAP32[$0_1 >> 2] | 0;
                 if ($5_1 >>> 0 > $4_1 >>> 0) {
                  break label$52
                 }
                 if (($5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0) >>> 0 > $4_1 >>> 0) {
                  break label$49
                 }
                }
                $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
                if ($0_1) {
                 continue label$51
                }
                break label$51;
               };
              }
              $6_1 = $197(0 | 0) | 0;
              if (($6_1 | 0) == (-1 | 0)) {
               break label$7
              }
              $2_1 = $8_1;
              label$53 : {
               $0_1 = HEAP32[(0 + 14764 | 0) >> 2] | 0;
               $4_1 = $0_1 + -1 | 0;
               if (!($4_1 & $6_1 | 0)) {
                break label$53
               }
               $2_1 = ($8_1 - $6_1 | 0) + (($4_1 + $6_1 | 0) & (0 - $0_1 | 0) | 0) | 0;
              }
              if ($2_1 >>> 0 <= $3_1 >>> 0) {
               break label$7
              }
              if ($2_1 >>> 0 > 2147483646 >>> 0) {
               break label$7
              }
              label$54 : {
               $0_1 = HEAP32[(0 + 14728 | 0) >> 2] | 0;
               if (!$0_1) {
                break label$54
               }
               $4_1 = HEAP32[(0 + 14720 | 0) >> 2] | 0;
               $5_1 = $4_1 + $2_1 | 0;
               if ($5_1 >>> 0 <= $4_1 >>> 0) {
                break label$7
               }
               if ($5_1 >>> 0 > $0_1 >>> 0) {
                break label$7
               }
              }
              $0_1 = $197($2_1 | 0) | 0;
              if (($0_1 | 0) != ($6_1 | 0)) {
               break label$48
              }
              break label$5;
             }
             $2_1 = ($2_1 - $6_1 | 0) & $11_1 | 0;
             if ($2_1 >>> 0 > 2147483646 >>> 0) {
              break label$7
             }
             $6_1 = $197($2_1 | 0) | 0;
             if (($6_1 | 0) == ((HEAP32[$0_1 >> 2] | 0) + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0 | 0)) {
              break label$8
             }
             $0_1 = $6_1;
            }
            label$55 : {
             if (($0_1 | 0) == (-1 | 0)) {
              break label$55
             }
             if (($3_1 + 48 | 0) >>> 0 <= $2_1 >>> 0) {
              break label$55
             }
             label$56 : {
              $4_1 = HEAP32[(0 + 14768 | 0) >> 2] | 0;
              $4_1 = (($7_1 - $2_1 | 0) + $4_1 | 0) & (0 - $4_1 | 0) | 0;
              if ($4_1 >>> 0 <= 2147483646 >>> 0) {
               break label$56
              }
              $6_1 = $0_1;
              break label$5;
             }
             label$57 : {
              if (($197($4_1 | 0) | 0 | 0) == (-1 | 0)) {
               break label$57
              }
              $2_1 = $4_1 + $2_1 | 0;
              $6_1 = $0_1;
              break label$5;
             }
             $197(0 - $2_1 | 0 | 0) | 0;
             break label$7;
            }
            $6_1 = $0_1;
            if (($0_1 | 0) != (-1 | 0)) {
             break label$5
            }
            break label$7;
           }
           $8_1 = 0;
           break label$2;
          }
          $6_1 = 0;
          break label$3;
         }
         if (($6_1 | 0) != (-1 | 0)) {
          break label$5
         }
        }
        HEAP32[(0 + 14732 | 0) >> 2] = HEAP32[(0 + 14732 | 0) >> 2] | 0 | 4 | 0;
       }
       if ($8_1 >>> 0 > 2147483646 >>> 0) {
        break label$4
       }
       $6_1 = $197($8_1 | 0) | 0;
       $0_1 = $197(0 | 0) | 0;
       if (($6_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if (($0_1 | 0) == (-1 | 0)) {
        break label$4
       }
       if ($6_1 >>> 0 >= $0_1 >>> 0) {
        break label$4
       }
       $2_1 = $0_1 - $6_1 | 0;
       if ($2_1 >>> 0 <= ($3_1 + 40 | 0) >>> 0) {
        break label$4
       }
      }
      $0_1 = (HEAP32[(0 + 14720 | 0) >> 2] | 0) + $2_1 | 0;
      HEAP32[(0 + 14720 | 0) >> 2] = $0_1;
      label$58 : {
       if ($0_1 >>> 0 <= (HEAP32[(0 + 14724 | 0) >> 2] | 0) >>> 0) {
        break label$58
       }
       HEAP32[(0 + 14724 | 0) >> 2] = $0_1;
      }
      label$59 : {
       label$60 : {
        label$61 : {
         label$62 : {
          $4_1 = HEAP32[(0 + 14312 | 0) >> 2] | 0;
          if (!$4_1) {
           break label$62
          }
          $0_1 = 14736;
          label$63 : while (1) {
           $5_1 = HEAP32[$0_1 >> 2] | 0;
           $8_1 = HEAP32[($0_1 + 4 | 0) >> 2] | 0;
           if (($6_1 | 0) == ($5_1 + $8_1 | 0 | 0)) {
            break label$61
           }
           $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           if ($0_1) {
            continue label$63
           }
           break label$60;
          };
         }
         label$64 : {
          label$65 : {
           $0_1 = HEAP32[(0 + 14304 | 0) >> 2] | 0;
           if (!$0_1) {
            break label$65
           }
           if ($6_1 >>> 0 >= $0_1 >>> 0) {
            break label$64
           }
          }
          HEAP32[(0 + 14304 | 0) >> 2] = $6_1;
         }
         $0_1 = 0;
         HEAP32[(0 + 14740 | 0) >> 2] = $2_1;
         HEAP32[(0 + 14736 | 0) >> 2] = $6_1;
         HEAP32[(0 + 14320 | 0) >> 2] = -1;
         HEAP32[(0 + 14324 | 0) >> 2] = HEAP32[(0 + 14760 | 0) >> 2] | 0;
         HEAP32[(0 + 14748 | 0) >> 2] = 0;
         label$66 : while (1) {
          $4_1 = $0_1 << 3 | 0;
          $5_1 = $4_1 + 14328 | 0;
          HEAP32[($4_1 + 14336 | 0) >> 2] = $5_1;
          HEAP32[($4_1 + 14340 | 0) >> 2] = $5_1;
          $0_1 = $0_1 + 1 | 0;
          if (($0_1 | 0) != (32 | 0)) {
           continue label$66
          }
          break label$66;
         };
         $0_1 = $2_1 + -40 | 0;
         $4_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
         $5_1 = $0_1 - $4_1 | 0;
         HEAP32[(0 + 14300 | 0) >> 2] = $5_1;
         $4_1 = $6_1 + $4_1 | 0;
         HEAP32[(0 + 14312 | 0) >> 2] = $4_1;
         HEAP32[($4_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
         HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
         HEAP32[(0 + 14316 | 0) >> 2] = HEAP32[(0 + 14776 | 0) >> 2] | 0;
         break label$59;
        }
        if ((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0) {
         break label$60
        }
        if ($5_1 >>> 0 > $4_1 >>> 0) {
         break label$60
        }
        if ($6_1 >>> 0 <= $4_1 >>> 0) {
         break label$60
        }
        HEAP32[($0_1 + 4 | 0) >> 2] = $8_1 + $2_1 | 0;
        $0_1 = ($4_1 + 8 | 0) & 7 | 0 ? (-8 - $4_1 | 0) & 7 | 0 : 0;
        $5_1 = $4_1 + $0_1 | 0;
        HEAP32[(0 + 14312 | 0) >> 2] = $5_1;
        $6_1 = (HEAP32[(0 + 14300 | 0) >> 2] | 0) + $2_1 | 0;
        $0_1 = $6_1 - $0_1 | 0;
        HEAP32[(0 + 14300 | 0) >> 2] = $0_1;
        HEAP32[($5_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
        HEAP32[(($4_1 + $6_1 | 0) + 4 | 0) >> 2] = 40;
        HEAP32[(0 + 14316 | 0) >> 2] = HEAP32[(0 + 14776 | 0) >> 2] | 0;
        break label$59;
       }
       label$67 : {
        $8_1 = HEAP32[(0 + 14304 | 0) >> 2] | 0;
        if ($6_1 >>> 0 >= $8_1 >>> 0) {
         break label$67
        }
        HEAP32[(0 + 14304 | 0) >> 2] = $6_1;
        $8_1 = $6_1;
       }
       $5_1 = $6_1 + $2_1 | 0;
       $0_1 = 14736;
       label$68 : {
        label$69 : {
         label$70 : {
          label$71 : {
           label$72 : {
            label$73 : {
             label$74 : {
              label$75 : while (1) {
               if ((HEAP32[$0_1 >> 2] | 0 | 0) == ($5_1 | 0)) {
                break label$74
               }
               $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
               if ($0_1) {
                continue label$75
               }
               break label$73;
              };
             }
             if (!((HEAPU8[($0_1 + 12 | 0) >> 0] | 0) & 8 | 0)) {
              break label$72
             }
            }
            $0_1 = 14736;
            label$76 : while (1) {
             label$77 : {
              $5_1 = HEAP32[$0_1 >> 2] | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$77
              }
              $5_1 = $5_1 + (HEAP32[($0_1 + 4 | 0) >> 2] | 0) | 0;
              if ($5_1 >>> 0 > $4_1 >>> 0) {
               break label$71
              }
             }
             $0_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
             continue label$76;
            };
           }
           HEAP32[$0_1 >> 2] = $6_1;
           HEAP32[($0_1 + 4 | 0) >> 2] = (HEAP32[($0_1 + 4 | 0) >> 2] | 0) + $2_1 | 0;
           $11_1 = $6_1 + (($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0) | 0;
           HEAP32[($11_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
           $2_1 = $5_1 + (($5_1 + 8 | 0) & 7 | 0 ? (-8 - $5_1 | 0) & 7 | 0 : 0) | 0;
           $3_1 = $11_1 + $3_1 | 0;
           $5_1 = $2_1 - $3_1 | 0;
           label$78 : {
            if (($4_1 | 0) != ($2_1 | 0)) {
             break label$78
            }
            HEAP32[(0 + 14312 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 14300 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 14300 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            break label$69;
           }
           label$79 : {
            if ((HEAP32[(0 + 14308 | 0) >> 2] | 0 | 0) != ($2_1 | 0)) {
             break label$79
            }
            HEAP32[(0 + 14308 | 0) >> 2] = $3_1;
            $0_1 = (HEAP32[(0 + 14296 | 0) >> 2] | 0) + $5_1 | 0;
            HEAP32[(0 + 14296 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
            HEAP32[($3_1 + $0_1 | 0) >> 2] = $0_1;
            break label$69;
           }
           label$80 : {
            $0_1 = HEAP32[($2_1 + 4 | 0) >> 2] | 0;
            if (($0_1 & 3 | 0 | 0) != (1 | 0)) {
             break label$80
            }
            $7_1 = $0_1 & -8 | 0;
            label$81 : {
             label$82 : {
              if ($0_1 >>> 0 > 255 >>> 0) {
               break label$82
              }
              $4_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
              $8_1 = $0_1 >>> 3 | 0;
              $6_1 = ($8_1 << 3 | 0) + 14328 | 0;
              label$83 : {
               $0_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($0_1 | 0) != ($4_1 | 0)) {
                break label$83
               }
               HEAP32[(0 + 14288 | 0) >> 2] = (HEAP32[(0 + 14288 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $8_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
              break label$81;
             }
             $9_1 = HEAP32[($2_1 + 24 | 0) >> 2] | 0;
             label$84 : {
              label$85 : {
               $6_1 = HEAP32[($2_1 + 12 | 0) >> 2] | 0;
               if (($6_1 | 0) == ($2_1 | 0)) {
                break label$85
               }
               $0_1 = HEAP32[($2_1 + 8 | 0) >> 2] | 0;
               HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
               HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
               break label$84;
              }
              label$86 : {
               $0_1 = $2_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$86
               }
               $0_1 = $2_1 + 16 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                break label$86
               }
               $6_1 = 0;
               break label$84;
              }
              label$87 : while (1) {
               $8_1 = $0_1;
               $6_1 = $4_1;
               $0_1 = $4_1 + 20 | 0;
               $4_1 = HEAP32[$0_1 >> 2] | 0;
               if ($4_1) {
                continue label$87
               }
               $0_1 = $6_1 + 16 | 0;
               $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
               if ($4_1) {
                continue label$87
               }
               break label$87;
              };
              HEAP32[$8_1 >> 2] = 0;
             }
             if (!$9_1) {
              break label$81
             }
             label$88 : {
              label$89 : {
               $4_1 = HEAP32[($2_1 + 28 | 0) >> 2] | 0;
               $0_1 = ($4_1 << 2 | 0) + 14592 | 0;
               if ((HEAP32[$0_1 >> 2] | 0 | 0) != ($2_1 | 0)) {
                break label$89
               }
               HEAP32[$0_1 >> 2] = $6_1;
               if ($6_1) {
                break label$88
               }
               HEAP32[(0 + 14292 | 0) >> 2] = (HEAP32[(0 + 14292 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
               break label$81;
              }
              HEAP32[($9_1 + ((HEAP32[($9_1 + 16 | 0) >> 2] | 0 | 0) == ($2_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
              if (!$6_1) {
               break label$81
              }
             }
             HEAP32[($6_1 + 24 | 0) >> 2] = $9_1;
             label$90 : {
              $0_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
              if (!$0_1) {
               break label$90
              }
              HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
              HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
             }
             $0_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
             if (!$0_1) {
              break label$81
             }
             HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
             HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
            }
            $5_1 = $7_1 + $5_1 | 0;
            $2_1 = $2_1 + $7_1 | 0;
           }
           HEAP32[($2_1 + 4 | 0) >> 2] = (HEAP32[($2_1 + 4 | 0) >> 2] | 0) & -2 | 0;
           HEAP32[($3_1 + 4 | 0) >> 2] = $5_1 | 1 | 0;
           HEAP32[($3_1 + $5_1 | 0) >> 2] = $5_1;
           label$91 : {
            if ($5_1 >>> 0 > 255 >>> 0) {
             break label$91
            }
            $4_1 = $5_1 >>> 3 | 0;
            $0_1 = ($4_1 << 3 | 0) + 14328 | 0;
            label$92 : {
             label$93 : {
              $5_1 = HEAP32[(0 + 14288 | 0) >> 2] | 0;
              $4_1 = 1 << $4_1 | 0;
              if ($5_1 & $4_1 | 0) {
               break label$93
              }
              HEAP32[(0 + 14288 | 0) >> 2] = $5_1 | $4_1 | 0;
              $4_1 = $0_1;
              break label$92;
             }
             $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
            }
            HEAP32[($0_1 + 8 | 0) >> 2] = $3_1;
            HEAP32[($4_1 + 12 | 0) >> 2] = $3_1;
            HEAP32[($3_1 + 12 | 0) >> 2] = $0_1;
            HEAP32[($3_1 + 8 | 0) >> 2] = $4_1;
            break label$69;
           }
           $0_1 = 31;
           label$94 : {
            if ($5_1 >>> 0 > 16777215 >>> 0) {
             break label$94
            }
            $0_1 = $5_1 >>> 8 | 0;
            $1157 = $0_1;
            $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
            $4_1 = $1157 << $0_1 | 0;
            $1164 = $4_1;
            $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
            $6_1 = $1164 << $4_1 | 0;
            $1171 = $6_1;
            $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
            $0_1 = (($1171 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $4_1 | 0 | $6_1 | 0) | 0;
            $0_1 = ($0_1 << 1 | 0 | (($5_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
           }
           HEAP32[($3_1 + 28 | 0) >> 2] = $0_1;
           i64toi32_i32$1 = $3_1;
           i64toi32_i32$0 = 0;
           HEAP32[($3_1 + 16 | 0) >> 2] = 0;
           HEAP32[($3_1 + 20 | 0) >> 2] = i64toi32_i32$0;
           $4_1 = ($0_1 << 2 | 0) + 14592 | 0;
           label$95 : {
            label$96 : {
             $6_1 = HEAP32[(0 + 14292 | 0) >> 2] | 0;
             $8_1 = 1 << $0_1 | 0;
             if ($6_1 & $8_1 | 0) {
              break label$96
             }
             HEAP32[(0 + 14292 | 0) >> 2] = $6_1 | $8_1 | 0;
             HEAP32[$4_1 >> 2] = $3_1;
             HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
             break label$95;
            }
            $0_1 = $5_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
            $6_1 = HEAP32[$4_1 >> 2] | 0;
            label$97 : while (1) {
             $4_1 = $6_1;
             if (((HEAP32[($4_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($5_1 | 0)) {
              break label$70
             }
             $6_1 = $0_1 >>> 29 | 0;
             $0_1 = $0_1 << 1 | 0;
             $8_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
             $6_1 = HEAP32[$8_1 >> 2] | 0;
             if ($6_1) {
              continue label$97
             }
             break label$97;
            };
            HEAP32[$8_1 >> 2] = $3_1;
            HEAP32[($3_1 + 24 | 0) >> 2] = $4_1;
           }
           HEAP32[($3_1 + 12 | 0) >> 2] = $3_1;
           HEAP32[($3_1 + 8 | 0) >> 2] = $3_1;
           break label$69;
          }
          $0_1 = $2_1 + -40 | 0;
          $8_1 = ($6_1 + 8 | 0) & 7 | 0 ? (-8 - $6_1 | 0) & 7 | 0 : 0;
          $11_1 = $0_1 - $8_1 | 0;
          HEAP32[(0 + 14300 | 0) >> 2] = $11_1;
          $8_1 = $6_1 + $8_1 | 0;
          HEAP32[(0 + 14312 | 0) >> 2] = $8_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = $11_1 | 1 | 0;
          HEAP32[(($6_1 + $0_1 | 0) + 4 | 0) >> 2] = 40;
          HEAP32[(0 + 14316 | 0) >> 2] = HEAP32[(0 + 14776 | 0) >> 2] | 0;
          $0_1 = ($5_1 + (($5_1 + -39 | 0) & 7 | 0 ? (39 - $5_1 | 0) & 7 | 0 : 0) | 0) + -47 | 0;
          $8_1 = $0_1 >>> 0 < ($4_1 + 16 | 0) >>> 0 ? $4_1 : $0_1;
          HEAP32[($8_1 + 4 | 0) >> 2] = 27;
          i64toi32_i32$2 = 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14744 | 0) >> 2] | 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14748 | 0) >> 2] | 0;
          $1293 = i64toi32_i32$0;
          i64toi32_i32$0 = $8_1 + 16 | 0;
          HEAP32[i64toi32_i32$0 >> 2] = $1293;
          HEAP32[(i64toi32_i32$0 + 4 | 0) >> 2] = i64toi32_i32$1;
          i64toi32_i32$2 = 0;
          i64toi32_i32$1 = HEAP32[(i64toi32_i32$2 + 14736 | 0) >> 2] | 0;
          i64toi32_i32$0 = HEAP32[(i64toi32_i32$2 + 14740 | 0) >> 2] | 0;
          $1295 = i64toi32_i32$1;
          i64toi32_i32$1 = $8_1;
          HEAP32[($8_1 + 8 | 0) >> 2] = $1295;
          HEAP32[($8_1 + 12 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[(0 + 14744 | 0) >> 2] = $8_1 + 8 | 0;
          HEAP32[(0 + 14740 | 0) >> 2] = $2_1;
          HEAP32[(0 + 14736 | 0) >> 2] = $6_1;
          HEAP32[(0 + 14748 | 0) >> 2] = 0;
          $0_1 = $8_1 + 24 | 0;
          label$98 : while (1) {
           HEAP32[($0_1 + 4 | 0) >> 2] = 7;
           $6_1 = $0_1 + 8 | 0;
           $0_1 = $0_1 + 4 | 0;
           if ($5_1 >>> 0 > $6_1 >>> 0) {
            continue label$98
           }
           break label$98;
          };
          if (($8_1 | 0) == ($4_1 | 0)) {
           break label$59
          }
          HEAP32[($8_1 + 4 | 0) >> 2] = (HEAP32[($8_1 + 4 | 0) >> 2] | 0) & -2 | 0;
          $2_1 = $8_1 - $4_1 | 0;
          HEAP32[($4_1 + 4 | 0) >> 2] = $2_1 | 1 | 0;
          HEAP32[$8_1 >> 2] = $2_1;
          label$99 : {
           if ($2_1 >>> 0 > 255 >>> 0) {
            break label$99
           }
           $5_1 = $2_1 >>> 3 | 0;
           $0_1 = ($5_1 << 3 | 0) + 14328 | 0;
           label$100 : {
            label$101 : {
             $6_1 = HEAP32[(0 + 14288 | 0) >> 2] | 0;
             $5_1 = 1 << $5_1 | 0;
             if ($6_1 & $5_1 | 0) {
              break label$101
             }
             HEAP32[(0 + 14288 | 0) >> 2] = $6_1 | $5_1 | 0;
             $5_1 = $0_1;
             break label$100;
            }
            $5_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
           }
           HEAP32[($0_1 + 8 | 0) >> 2] = $4_1;
           HEAP32[($5_1 + 12 | 0) >> 2] = $4_1;
           HEAP32[($4_1 + 12 | 0) >> 2] = $0_1;
           HEAP32[($4_1 + 8 | 0) >> 2] = $5_1;
           break label$59;
          }
          $0_1 = 31;
          label$102 : {
           if ($2_1 >>> 0 > 16777215 >>> 0) {
            break label$102
           }
           $0_1 = $2_1 >>> 8 | 0;
           $1356 = $0_1;
           $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
           $5_1 = $1356 << $0_1 | 0;
           $1363 = $5_1;
           $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
           $6_1 = $1363 << $5_1 | 0;
           $1370 = $6_1;
           $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
           $0_1 = (($1370 << $6_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $6_1 | 0) | 0;
           $0_1 = ($0_1 << 1 | 0 | (($2_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
          }
          i64toi32_i32$1 = $4_1;
          i64toi32_i32$0 = 0;
          HEAP32[($4_1 + 16 | 0) >> 2] = 0;
          HEAP32[($4_1 + 20 | 0) >> 2] = i64toi32_i32$0;
          HEAP32[($4_1 + 28 | 0) >> 2] = $0_1;
          $5_1 = ($0_1 << 2 | 0) + 14592 | 0;
          label$103 : {
           label$104 : {
            $6_1 = HEAP32[(0 + 14292 | 0) >> 2] | 0;
            $8_1 = 1 << $0_1 | 0;
            if ($6_1 & $8_1 | 0) {
             break label$104
            }
            HEAP32[(0 + 14292 | 0) >> 2] = $6_1 | $8_1 | 0;
            HEAP32[$5_1 >> 2] = $4_1;
            HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
            break label$103;
           }
           $0_1 = $2_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
           $6_1 = HEAP32[$5_1 >> 2] | 0;
           label$105 : while (1) {
            $5_1 = $6_1;
            if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($2_1 | 0)) {
             break label$68
            }
            $6_1 = $0_1 >>> 29 | 0;
            $0_1 = $0_1 << 1 | 0;
            $8_1 = ($5_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
            $6_1 = HEAP32[$8_1 >> 2] | 0;
            if ($6_1) {
             continue label$105
            }
            break label$105;
           };
           HEAP32[$8_1 >> 2] = $4_1;
           HEAP32[($4_1 + 24 | 0) >> 2] = $5_1;
          }
          HEAP32[($4_1 + 12 | 0) >> 2] = $4_1;
          HEAP32[($4_1 + 8 | 0) >> 2] = $4_1;
          break label$59;
         }
         $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
         HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
         HEAP32[($4_1 + 8 | 0) >> 2] = $3_1;
         HEAP32[($3_1 + 24 | 0) >> 2] = 0;
         HEAP32[($3_1 + 12 | 0) >> 2] = $4_1;
         HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
        }
        $0_1 = $11_1 + 8 | 0;
        break label$1;
       }
       $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
       HEAP32[($0_1 + 12 | 0) >> 2] = $4_1;
       HEAP32[($5_1 + 8 | 0) >> 2] = $4_1;
       HEAP32[($4_1 + 24 | 0) >> 2] = 0;
       HEAP32[($4_1 + 12 | 0) >> 2] = $5_1;
       HEAP32[($4_1 + 8 | 0) >> 2] = $0_1;
      }
      $0_1 = HEAP32[(0 + 14300 | 0) >> 2] | 0;
      if ($0_1 >>> 0 <= $3_1 >>> 0) {
       break label$4
      }
      $4_1 = $0_1 - $3_1 | 0;
      HEAP32[(0 + 14300 | 0) >> 2] = $4_1;
      $0_1 = HEAP32[(0 + 14312 | 0) >> 2] | 0;
      $5_1 = $0_1 + $3_1 | 0;
      HEAP32[(0 + 14312 | 0) >> 2] = $5_1;
      HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
      $0_1 = $0_1 + 8 | 0;
      break label$1;
     }
     HEAP32[($174() | 0) >> 2] = 48;
     $0_1 = 0;
     break label$1;
    }
    label$106 : {
     if (!$11_1) {
      break label$106
     }
     label$107 : {
      label$108 : {
       $5_1 = HEAP32[($8_1 + 28 | 0) >> 2] | 0;
       $0_1 = ($5_1 << 2 | 0) + 14592 | 0;
       if (($8_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
        break label$108
       }
       HEAP32[$0_1 >> 2] = $6_1;
       if ($6_1) {
        break label$107
       }
       $7_1 = $7_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       HEAP32[(0 + 14292 | 0) >> 2] = $7_1;
       break label$106;
      }
      HEAP32[($11_1 + ((HEAP32[($11_1 + 16 | 0) >> 2] | 0 | 0) == ($8_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$106
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $11_1;
     label$109 : {
      $0_1 = HEAP32[($8_1 + 16 | 0) >> 2] | 0;
      if (!$0_1) {
       break label$109
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $0_1;
      HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
     }
     $0_1 = HEAP32[($8_1 + 20 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$106
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $6_1;
    }
    label$110 : {
     label$111 : {
      if ($4_1 >>> 0 > 15 >>> 0) {
       break label$111
      }
      $0_1 = $4_1 + $3_1 | 0;
      HEAP32[($8_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
      $0_1 = $8_1 + $0_1 | 0;
      HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
      break label$110;
     }
     HEAP32[($8_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
     $6_1 = $8_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
     HEAP32[($6_1 + $4_1 | 0) >> 2] = $4_1;
     label$112 : {
      if ($4_1 >>> 0 > 255 >>> 0) {
       break label$112
      }
      $4_1 = $4_1 >>> 3 | 0;
      $0_1 = ($4_1 << 3 | 0) + 14328 | 0;
      label$113 : {
       label$114 : {
        $5_1 = HEAP32[(0 + 14288 | 0) >> 2] | 0;
        $4_1 = 1 << $4_1 | 0;
        if ($5_1 & $4_1 | 0) {
         break label$114
        }
        HEAP32[(0 + 14288 | 0) >> 2] = $5_1 | $4_1 | 0;
        $4_1 = $0_1;
        break label$113;
       }
       $4_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
      }
      HEAP32[($0_1 + 8 | 0) >> 2] = $6_1;
      HEAP32[($4_1 + 12 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 12 | 0) >> 2] = $0_1;
      HEAP32[($6_1 + 8 | 0) >> 2] = $4_1;
      break label$110;
     }
     $0_1 = 31;
     label$115 : {
      if ($4_1 >>> 0 > 16777215 >>> 0) {
       break label$115
      }
      $0_1 = $4_1 >>> 8 | 0;
      $1606 = $0_1;
      $0_1 = (($0_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
      $5_1 = $1606 << $0_1 | 0;
      $1613 = $5_1;
      $5_1 = (($5_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
      $3_1 = $1613 << $5_1 | 0;
      $1620 = $3_1;
      $3_1 = (($3_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
      $0_1 = (($1620 << $3_1 | 0) >>> 15 | 0) - ($0_1 | $5_1 | 0 | $3_1 | 0) | 0;
      $0_1 = ($0_1 << 1 | 0 | (($4_1 >>> ($0_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
     }
     HEAP32[($6_1 + 28 | 0) >> 2] = $0_1;
     i64toi32_i32$1 = $6_1;
     i64toi32_i32$0 = 0;
     HEAP32[($6_1 + 16 | 0) >> 2] = 0;
     HEAP32[($6_1 + 20 | 0) >> 2] = i64toi32_i32$0;
     $5_1 = ($0_1 << 2 | 0) + 14592 | 0;
     label$116 : {
      label$117 : {
       label$118 : {
        $3_1 = 1 << $0_1 | 0;
        if ($7_1 & $3_1 | 0) {
         break label$118
        }
        HEAP32[(0 + 14292 | 0) >> 2] = $7_1 | $3_1 | 0;
        HEAP32[$5_1 >> 2] = $6_1;
        HEAP32[($6_1 + 24 | 0) >> 2] = $5_1;
        break label$117;
       }
       $0_1 = $4_1 << (($0_1 | 0) == (31 | 0) ? 0 : 25 - ($0_1 >>> 1 | 0) | 0) | 0;
       $3_1 = HEAP32[$5_1 >> 2] | 0;
       label$119 : while (1) {
        $5_1 = $3_1;
        if (((HEAP32[($5_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($4_1 | 0)) {
         break label$116
        }
        $3_1 = $0_1 >>> 29 | 0;
        $0_1 = $0_1 << 1 | 0;
        $2_1 = ($5_1 + ($3_1 & 4 | 0) | 0) + 16 | 0;
        $3_1 = HEAP32[$2_1 >> 2] | 0;
        if ($3_1) {
         continue label$119
        }
        break label$119;
       };
       HEAP32[$2_1 >> 2] = $6_1;
       HEAP32[($6_1 + 24 | 0) >> 2] = $5_1;
      }
      HEAP32[($6_1 + 12 | 0) >> 2] = $6_1;
      HEAP32[($6_1 + 8 | 0) >> 2] = $6_1;
      break label$110;
     }
     $0_1 = HEAP32[($5_1 + 8 | 0) >> 2] | 0;
     HEAP32[($0_1 + 12 | 0) >> 2] = $6_1;
     HEAP32[($5_1 + 8 | 0) >> 2] = $6_1;
     HEAP32[($6_1 + 24 | 0) >> 2] = 0;
     HEAP32[($6_1 + 12 | 0) >> 2] = $5_1;
     HEAP32[($6_1 + 8 | 0) >> 2] = $0_1;
    }
    $0_1 = $8_1 + 8 | 0;
    break label$1;
   }
   label$120 : {
    if (!$10_1) {
     break label$120
    }
    label$121 : {
     label$122 : {
      $5_1 = HEAP32[($6_1 + 28 | 0) >> 2] | 0;
      $0_1 = ($5_1 << 2 | 0) + 14592 | 0;
      if (($6_1 | 0) != (HEAP32[$0_1 >> 2] | 0 | 0)) {
       break label$122
      }
      HEAP32[$0_1 >> 2] = $8_1;
      if ($8_1) {
       break label$121
      }
      HEAP32[(0 + 14292 | 0) >> 2] = $9_1 & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
      break label$120;
     }
     HEAP32[($10_1 + ((HEAP32[($10_1 + 16 | 0) >> 2] | 0 | 0) == ($6_1 | 0) ? 16 : 20) | 0) >> 2] = $8_1;
     if (!$8_1) {
      break label$120
     }
    }
    HEAP32[($8_1 + 24 | 0) >> 2] = $10_1;
    label$123 : {
     $0_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
     if (!$0_1) {
      break label$123
     }
     HEAP32[($8_1 + 16 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
    }
    $0_1 = HEAP32[($6_1 + 20 | 0) >> 2] | 0;
    if (!$0_1) {
     break label$120
    }
    HEAP32[($8_1 + 20 | 0) >> 2] = $0_1;
    HEAP32[($0_1 + 24 | 0) >> 2] = $8_1;
   }
   label$124 : {
    label$125 : {
     if ($4_1 >>> 0 > 15 >>> 0) {
      break label$125
     }
     $0_1 = $4_1 + $3_1 | 0;
     HEAP32[($6_1 + 4 | 0) >> 2] = $0_1 | 3 | 0;
     $0_1 = $6_1 + $0_1 | 0;
     HEAP32[($0_1 + 4 | 0) >> 2] = HEAP32[($0_1 + 4 | 0) >> 2] | 0 | 1 | 0;
     break label$124;
    }
    HEAP32[($6_1 + 4 | 0) >> 2] = $3_1 | 3 | 0;
    $5_1 = $6_1 + $3_1 | 0;
    HEAP32[($5_1 + 4 | 0) >> 2] = $4_1 | 1 | 0;
    HEAP32[($5_1 + $4_1 | 0) >> 2] = $4_1;
    label$126 : {
     if (!$7_1) {
      break label$126
     }
     $8_1 = $7_1 >>> 3 | 0;
     $3_1 = ($8_1 << 3 | 0) + 14328 | 0;
     $0_1 = HEAP32[(0 + 14308 | 0) >> 2] | 0;
     label$127 : {
      label$128 : {
       $8_1 = 1 << $8_1 | 0;
       if ($8_1 & $2_1 | 0) {
        break label$128
       }
       HEAP32[(0 + 14288 | 0) >> 2] = $8_1 | $2_1 | 0;
       $8_1 = $3_1;
       break label$127;
      }
      $8_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
     }
     HEAP32[($3_1 + 8 | 0) >> 2] = $0_1;
     HEAP32[($8_1 + 12 | 0) >> 2] = $0_1;
     HEAP32[($0_1 + 12 | 0) >> 2] = $3_1;
     HEAP32[($0_1 + 8 | 0) >> 2] = $8_1;
    }
    HEAP32[(0 + 14308 | 0) >> 2] = $5_1;
    HEAP32[(0 + 14296 | 0) >> 2] = $4_1;
   }
   $0_1 = $6_1 + 8 | 0;
  }
  global$0 = $1_1 + 16 | 0;
  return $0_1 | 0;
 }
 
 function $195($0_1) {
  $0_1 = $0_1 | 0;
  var $2_1 = 0, $6_1 = 0, $1_1 = 0, $4_1 = 0, $3_1 = 0, $5_1 = 0, $7_1 = 0, $379 = 0, $386 = 0, $393 = 0;
  label$1 : {
   if (!$0_1) {
    break label$1
   }
   $1_1 = $0_1 + -8 | 0;
   $2_1 = HEAP32[($0_1 + -4 | 0) >> 2] | 0;
   $0_1 = $2_1 & -8 | 0;
   $3_1 = $1_1 + $0_1 | 0;
   label$2 : {
    if ($2_1 & 1 | 0) {
     break label$2
    }
    if (!($2_1 & 3 | 0)) {
     break label$1
    }
    $2_1 = HEAP32[$1_1 >> 2] | 0;
    $1_1 = $1_1 - $2_1 | 0;
    $4_1 = HEAP32[(0 + 14304 | 0) >> 2] | 0;
    if ($1_1 >>> 0 < $4_1 >>> 0) {
     break label$1
    }
    $0_1 = $2_1 + $0_1 | 0;
    label$3 : {
     if ((HEAP32[(0 + 14308 | 0) >> 2] | 0 | 0) == ($1_1 | 0)) {
      break label$3
     }
     label$4 : {
      if ($2_1 >>> 0 > 255 >>> 0) {
       break label$4
      }
      $4_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      $5_1 = $2_1 >>> 3 | 0;
      $6_1 = ($5_1 << 3 | 0) + 14328 | 0;
      label$5 : {
       $2_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($2_1 | 0) != ($4_1 | 0)) {
        break label$5
       }
       HEAP32[(0 + 14288 | 0) >> 2] = (HEAP32[(0 + 14288 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
      break label$2;
     }
     $7_1 = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
     label$6 : {
      label$7 : {
       $6_1 = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
       if (($6_1 | 0) == ($1_1 | 0)) {
        break label$7
       }
       $2_1 = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
       HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
       HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
       break label$6;
      }
      label$8 : {
       $2_1 = $1_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $2_1 = $1_1 + 16 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        break label$8
       }
       $6_1 = 0;
       break label$6;
      }
      label$9 : while (1) {
       $5_1 = $2_1;
       $6_1 = $4_1;
       $2_1 = $6_1 + 20 | 0;
       $4_1 = HEAP32[$2_1 >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       $2_1 = $6_1 + 16 | 0;
       $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
       if ($4_1) {
        continue label$9
       }
       break label$9;
      };
      HEAP32[$5_1 >> 2] = 0;
     }
     if (!$7_1) {
      break label$2
     }
     label$10 : {
      label$11 : {
       $4_1 = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
       $2_1 = ($4_1 << 2 | 0) + 14592 | 0;
       if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($1_1 | 0)) {
        break label$11
       }
       HEAP32[$2_1 >> 2] = $6_1;
       if ($6_1) {
        break label$10
       }
       HEAP32[(0 + 14292 | 0) >> 2] = (HEAP32[(0 + 14292 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
       break label$2;
      }
      HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($1_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
      if (!$6_1) {
       break label$2
      }
     }
     HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
     label$12 : {
      $2_1 = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$12
      }
      HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     $2_1 = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
     if (!$2_1) {
      break label$2
     }
     HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
     HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     break label$2;
    }
    $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
    if (($2_1 & 3 | 0 | 0) != (3 | 0)) {
     break label$2
    }
    HEAP32[(0 + 14296 | 0) >> 2] = $0_1;
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
    return;
   }
   if ($3_1 >>> 0 <= $1_1 >>> 0) {
    break label$1
   }
   $2_1 = HEAP32[($3_1 + 4 | 0) >> 2] | 0;
   if (!($2_1 & 1 | 0)) {
    break label$1
   }
   label$13 : {
    label$14 : {
     if ($2_1 & 2 | 0) {
      break label$14
     }
     label$15 : {
      if ((HEAP32[(0 + 14312 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$15
      }
      HEAP32[(0 + 14312 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 14300 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 14300 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      if (($1_1 | 0) != (HEAP32[(0 + 14308 | 0) >> 2] | 0 | 0)) {
       break label$1
      }
      HEAP32[(0 + 14296 | 0) >> 2] = 0;
      HEAP32[(0 + 14308 | 0) >> 2] = 0;
      return;
     }
     label$16 : {
      if ((HEAP32[(0 + 14308 | 0) >> 2] | 0 | 0) != ($3_1 | 0)) {
       break label$16
      }
      HEAP32[(0 + 14308 | 0) >> 2] = $1_1;
      $0_1 = (HEAP32[(0 + 14296 | 0) >> 2] | 0) + $0_1 | 0;
      HEAP32[(0 + 14296 | 0) >> 2] = $0_1;
      HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
      HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
      return;
     }
     $0_1 = ($2_1 & -8 | 0) + $0_1 | 0;
     label$17 : {
      label$18 : {
       if ($2_1 >>> 0 > 255 >>> 0) {
        break label$18
       }
       $4_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
       $5_1 = $2_1 >>> 3 | 0;
       $6_1 = ($5_1 << 3 | 0) + 14328 | 0;
       label$19 : {
        $2_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($2_1 | 0) != ($4_1 | 0)) {
         break label$19
        }
        HEAP32[(0 + 14288 | 0) >> 2] = (HEAP32[(0 + 14288 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $5_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($4_1 + 12 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 8 | 0) >> 2] = $4_1;
       break label$17;
      }
      $7_1 = HEAP32[($3_1 + 24 | 0) >> 2] | 0;
      label$20 : {
       label$21 : {
        $6_1 = HEAP32[($3_1 + 12 | 0) >> 2] | 0;
        if (($6_1 | 0) == ($3_1 | 0)) {
         break label$21
        }
        $2_1 = HEAP32[($3_1 + 8 | 0) >> 2] | 0;
        HEAP32[(0 + 14304 | 0) >> 2] | 0;
        HEAP32[($2_1 + 12 | 0) >> 2] = $6_1;
        HEAP32[($6_1 + 8 | 0) >> 2] = $2_1;
        break label$20;
       }
       label$22 : {
        $2_1 = $3_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $2_1 = $3_1 + 16 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         break label$22
        }
        $6_1 = 0;
        break label$20;
       }
       label$23 : while (1) {
        $5_1 = $2_1;
        $6_1 = $4_1;
        $2_1 = $6_1 + 20 | 0;
        $4_1 = HEAP32[$2_1 >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        $2_1 = $6_1 + 16 | 0;
        $4_1 = HEAP32[($6_1 + 16 | 0) >> 2] | 0;
        if ($4_1) {
         continue label$23
        }
        break label$23;
       };
       HEAP32[$5_1 >> 2] = 0;
      }
      if (!$7_1) {
       break label$17
      }
      label$24 : {
       label$25 : {
        $4_1 = HEAP32[($3_1 + 28 | 0) >> 2] | 0;
        $2_1 = ($4_1 << 2 | 0) + 14592 | 0;
        if ((HEAP32[$2_1 >> 2] | 0 | 0) != ($3_1 | 0)) {
         break label$25
        }
        HEAP32[$2_1 >> 2] = $6_1;
        if ($6_1) {
         break label$24
        }
        HEAP32[(0 + 14292 | 0) >> 2] = (HEAP32[(0 + 14292 | 0) >> 2] | 0) & (__wasm_rotl_i32(-2 | 0, $4_1 | 0) | 0) | 0;
        break label$17;
       }
       HEAP32[($7_1 + ((HEAP32[($7_1 + 16 | 0) >> 2] | 0 | 0) == ($3_1 | 0) ? 16 : 20) | 0) >> 2] = $6_1;
       if (!$6_1) {
        break label$17
       }
      }
      HEAP32[($6_1 + 24 | 0) >> 2] = $7_1;
      label$26 : {
       $2_1 = HEAP32[($3_1 + 16 | 0) >> 2] | 0;
       if (!$2_1) {
        break label$26
       }
       HEAP32[($6_1 + 16 | 0) >> 2] = $2_1;
       HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
      }
      $2_1 = HEAP32[($3_1 + 20 | 0) >> 2] | 0;
      if (!$2_1) {
       break label$17
      }
      HEAP32[($6_1 + 20 | 0) >> 2] = $2_1;
      HEAP32[($2_1 + 24 | 0) >> 2] = $6_1;
     }
     HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
     HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
     if (($1_1 | 0) != (HEAP32[(0 + 14308 | 0) >> 2] | 0 | 0)) {
      break label$13
     }
     HEAP32[(0 + 14296 | 0) >> 2] = $0_1;
     return;
    }
    HEAP32[($3_1 + 4 | 0) >> 2] = $2_1 & -2 | 0;
    HEAP32[($1_1 + 4 | 0) >> 2] = $0_1 | 1 | 0;
    HEAP32[($1_1 + $0_1 | 0) >> 2] = $0_1;
   }
   label$27 : {
    if ($0_1 >>> 0 > 255 >>> 0) {
     break label$27
    }
    $2_1 = $0_1 >>> 3 | 0;
    $0_1 = ($2_1 << 3 | 0) + 14328 | 0;
    label$28 : {
     label$29 : {
      $4_1 = HEAP32[(0 + 14288 | 0) >> 2] | 0;
      $2_1 = 1 << $2_1 | 0;
      if ($4_1 & $2_1 | 0) {
       break label$29
      }
      HEAP32[(0 + 14288 | 0) >> 2] = $4_1 | $2_1 | 0;
      $2_1 = $0_1;
      break label$28;
     }
     $2_1 = HEAP32[($0_1 + 8 | 0) >> 2] | 0;
    }
    HEAP32[($0_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = $0_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $2_1;
    return;
   }
   $2_1 = 31;
   label$30 : {
    if ($0_1 >>> 0 > 16777215 >>> 0) {
     break label$30
    }
    $2_1 = $0_1 >>> 8 | 0;
    $379 = $2_1;
    $2_1 = (($2_1 + 1048320 | 0) >>> 16 | 0) & 8 | 0;
    $4_1 = $379 << $2_1 | 0;
    $386 = $4_1;
    $4_1 = (($4_1 + 520192 | 0) >>> 16 | 0) & 4 | 0;
    $6_1 = $386 << $4_1 | 0;
    $393 = $6_1;
    $6_1 = (($6_1 + 245760 | 0) >>> 16 | 0) & 2 | 0;
    $2_1 = (($393 << $6_1 | 0) >>> 15 | 0) - ($2_1 | $4_1 | 0 | $6_1 | 0) | 0;
    $2_1 = ($2_1 << 1 | 0 | (($0_1 >>> ($2_1 + 21 | 0) | 0) & 1 | 0) | 0) + 28 | 0;
   }
   HEAP32[($1_1 + 16 | 0) >> 2] = 0;
   HEAP32[($1_1 + 20 | 0) >> 2] = 0;
   HEAP32[($1_1 + 28 | 0) >> 2] = $2_1;
   $4_1 = ($2_1 << 2 | 0) + 14592 | 0;
   label$31 : {
    label$32 : {
     label$33 : {
      label$34 : {
       $6_1 = HEAP32[(0 + 14292 | 0) >> 2] | 0;
       $3_1 = 1 << $2_1 | 0;
       if ($6_1 & $3_1 | 0) {
        break label$34
       }
       HEAP32[(0 + 14292 | 0) >> 2] = $6_1 | $3_1 | 0;
       HEAP32[$4_1 >> 2] = $1_1;
       HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
       break label$33;
      }
      $2_1 = $0_1 << (($2_1 | 0) == (31 | 0) ? 0 : 25 - ($2_1 >>> 1 | 0) | 0) | 0;
      $6_1 = HEAP32[$4_1 >> 2] | 0;
      label$35 : while (1) {
       $4_1 = $6_1;
       if (((HEAP32[($6_1 + 4 | 0) >> 2] | 0) & -8 | 0 | 0) == ($0_1 | 0)) {
        break label$32
       }
       $6_1 = $2_1 >>> 29 | 0;
       $2_1 = $2_1 << 1 | 0;
       $3_1 = ($4_1 + ($6_1 & 4 | 0) | 0) + 16 | 0;
       $6_1 = HEAP32[$3_1 >> 2] | 0;
       if ($6_1) {
        continue label$35
       }
       break label$35;
      };
      HEAP32[$3_1 >> 2] = $1_1;
      HEAP32[($1_1 + 24 | 0) >> 2] = $4_1;
     }
     HEAP32[($1_1 + 12 | 0) >> 2] = $1_1;
     HEAP32[($1_1 + 8 | 0) >> 2] = $1_1;
     break label$31;
    }
    $0_1 = HEAP32[($4_1 + 8 | 0) >> 2] | 0;
    HEAP32[($0_1 + 12 | 0) >> 2] = $1_1;
    HEAP32[($4_1 + 8 | 0) >> 2] = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = 0;
    HEAP32[($1_1 + 12 | 0) >> 2] = $4_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $0_1;
   }
   $1_1 = (HEAP32[(0 + 14320 | 0) >> 2] | 0) + -1 | 0;
   HEAP32[(0 + 14320 | 0) >> 2] = $1_1 ? $1_1 : -1;
  }
 }
 
 function $196() {
  return __wasm_memory_size() << 16 | 0 | 0;
 }
 
 function $197($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0;
  $1_1 = HEAP32[(0 + 12176 | 0) >> 2] | 0;
  $2_1 = ($0_1 + 3 | 0) & -4 | 0;
  $0_1 = $1_1 + $2_1 | 0;
  label$1 : {
   label$2 : {
    if (!$2_1) {
     break label$2
    }
    if ($0_1 >>> 0 <= $1_1 >>> 0) {
     break label$1
    }
   }
   label$3 : {
    if ($0_1 >>> 0 <= ($196() | 0) >>> 0) {
     break label$3
    }
    if (!(fimport$6($0_1 | 0) | 0)) {
     break label$1
    }
   }
   HEAP32[(0 + 12176 | 0) >> 2] = $0_1;
   return $1_1 | 0;
  }
  HEAP32[($174() | 0) >> 2] = 48;
  return -1 | 0;
 }
 
 function $198($0_1, $1_1) {
  $0_1 = +$0_1;
  $1_1 = $1_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$2 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $8_1 = 0, $32_1 = 0.0, i64toi32_i32$0 = 0;
  label$1 : {
   label$2 : {
    if (($1_1 | 0) < (1024 | 0)) {
     break label$2
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    label$3 : {
     if (($1_1 | 0) >= (2047 | 0)) {
      break label$3
     }
     $1_1 = $1_1 + -1023 | 0;
     break label$1;
    }
    $0_1 = $0_1 * 8988465674311579538646525.0e283;
    $1_1 = (($1_1 | 0) < (3069 | 0) ? $1_1 : 3069) + -2046 | 0;
    break label$1;
   }
   if (($1_1 | 0) > (-1023 | 0)) {
    break label$1
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   label$4 : {
    if (($1_1 | 0) <= (-2045 | 0)) {
     break label$4
    }
    $1_1 = $1_1 + 1022 | 0;
    break label$1;
   }
   $0_1 = $0_1 * 2.2250738585072014e-308;
   $1_1 = (($1_1 | 0) > (-3066 | 0) ? $1_1 : -3066) + 2044 | 0;
  }
  $32_1 = $0_1;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $1_1 + 1023 | 0;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 52;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $8_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $8_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  wasm2js_scratch_store_i32(0 | 0, $8_1 | 0);
  wasm2js_scratch_store_i32(1 | 0, i64toi32_i32$1 | 0);
  return +($32_1 * +wasm2js_scratch_load_f64());
 }
 
 function $199($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $4_1 = 0, $3_1 = 0, $5_1 = 0;
  label$1 : {
   if ($2_1 >>> 0 < 512 >>> 0) {
    break label$1
   }
   fimport$7($0_1 | 0, $1_1 | 0, $2_1 | 0) | 0;
   return $0_1 | 0;
  }
  $3_1 = $0_1 + $2_1 | 0;
  label$2 : {
   label$3 : {
    if (($1_1 ^ $0_1 | 0) & 3 | 0) {
     break label$3
    }
    label$4 : {
     label$5 : {
      if ($0_1 & 3 | 0) {
       break label$5
      }
      $2_1 = $0_1;
      break label$4;
     }
     label$6 : {
      if (($2_1 | 0) >= (1 | 0)) {
       break label$6
      }
      $2_1 = $0_1;
      break label$4;
     }
     $2_1 = $0_1;
     label$7 : while (1) {
      HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
      $1_1 = $1_1 + 1 | 0;
      $2_1 = $2_1 + 1 | 0;
      if (!($2_1 & 3 | 0)) {
       break label$4
      }
      if ($2_1 >>> 0 < $3_1 >>> 0) {
       continue label$7
      }
      break label$7;
     };
    }
    label$8 : {
     $4_1 = $3_1 & -4 | 0;
     if ($4_1 >>> 0 < 64 >>> 0) {
      break label$8
     }
     $5_1 = $4_1 + -64 | 0;
     if ($2_1 >>> 0 > $5_1 >>> 0) {
      break label$8
     }
     label$9 : while (1) {
      HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
      HEAP32[($2_1 + 4 | 0) >> 2] = HEAP32[($1_1 + 4 | 0) >> 2] | 0;
      HEAP32[($2_1 + 8 | 0) >> 2] = HEAP32[($1_1 + 8 | 0) >> 2] | 0;
      HEAP32[($2_1 + 12 | 0) >> 2] = HEAP32[($1_1 + 12 | 0) >> 2] | 0;
      HEAP32[($2_1 + 16 | 0) >> 2] = HEAP32[($1_1 + 16 | 0) >> 2] | 0;
      HEAP32[($2_1 + 20 | 0) >> 2] = HEAP32[($1_1 + 20 | 0) >> 2] | 0;
      HEAP32[($2_1 + 24 | 0) >> 2] = HEAP32[($1_1 + 24 | 0) >> 2] | 0;
      HEAP32[($2_1 + 28 | 0) >> 2] = HEAP32[($1_1 + 28 | 0) >> 2] | 0;
      HEAP32[($2_1 + 32 | 0) >> 2] = HEAP32[($1_1 + 32 | 0) >> 2] | 0;
      HEAP32[($2_1 + 36 | 0) >> 2] = HEAP32[($1_1 + 36 | 0) >> 2] | 0;
      HEAP32[($2_1 + 40 | 0) >> 2] = HEAP32[($1_1 + 40 | 0) >> 2] | 0;
      HEAP32[($2_1 + 44 | 0) >> 2] = HEAP32[($1_1 + 44 | 0) >> 2] | 0;
      HEAP32[($2_1 + 48 | 0) >> 2] = HEAP32[($1_1 + 48 | 0) >> 2] | 0;
      HEAP32[($2_1 + 52 | 0) >> 2] = HEAP32[($1_1 + 52 | 0) >> 2] | 0;
      HEAP32[($2_1 + 56 | 0) >> 2] = HEAP32[($1_1 + 56 | 0) >> 2] | 0;
      HEAP32[($2_1 + 60 | 0) >> 2] = HEAP32[($1_1 + 60 | 0) >> 2] | 0;
      $1_1 = $1_1 + 64 | 0;
      $2_1 = $2_1 + 64 | 0;
      if ($2_1 >>> 0 <= $5_1 >>> 0) {
       continue label$9
      }
      break label$9;
     };
    }
    if ($2_1 >>> 0 >= $4_1 >>> 0) {
     break label$2
    }
    label$10 : while (1) {
     HEAP32[$2_1 >> 2] = HEAP32[$1_1 >> 2] | 0;
     $1_1 = $1_1 + 4 | 0;
     $2_1 = $2_1 + 4 | 0;
     if ($2_1 >>> 0 < $4_1 >>> 0) {
      continue label$10
     }
     break label$2;
    };
   }
   label$11 : {
    if ($3_1 >>> 0 >= 4 >>> 0) {
     break label$11
    }
    $2_1 = $0_1;
    break label$2;
   }
   label$12 : {
    $4_1 = $3_1 + -4 | 0;
    if ($4_1 >>> 0 >= $0_1 >>> 0) {
     break label$12
    }
    $2_1 = $0_1;
    break label$2;
   }
   $2_1 = $0_1;
   label$13 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    HEAP8[($2_1 + 1 | 0) >> 0] = HEAPU8[($1_1 + 1 | 0) >> 0] | 0;
    HEAP8[($2_1 + 2 | 0) >> 0] = HEAPU8[($1_1 + 2 | 0) >> 0] | 0;
    HEAP8[($2_1 + 3 | 0) >> 0] = HEAPU8[($1_1 + 3 | 0) >> 0] | 0;
    $1_1 = $1_1 + 4 | 0;
    $2_1 = $2_1 + 4 | 0;
    if ($2_1 >>> 0 <= $4_1 >>> 0) {
     continue label$13
    }
    break label$13;
   };
  }
  label$14 : {
   if ($2_1 >>> 0 >= $3_1 >>> 0) {
    break label$14
   }
   label$15 : while (1) {
    HEAP8[$2_1 >> 0] = HEAPU8[$1_1 >> 0] | 0;
    $1_1 = $1_1 + 1 | 0;
    $2_1 = $2_1 + 1 | 0;
    if (($2_1 | 0) != ($3_1 | 0)) {
     continue label$15
    }
    break label$15;
   };
  }
  return $0_1 | 0;
 }
 
 function $200($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, i64toi32_i32$0 = 0, $4_1 = 0, i64toi32_i32$1 = 0, $6_1 = 0, $5_1 = 0, $6$hi = 0;
  label$1 : {
   if (!$2_1) {
    break label$1
   }
   $3_1 = $2_1 + $0_1 | 0;
   HEAP8[($3_1 + -1 | 0) >> 0] = $1_1;
   HEAP8[$0_1 >> 0] = $1_1;
   if ($2_1 >>> 0 < 3 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -2 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 1 | 0) >> 0] = $1_1;
   HEAP8[($3_1 + -3 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 2 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 7 >>> 0) {
    break label$1
   }
   HEAP8[($3_1 + -4 | 0) >> 0] = $1_1;
   HEAP8[($0_1 + 3 | 0) >> 0] = $1_1;
   if ($2_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   $4_1 = (0 - $0_1 | 0) & 3 | 0;
   $3_1 = $0_1 + $4_1 | 0;
   $1_1 = Math_imul($1_1 & 255 | 0, 16843009);
   HEAP32[$3_1 >> 2] = $1_1;
   $4_1 = ($2_1 - $4_1 | 0) & -4 | 0;
   $2_1 = $3_1 + $4_1 | 0;
   HEAP32[($2_1 + -4 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 9 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 8 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 4 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -8 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -12 | 0) >> 2] = $1_1;
   if ($4_1 >>> 0 < 25 >>> 0) {
    break label$1
   }
   HEAP32[($3_1 + 24 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 20 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 16 | 0) >> 2] = $1_1;
   HEAP32[($3_1 + 12 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -16 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -20 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -24 | 0) >> 2] = $1_1;
   HEAP32[($2_1 + -28 | 0) >> 2] = $1_1;
   $5_1 = $3_1 & 4 | 0 | 24 | 0;
   $2_1 = $4_1 - $5_1 | 0;
   if ($2_1 >>> 0 < 32 >>> 0) {
    break label$1
   }
   i64toi32_i32$0 = 0;
   i64toi32_i32$1 = 1;
   i64toi32_i32$1 = __wasm_i64_mul($1_1 | 0, i64toi32_i32$0 | 0, 1 | 0, i64toi32_i32$1 | 0) | 0;
   i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
   $6_1 = i64toi32_i32$1;
   $6$hi = i64toi32_i32$0;
   $1_1 = $3_1 + $5_1 | 0;
   label$2 : while (1) {
    i64toi32_i32$0 = $6$hi;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 24 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 28 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 16 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 20 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[($1_1 + 8 | 0) >> 2] = $6_1;
    HEAP32[($1_1 + 12 | 0) >> 2] = i64toi32_i32$0;
    i64toi32_i32$1 = $1_1;
    HEAP32[$1_1 >> 2] = $6_1;
    HEAP32[($1_1 + 4 | 0) >> 2] = i64toi32_i32$0;
    $1_1 = $1_1 + 32 | 0;
    $2_1 = $2_1 + -32 | 0;
    if ($2_1 >>> 0 > 31 >>> 0) {
     continue label$2
    }
    break label$2;
   };
  }
  return $0_1 | 0;
 }
 
 function $201($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = HEAPU8[($0_1 + 74 | 0) >> 0] | 0;
  HEAP8[($0_1 + 74 | 0) >> 0] = $1_1 + -1 | 0 | $1_1 | 0;
  label$1 : {
   $1_1 = HEAP32[$0_1 >> 2] | 0;
   if (!($1_1 & 8 | 0)) {
    break label$1
   }
   HEAP32[$0_1 >> 2] = $1_1 | 32 | 0;
   return -1 | 0;
  }
  HEAP32[($0_1 + 4 | 0) >> 2] = 0;
  HEAP32[($0_1 + 8 | 0) >> 2] = 0;
  $1_1 = HEAP32[($0_1 + 44 | 0) >> 2] | 0;
  HEAP32[($0_1 + 28 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 20 | 0) >> 2] = $1_1;
  HEAP32[($0_1 + 16 | 0) >> 2] = $1_1 + (HEAP32[($0_1 + 48 | 0) >> 2] | 0) | 0;
  return 0 | 0;
 }
 
 function $202($0_1, $1_1, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  var $3_1 = 0, $4_1 = 0, $5_1 = 0;
  label$1 : {
   label$2 : {
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
    if ($3_1) {
     break label$2
    }
    $4_1 = 0;
    if ($201($2_1 | 0) | 0) {
     break label$1
    }
    $3_1 = HEAP32[($2_1 + 16 | 0) >> 2] | 0;
   }
   label$3 : {
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
    if (($3_1 - $5_1 | 0) >>> 0 >= $1_1 >>> 0) {
     break label$3
    }
    return FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $1_1) | 0 | 0;
   }
   label$4 : {
    label$5 : {
     if ((HEAP8[($2_1 + 75 | 0) >> 0] | 0 | 0) >= (0 | 0)) {
      break label$5
     }
     $3_1 = 0;
     break label$4;
    }
    $4_1 = $1_1;
    label$6 : while (1) {
     label$7 : {
      $3_1 = $4_1;
      if ($3_1) {
       break label$7
      }
      $3_1 = 0;
      break label$4;
     }
     $4_1 = $3_1 + -1 | 0;
     if ((HEAPU8[($0_1 + $4_1 | 0) >> 0] | 0 | 0) != (10 | 0)) {
      continue label$6
     }
     break label$6;
    };
    $4_1 = FUNCTION_TABLE[HEAP32[($2_1 + 36 | 0) >> 2] | 0 | 0]($2_1, $0_1, $3_1) | 0;
    if ($4_1 >>> 0 < $3_1 >>> 0) {
     break label$1
    }
    $0_1 = $0_1 + $3_1 | 0;
    $1_1 = $1_1 - $3_1 | 0;
    $5_1 = HEAP32[($2_1 + 20 | 0) >> 2] | 0;
   }
   $199($5_1 | 0, $0_1 | 0, $1_1 | 0) | 0;
   HEAP32[($2_1 + 20 | 0) >> 2] = (HEAP32[($2_1 + 20 | 0) >> 2] | 0) + $1_1 | 0;
   $4_1 = $3_1 + $1_1 | 0;
  }
  return $4_1 | 0;
 }
 
 function $203($0_1) {
  $0_1 = $0_1 | 0;
  return 0 | 0;
 }
 
 function $204($0_1, $1_1, $1$hi, $2_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  i64toi32_i32$HIGH_BITS = 0;
  return 0 | 0;
 }
 
 function $205($0_1, $1_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  var $2_1 = 0;
  $2_1 = global$0 - 16 | 0;
  global$0 = $2_1;
  HEAP32[($2_1 + 12 | 0) >> 2] = $1_1;
  $1_1 = $137(HEAP32[(0 + 11632 | 0) >> 2] | 0 | 0, $0_1 | 0, $1_1 | 0) | 0;
  global$0 = $2_1 + 16 | 0;
  return $1_1 | 0;
 }
 
 function $206($0_1) {
  $0_1 = $0_1 | 0;
  return 1 | 0;
 }
 
 function $207($0_1) {
  $0_1 = $0_1 | 0;
 }
 
 function $208($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0, $2_1 = 0, $3_1 = 0;
  $1_1 = $0_1;
  label$1 : {
   label$2 : {
    if (!($1_1 & 3 | 0)) {
     break label$2
    }
    $1_1 = $0_1;
    label$3 : while (1) {
     if (!(HEAPU8[$1_1 >> 0] | 0)) {
      break label$1
     }
     $1_1 = $1_1 + 1 | 0;
     if ($1_1 & 3 | 0) {
      continue label$3
     }
     break label$3;
    };
   }
   label$4 : while (1) {
    $2_1 = $1_1;
    $1_1 = $1_1 + 4 | 0;
    $3_1 = HEAP32[$2_1 >> 2] | 0;
    if (!((($3_1 ^ -1 | 0) & ($3_1 + -16843009 | 0) | 0) & -2139062144 | 0)) {
     continue label$4
    }
    break label$4;
   };
   label$5 : {
    if ($3_1 & 255 | 0) {
     break label$5
    }
    return $2_1 - $0_1 | 0 | 0;
   }
   label$6 : while (1) {
    $3_1 = HEAPU8[($2_1 + 1 | 0) >> 0] | 0;
    $1_1 = $2_1 + 1 | 0;
    $2_1 = $1_1;
    if ($3_1) {
     continue label$6
    }
    break label$6;
   };
  }
  return $1_1 - $0_1 | 0 | 0;
 }
 
 function $209() {
  return global$0 | 0;
 }
 
 function $210($0_1) {
  $0_1 = $0_1 | 0;
  global$0 = $0_1;
 }
 
 function $211($0_1) {
  $0_1 = $0_1 | 0;
  var $1_1 = 0;
  $1_1 = (global$0 - $0_1 | 0) & -16 | 0;
  global$0 = $1_1;
  return $1_1 | 0;
 }
 
 function $212($0_1, $1_1, $2_1, $2$hi, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $2$hi = $2$hi | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = $2$hi;
  i64toi32_i32$0 = FUNCTION_TABLE[$0_1 | 0]($1_1, $2_1, i64toi32_i32$0, $3_1) | 0;
  i64toi32_i32$1 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$0 | 0;
 }
 
 function $213($0_1, $1_1, $2_1, $3_1, $4_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  $4_1 = $4_1 | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $17_1 = 0, $18_1 = 0, $6_1 = 0, $7_1 = 0, $9_1 = 0, $9$hi = 0, $12$hi = 0, $5_1 = 0, $5$hi = 0;
  $6_1 = $0_1;
  $7_1 = $1_1;
  i64toi32_i32$0 = 0;
  $9_1 = $2_1;
  $9$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$2 = $3_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
   $17_1 = 0;
  } else {
   i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$0 << i64toi32_i32$4 | 0) | 0;
   $17_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
  }
  $12$hi = i64toi32_i32$1;
  i64toi32_i32$1 = $9$hi;
  i64toi32_i32$0 = $9_1;
  i64toi32_i32$2 = $12$hi;
  i64toi32_i32$3 = $17_1;
  i64toi32_i32$2 = i64toi32_i32$1 | i64toi32_i32$2 | 0;
  i64toi32_i32$2 = $212($6_1 | 0, $7_1 | 0, i64toi32_i32$0 | i64toi32_i32$3 | 0 | 0, i64toi32_i32$2 | 0, $4_1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  $5_1 = i64toi32_i32$2;
  $5$hi = i64toi32_i32$0;
  i64toi32_i32$1 = i64toi32_i32$2;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $18_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $18_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$1 >>> i64toi32_i32$4 | 0) | 0;
  }
  fimport$8($18_1 | 0);
  i64toi32_i32$2 = $5$hi;
  return $5_1 | 0;
 }
 
 function $214($0_1, $1_1, $1$hi, $2_1, $3_1) {
  $0_1 = $0_1 | 0;
  $1_1 = $1_1 | 0;
  $1$hi = $1$hi | 0;
  $2_1 = $2_1 | 0;
  $3_1 = $3_1 | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, i64toi32_i32$3 = 0, $12_1 = 0, $4_1 = 0, $6_1 = 0, i64toi32_i32$2 = 0;
  $4_1 = $0_1;
  i64toi32_i32$0 = $1$hi;
  $6_1 = $1_1;
  i64toi32_i32$2 = $1_1;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $12_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $12_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  return fimport$9($4_1 | 0, $6_1 | 0, $12_1 | 0, $2_1 | 0, $3_1 | 0) | 0 | 0;
 }
 
 function _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$4 = 0, i64toi32_i32$0 = 0, i64toi32_i32$1 = 0, var$2 = 0, i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, var$3 = 0, var$4 = 0, var$5 = 0, $21_1 = 0, $22_1 = 0, var$6 = 0, $24_1 = 0, $17_1 = 0, $18_1 = 0, $23_1 = 0, $29_1 = 0, $45_1 = 0, $56$hi = 0, $62$hi = 0;
  i64toi32_i32$0 = var$1$hi;
  var$2 = var$1;
  var$4 = var$2 >>> 16 | 0;
  i64toi32_i32$0 = var$0$hi;
  var$3 = var$0;
  var$5 = var$3 >>> 16 | 0;
  $17_1 = Math_imul(var$4, var$5);
  $18_1 = var$2;
  i64toi32_i32$2 = var$3;
  i64toi32_i32$1 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$1 = 0;
   $21_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
   $21_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
  }
  $23_1 = $17_1 + Math_imul($18_1, $21_1) | 0;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$0 = var$1;
  i64toi32_i32$2 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$2 = 0;
   $22_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
  } else {
   i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
   $22_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
  }
  $29_1 = $23_1 + Math_imul($22_1, var$3) | 0;
  var$2 = var$2 & 65535 | 0;
  var$3 = var$3 & 65535 | 0;
  var$6 = Math_imul(var$2, var$3);
  var$2 = (var$6 >>> 16 | 0) + Math_imul(var$2, var$5) | 0;
  $45_1 = $29_1 + (var$2 >>> 16 | 0) | 0;
  var$2 = (var$2 & 65535 | 0) + Math_imul(var$4, var$3) | 0;
  i64toi32_i32$2 = 0;
  i64toi32_i32$1 = $45_1 + (var$2 >>> 16 | 0) | 0;
  i64toi32_i32$0 = 0;
  i64toi32_i32$3 = 32;
  i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
  if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
   i64toi32_i32$0 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
   $24_1 = 0;
  } else {
   i64toi32_i32$0 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$1 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$2 << i64toi32_i32$4 | 0) | 0;
   $24_1 = i64toi32_i32$1 << i64toi32_i32$4 | 0;
  }
  $56$hi = i64toi32_i32$0;
  i64toi32_i32$0 = 0;
  $62$hi = i64toi32_i32$0;
  i64toi32_i32$0 = $56$hi;
  i64toi32_i32$2 = $24_1;
  i64toi32_i32$1 = $62$hi;
  i64toi32_i32$3 = var$2 << 16 | 0 | (var$6 & 65535 | 0) | 0;
  i64toi32_i32$1 = i64toi32_i32$0 | i64toi32_i32$1 | 0;
  i64toi32_i32$2 = i64toi32_i32$2 | i64toi32_i32$3 | 0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
  return i64toi32_i32$2 | 0;
 }
 
 function _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$2 = 0, i64toi32_i32$3 = 0, i64toi32_i32$4 = 0, i64toi32_i32$1 = 0, i64toi32_i32$0 = 0, i64toi32_i32$5 = 0, var$2 = 0, var$3 = 0, var$4 = 0, var$5 = 0, var$5$hi = 0, var$6 = 0, var$6$hi = 0, i64toi32_i32$6 = 0, $37_1 = 0, $38_1 = 0, $39_1 = 0, $40_1 = 0, $41_1 = 0, $42_1 = 0, $43_1 = 0, $44_1 = 0, var$8$hi = 0, $45_1 = 0, $46_1 = 0, $47_1 = 0, $48_1 = 0, var$7$hi = 0, $49_1 = 0, $63$hi = 0, $65_1 = 0, $65$hi = 0, $120$hi = 0, $129$hi = 0, $134$hi = 0, var$8 = 0, $140_1 = 0, $140$hi = 0, $142$hi = 0, $144_1 = 0, $144$hi = 0, $151_1 = 0, $151$hi = 0, $154$hi = 0, var$7 = 0, $165$hi = 0;
  label$1 : {
   label$2 : {
    label$3 : {
     label$4 : {
      label$5 : {
       label$6 : {
        label$7 : {
         label$8 : {
          label$9 : {
           label$10 : {
            label$11 : {
             i64toi32_i32$0 = var$0$hi;
             i64toi32_i32$2 = var$0;
             i64toi32_i32$1 = 0;
             i64toi32_i32$3 = 32;
             i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
             if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
              i64toi32_i32$1 = 0;
              $37_1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
             } else {
              i64toi32_i32$1 = i64toi32_i32$0 >>> i64toi32_i32$4 | 0;
              $37_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$0 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
             }
             var$2 = $37_1;
             if (var$2) {
              block : {
               i64toi32_i32$1 = var$1$hi;
               var$3 = var$1;
               if (!var$3) {
                break label$11
               }
               i64toi32_i32$1 = var$1$hi;
               i64toi32_i32$0 = var$1;
               i64toi32_i32$2 = 0;
               i64toi32_i32$3 = 32;
               i64toi32_i32$4 = i64toi32_i32$3 & 31 | 0;
               if (32 >>> 0 <= (i64toi32_i32$3 & 63 | 0) >>> 0) {
                i64toi32_i32$2 = 0;
                $38_1 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
               } else {
                i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$4 | 0;
                $38_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$0 >>> i64toi32_i32$4 | 0) | 0;
               }
               var$4 = $38_1;
               if (!var$4) {
                break label$9
               }
               var$2 = Math_clz32(var$4) - Math_clz32(var$2) | 0;
               if (var$2 >>> 0 <= 31 >>> 0) {
                break label$8
               }
               break label$2;
              }
             }
             i64toi32_i32$2 = var$1$hi;
             i64toi32_i32$1 = var$1;
             i64toi32_i32$0 = 1;
             i64toi32_i32$3 = 0;
             if (i64toi32_i32$2 >>> 0 > i64toi32_i32$0 >>> 0 | ((i64toi32_i32$2 | 0) == (i64toi32_i32$0 | 0) & i64toi32_i32$1 >>> 0 >= i64toi32_i32$3 >>> 0 | 0) | 0) {
              break label$2
             }
             i64toi32_i32$1 = var$0$hi;
             var$2 = var$0;
             i64toi32_i32$1 = var$1$hi;
             var$3 = var$1;
             var$2 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
             i64toi32_i32$1 = 0;
             __wasm_intrinsics_temp_i64 = var$0 - Math_imul(var$2, var$3) | 0;
             __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
             i64toi32_i32$1 = 0;
             i64toi32_i32$2 = var$2;
             i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
             return i64toi32_i32$2 | 0;
            }
            i64toi32_i32$2 = var$1$hi;
            i64toi32_i32$3 = var$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$1 = 0;
             $39_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
            } else {
             i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
             $39_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
            }
            var$3 = $39_1;
            i64toi32_i32$1 = var$0$hi;
            if (!var$0) {
             break label$7
            }
            if (!var$3) {
             break label$6
            }
            var$4 = var$3 + -1 | 0;
            if (var$4 & var$3 | 0) {
             break label$6
            }
            i64toi32_i32$1 = 0;
            i64toi32_i32$2 = var$4 & var$2 | 0;
            i64toi32_i32$3 = 0;
            i64toi32_i32$0 = 32;
            i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
            if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
             i64toi32_i32$3 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
             $40_1 = 0;
            } else {
             i64toi32_i32$3 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
             $40_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
            }
            $63$hi = i64toi32_i32$3;
            i64toi32_i32$3 = var$0$hi;
            i64toi32_i32$1 = var$0;
            i64toi32_i32$2 = 0;
            i64toi32_i32$0 = -1;
            i64toi32_i32$2 = i64toi32_i32$3 & i64toi32_i32$2 | 0;
            $65_1 = i64toi32_i32$1 & i64toi32_i32$0 | 0;
            $65$hi = i64toi32_i32$2;
            i64toi32_i32$2 = $63$hi;
            i64toi32_i32$3 = $40_1;
            i64toi32_i32$1 = $65$hi;
            i64toi32_i32$0 = $65_1;
            i64toi32_i32$1 = i64toi32_i32$2 | i64toi32_i32$1 | 0;
            __wasm_intrinsics_temp_i64 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
            __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
            i64toi32_i32$1 = 0;
            i64toi32_i32$3 = var$2 >>> ((__wasm_ctz_i32(var$3 | 0) | 0) & 31 | 0) | 0;
            i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
            return i64toi32_i32$3 | 0;
           }
          }
          var$4 = var$3 + -1 | 0;
          if (!(var$4 & var$3 | 0)) {
           break label$5
          }
          var$2 = (Math_clz32(var$3) + 33 | 0) - Math_clz32(var$2) | 0;
          var$3 = 0 - var$2 | 0;
          break label$3;
         }
         var$3 = 63 - var$2 | 0;
         var$2 = var$2 + 1 | 0;
         break label$3;
        }
        var$4 = (var$2 >>> 0) / (var$3 >>> 0) | 0;
        i64toi32_i32$3 = 0;
        i64toi32_i32$2 = var$2 - Math_imul(var$4, var$3) | 0;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 32;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
         $41_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $41_1 = i64toi32_i32$2 << i64toi32_i32$4 | 0;
        }
        __wasm_intrinsics_temp_i64 = $41_1;
        __wasm_intrinsics_temp_i64$hi = i64toi32_i32$1;
        i64toi32_i32$1 = 0;
        i64toi32_i32$2 = var$4;
        i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
        return i64toi32_i32$2 | 0;
       }
       var$2 = Math_clz32(var$3) - Math_clz32(var$2) | 0;
       if (var$2 >>> 0 < 31 >>> 0) {
        break label$4
       }
       break label$2;
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      __wasm_intrinsics_temp_i64 = var$4 & var$0 | 0;
      __wasm_intrinsics_temp_i64$hi = i64toi32_i32$2;
      if ((var$3 | 0) == (1 | 0)) {
       break label$1
      }
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$2 = 0;
      $120$hi = i64toi32_i32$2;
      i64toi32_i32$2 = var$0$hi;
      i64toi32_i32$3 = var$0;
      i64toi32_i32$1 = $120$hi;
      i64toi32_i32$0 = __wasm_ctz_i32(var$3 | 0) | 0;
      i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
      if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
       i64toi32_i32$1 = 0;
       $42_1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
      } else {
       i64toi32_i32$1 = i64toi32_i32$2 >>> i64toi32_i32$4 | 0;
       $42_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$2 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$3 >>> i64toi32_i32$4 | 0) | 0;
      }
      i64toi32_i32$3 = $42_1;
      i64toi32_i32$HIGH_BITS = i64toi32_i32$1;
      return i64toi32_i32$3 | 0;
     }
     var$3 = 63 - var$2 | 0;
     var$2 = var$2 + 1 | 0;
    }
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$3 = 0;
    $129$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$2 = var$0;
    i64toi32_i32$1 = $129$hi;
    i64toi32_i32$0 = var$2 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$1 = 0;
     $43_1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
    } else {
     i64toi32_i32$1 = i64toi32_i32$3 >>> i64toi32_i32$4 | 0;
     $43_1 = (((1 << i64toi32_i32$4 | 0) - 1 | 0) & i64toi32_i32$3 | 0) << (32 - i64toi32_i32$4 | 0) | 0 | (i64toi32_i32$2 >>> i64toi32_i32$4 | 0) | 0;
    }
    var$5 = $43_1;
    var$5$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$1 = 0;
    $134$hi = i64toi32_i32$1;
    i64toi32_i32$1 = var$0$hi;
    i64toi32_i32$3 = var$0;
    i64toi32_i32$2 = $134$hi;
    i64toi32_i32$0 = var$3 & 63 | 0;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
     $44_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$3 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$1 << i64toi32_i32$4 | 0) | 0;
     $44_1 = i64toi32_i32$3 << i64toi32_i32$4 | 0;
    }
    var$0 = $44_1;
    var$0$hi = i64toi32_i32$2;
    label$13 : {
     if (var$2) {
      block3 : {
       i64toi32_i32$2 = var$1$hi;
       i64toi32_i32$1 = var$1;
       i64toi32_i32$3 = -1;
       i64toi32_i32$0 = -1;
       i64toi32_i32$4 = i64toi32_i32$1 + i64toi32_i32$0 | 0;
       i64toi32_i32$5 = i64toi32_i32$2 + i64toi32_i32$3 | 0;
       if (i64toi32_i32$4 >>> 0 < i64toi32_i32$0 >>> 0) {
        i64toi32_i32$5 = i64toi32_i32$5 + 1 | 0
       }
       var$8 = i64toi32_i32$4;
       var$8$hi = i64toi32_i32$5;
       label$15 : while (1) {
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$2 = var$5;
        i64toi32_i32$1 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
         $45_1 = 0;
        } else {
         i64toi32_i32$1 = ((1 << i64toi32_i32$3 | 0) - 1 | 0) & (i64toi32_i32$2 >>> (32 - i64toi32_i32$3 | 0) | 0) | 0 | (i64toi32_i32$5 << i64toi32_i32$3 | 0) | 0;
         $45_1 = i64toi32_i32$2 << i64toi32_i32$3 | 0;
        }
        $140_1 = $45_1;
        $140$hi = i64toi32_i32$1;
        i64toi32_i32$1 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$3 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = 0;
         $46_1 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$1 >>> i64toi32_i32$3 | 0;
         $46_1 = (((1 << i64toi32_i32$3 | 0) - 1 | 0) & i64toi32_i32$1 | 0) << (32 - i64toi32_i32$3 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$3 | 0) | 0;
        }
        $142$hi = i64toi32_i32$2;
        i64toi32_i32$2 = $140$hi;
        i64toi32_i32$1 = $140_1;
        i64toi32_i32$5 = $142$hi;
        i64toi32_i32$0 = $46_1;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$5 = i64toi32_i32$1 | i64toi32_i32$0 | 0;
        var$5$hi = i64toi32_i32$5;
        $144_1 = var$5;
        $144$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$5 = var$5$hi;
        i64toi32_i32$5 = var$8$hi;
        i64toi32_i32$2 = var$8;
        i64toi32_i32$1 = var$5$hi;
        i64toi32_i32$0 = var$5;
        i64toi32_i32$3 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$4 = i64toi32_i32$6 + i64toi32_i32$1 | 0;
        i64toi32_i32$4 = i64toi32_i32$5 - i64toi32_i32$4 | 0;
        i64toi32_i32$5 = i64toi32_i32$3;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 63;
        i64toi32_i32$1 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$4 >> 31 | 0;
         $47_1 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
        } else {
         i64toi32_i32$2 = i64toi32_i32$4 >> i64toi32_i32$1 | 0;
         $47_1 = (((1 << i64toi32_i32$1 | 0) - 1 | 0) & i64toi32_i32$4 | 0) << (32 - i64toi32_i32$1 | 0) | 0 | (i64toi32_i32$5 >>> i64toi32_i32$1 | 0) | 0;
        }
        var$6 = $47_1;
        var$6$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$1$hi;
        i64toi32_i32$2 = var$6$hi;
        i64toi32_i32$4 = var$6;
        i64toi32_i32$5 = var$1$hi;
        i64toi32_i32$0 = var$1;
        i64toi32_i32$5 = i64toi32_i32$2 & i64toi32_i32$5 | 0;
        $151_1 = i64toi32_i32$4 & i64toi32_i32$0 | 0;
        $151$hi = i64toi32_i32$5;
        i64toi32_i32$5 = $144$hi;
        i64toi32_i32$2 = $144_1;
        i64toi32_i32$4 = $151$hi;
        i64toi32_i32$0 = $151_1;
        i64toi32_i32$1 = i64toi32_i32$2 - i64toi32_i32$0 | 0;
        i64toi32_i32$6 = i64toi32_i32$2 >>> 0 < i64toi32_i32$0 >>> 0;
        i64toi32_i32$3 = i64toi32_i32$6 + i64toi32_i32$4 | 0;
        i64toi32_i32$3 = i64toi32_i32$5 - i64toi32_i32$3 | 0;
        var$5 = i64toi32_i32$1;
        var$5$hi = i64toi32_i32$3;
        i64toi32_i32$3 = var$0$hi;
        i64toi32_i32$5 = var$0;
        i64toi32_i32$2 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
        if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
         i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
         $48_1 = 0;
        } else {
         i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
         $48_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
        }
        $154$hi = i64toi32_i32$2;
        i64toi32_i32$2 = var$7$hi;
        i64toi32_i32$2 = $154$hi;
        i64toi32_i32$3 = $48_1;
        i64toi32_i32$5 = var$7$hi;
        i64toi32_i32$0 = var$7;
        i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
        var$0 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
        var$0$hi = i64toi32_i32$5;
        i64toi32_i32$5 = var$6$hi;
        i64toi32_i32$2 = var$6;
        i64toi32_i32$3 = 0;
        i64toi32_i32$0 = 1;
        i64toi32_i32$3 = i64toi32_i32$5 & i64toi32_i32$3 | 0;
        var$6 = i64toi32_i32$2 & i64toi32_i32$0 | 0;
        var$6$hi = i64toi32_i32$3;
        var$7 = var$6;
        var$7$hi = i64toi32_i32$3;
        var$2 = var$2 + -1 | 0;
        if (var$2) {
         continue label$15
        }
        break label$15;
       };
       break label$13;
      }
     }
    }
    i64toi32_i32$3 = var$5$hi;
    __wasm_intrinsics_temp_i64 = var$5;
    __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
    i64toi32_i32$3 = var$0$hi;
    i64toi32_i32$5 = var$0;
    i64toi32_i32$2 = 0;
    i64toi32_i32$0 = 1;
    i64toi32_i32$4 = i64toi32_i32$0 & 31 | 0;
    if (32 >>> 0 <= (i64toi32_i32$0 & 63 | 0) >>> 0) {
     i64toi32_i32$2 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
     $49_1 = 0;
    } else {
     i64toi32_i32$2 = ((1 << i64toi32_i32$4 | 0) - 1 | 0) & (i64toi32_i32$5 >>> (32 - i64toi32_i32$4 | 0) | 0) | 0 | (i64toi32_i32$3 << i64toi32_i32$4 | 0) | 0;
     $49_1 = i64toi32_i32$5 << i64toi32_i32$4 | 0;
    }
    $165$hi = i64toi32_i32$2;
    i64toi32_i32$2 = var$6$hi;
    i64toi32_i32$2 = $165$hi;
    i64toi32_i32$3 = $49_1;
    i64toi32_i32$5 = var$6$hi;
    i64toi32_i32$0 = var$6;
    i64toi32_i32$5 = i64toi32_i32$2 | i64toi32_i32$5 | 0;
    i64toi32_i32$3 = i64toi32_i32$3 | i64toi32_i32$0 | 0;
    i64toi32_i32$HIGH_BITS = i64toi32_i32$5;
    return i64toi32_i32$3 | 0;
   }
   i64toi32_i32$3 = var$0$hi;
   __wasm_intrinsics_temp_i64 = var$0;
   __wasm_intrinsics_temp_i64$hi = i64toi32_i32$3;
   i64toi32_i32$3 = 0;
   var$0 = 0;
   var$0$hi = i64toi32_i32$3;
  }
  i64toi32_i32$3 = var$0$hi;
  i64toi32_i32$5 = var$0;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$3;
  return i64toi32_i32$5 | 0;
 }
 
 function __wasm_i64_mul(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int3mul3Mul3mul17h070e9a1c69faec5bE(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_i64_udiv(var$0, var$0$hi, var$1, var$1$hi) {
  var$0 = var$0 | 0;
  var$0$hi = var$0$hi | 0;
  var$1 = var$1 | 0;
  var$1$hi = var$1$hi | 0;
  var i64toi32_i32$0 = 0, i64toi32_i32$1 = 0;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$0 = var$1$hi;
  i64toi32_i32$0 = var$0$hi;
  i64toi32_i32$1 = var$1$hi;
  i64toi32_i32$1 = _ZN17compiler_builtins3int4udiv10divmod_u6417h6026910b5ed08e40E(var$0 | 0, i64toi32_i32$0 | 0, var$1 | 0, i64toi32_i32$1 | 0) | 0;
  i64toi32_i32$0 = i64toi32_i32$HIGH_BITS;
  i64toi32_i32$HIGH_BITS = i64toi32_i32$0;
  return i64toi32_i32$1 | 0;
 }
 
 function __wasm_rotl_i32(var$0, var$1) {
  var$0 = var$0 | 0;
  var$1 = var$1 | 0;
  var var$2 = 0;
  var$2 = var$1 & 31 | 0;
  var$1 = (0 - var$1 | 0) & 31 | 0;
  return ((-1 >>> var$2 | 0) & var$0 | 0) << var$2 | 0 | (((-1 << var$1 | 0) & var$0 | 0) >>> var$1 | 0) | 0 | 0;
 }
 
 function __wasm_ctz_i32(var$0) {
  var$0 = var$0 | 0;
  if (var$0) {
   return 31 - Math_clz32((var$0 + -1 | 0) ^ var$0 | 0) | 0 | 0
  }
  return 32 | 0;
 }
 
 // EMSCRIPTEN_END_FUNCS
;
 bufferView = HEAPU8;
 initActiveSegments(env);
 var FUNCTION_TABLE = Table([null, $97, $98, $43, $44, $45, $47, $46, $142, $125, $126, $138, $139, $143, $203, $204]);
 function __wasm_memory_size() {
  return buffer.byteLength / 65536 | 0;
 }
 
 return {
  "__wasm_call_ctors": $0, 
  "malloc": $194, 
  "free": $195, 
  "mid_song_get_num_missing_instruments": $13, 
  "mid_song_get_missing_instrument": $14, 
  "__indirect_function_table": FUNCTION_TABLE, 
  "mid_song_note_on": $48, 
  "mid_song_midi_message": $54, 
  "mid_song_start": $58, 
  "mid_song_get_total_time": $63, 
  "mid_song_read_wave": $64, 
  "mid_set_master_pitch": $73, 
  "mid_get_freq_table": $74, 
  "mid_reset_freq_table": $75, 
  "mid_istream_open_mem": $99, 
  "mid_istream_close": $102, 
  "mid_init": $104, 
  "mid_create_options": $107, 
  "mid_song_load": $109, 
  "mid_song_free": $110, 
  "mid_exit": $111, 
  "__errno_location": $174, 
  "fflush": $123, 
  "emscripten_stack_get_end": $193, 
  "stackSave": $209, 
  "stackRestore": $210, 
  "stackAlloc": $211, 
  "emscripten_stack_init": $191, 
  "emscripten_stack_get_free": $192, 
  "dynCall_jiji": $213
 };
}

  return asmFunc(asmLibraryArg);
}

)(asmLibraryArg);
  },

  instantiate: /** @suppress{checkTypes} */ function(binary, info) {
    return {
      then: function(ok) {
        var module = new WebAssembly.Module(binary);
        ok({
          'instance': new WebAssembly.Instance(module)
        });
        // Emulate a simple WebAssembly.instantiate(..).then(()=>{}).catch(()=>{}) syntax.
        return { catch: function() {} };
      }
    };
  },

  RuntimeError: Error
};

// We don't need to actually download a wasm binary, mark it as present but empty.
wasmBinary = [];

// end include: wasm2js.js
if (typeof WebAssembly !== 'object') {
  abort('no native wasm support detected');
}

// include: runtime_safe_heap.js


// In MINIMAL_RUNTIME, setValue() and getValue() are only available when building with safe heap enabled, for heap safety checking.
// In traditional runtime, setValue() and getValue() are always available (although their use is highly discouraged due to perf penalties)

/** @param {number} ptr
    @param {number} value
    @param {string} type
    @param {number|boolean=} noSafe */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': HEAP8[((ptr)>>0)] = value; break;
      case 'i8': HEAP8[((ptr)>>0)] = value; break;
      case 'i16': HEAP16[((ptr)>>1)] = value; break;
      case 'i32': HEAP32[((ptr)>>2)] = value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)] = tempI64[0],HEAP32[(((ptr)+(4))>>2)] = tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)] = value; break;
      case 'double': HEAPF64[((ptr)>>3)] = value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @param {number} ptr
    @param {string} type
    @param {number|boolean=} noSafe */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch (type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

// end include: runtime_safe_heap.js
// Wasm globals

var wasmMemory;

//========================================
// Runtime essentials
//========================================

// whether we are quitting the application. no code should run after this.
// set in exit() and abort()
var ABORT = false;

// set by exit() and abort().  Passed to 'onExit' handler.
// NOTE: This is also used as the process return code code in shell environments
// but only when noExitRuntime is false.
var EXITSTATUS;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

// C calling interface.
/** @param {string|null=} returnType
    @param {Array=} argTypes
    @param {Arguments|Array=} args
    @param {Object=} opts */
function ccall(ident, returnType, argTypes, args, opts) {
  // For fast lookup of conversion functions
  var toC = {
    'string': function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    },
    'array': function(arr) {
      var ret = stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    }
  };

  function convertReturnValue(ret) {
    if (returnType === 'string') return UTF8ToString(ret);
    if (returnType === 'boolean') return Boolean(ret);
    return ret;
  }

  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  function onDone(ret) {
    if (stack !== 0) stackRestore(stack);
    return convertReturnValue(ret);
  }

  ret = onDone(ret);
  return ret;
}

/** @param {string=} returnType
    @param {Array=} argTypes
    @param {Object=} opts */
function cwrap(ident, returnType, argTypes, opts) {
  return function() {
    return ccall(ident, returnType, argTypes, arguments, opts);
  }
}

// We used to include malloc/free by default in the past. Show a helpful error in
// builds with assertions.

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((Uint8Array|Array<number>), number)} */
function allocate(slab, allocator) {
  var ret;
  assert(typeof allocator === 'number', 'allocate no longer takes a type argument')
  assert(typeof slab !== 'number', 'allocate no longer takes a number as arg0')

  if (allocator == ALLOC_STACK) {
    ret = stackAlloc(slab.length);
  } else {
    ret = _malloc(slab.length);
  }

  if (slab.subarray || slab.slice) {
    HEAPU8.set(/** @type {!Uint8Array} */(slab), ret);
  } else {
    HEAPU8.set(new Uint8Array(slab), ret);
  }
  return ret;
}

// include: runtime_strings.js


// runtime_strings.js: Strings related runtime functions that are part of both MINIMAL_RUNTIME and regular runtime.

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;

/**
 * @param {number} idx
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ArrayToString(heap, idx, maxBytesToRead) {
  var endIdx = idx + maxBytesToRead;
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  // (As a tiny code save trick, compare endPtr against endIdx using a negation, so that undefined means Infinity)
  while (heap[endPtr] && !(endPtr >= endIdx)) ++endPtr;

  if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(heap.subarray(idx, endPtr));
  } else {
    var str = '';
    // If building with TextDecoder, we have already computed the string length above, so test loop end condition against that
    while (idx < endPtr) {
      // For UTF8 byte structure, see:
      // http://en.wikipedia.org/wiki/UTF-8#Description
      // https://www.ietf.org/rfc/rfc2279.txt
      // https://tools.ietf.org/html/rfc3629
      var u0 = heap[idx++];
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      var u1 = heap[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      var u2 = heap[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        if ((u0 & 0xF8) != 0xF0) warnOnce('Invalid UTF-8 leading byte 0x' + u0.toString(16) + ' encountered when deserializing a UTF-8 string in wasm memory to a JS string!');
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | (heap[idx++] & 63);
      }

      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
  return str;
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns a
// copy of that string as a Javascript String object.
// maxBytesToRead: an optional length that specifies the maximum number of bytes to read. You can omit
//                 this parameter to scan the string until the first \0 byte. If maxBytesToRead is
//                 passed, and the string at [ptr, ptr+maxBytesToReadr[ contains a null byte in the
//                 middle, then the string will cut short at that byte index (i.e. maxBytesToRead will
//                 not produce a string of exact length [ptr, ptr+maxBytesToRead[)
//                 N.B. mixing frequent uses of UTF8ToString() with and without maxBytesToRead may
//                 throw JS JIT optimizations off, so it is worth to consider consistently using one
//                 style or the other.
/**
 * @param {number} ptr
 * @param {number=} maxBytesToRead
 * @return {string}
 */
function UTF8ToString(ptr, maxBytesToRead) {
  return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : '';
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   heap: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array.
//                    This count should include the null terminator,
//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) {
      var u1 = str.charCodeAt(++i);
      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);
    }
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      heap[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      heap[outIdx++] = 0xC0 | (u >> 6);
      heap[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      heap[outIdx++] = 0xE0 | (u >> 12);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 3 >= endIdx) break;
      if (u > 0x10FFFF) warnOnce('Invalid Unicode code point 0x' + u.toString(16) + ' encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x10FFFF).');
      heap[outIdx++] = 0xF0 | (u >> 18);
      heap[outIdx++] = 0x80 | ((u >> 12) & 63);
      heap[outIdx++] = 0x80 | ((u >> 6) & 63);
      heap[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  heap[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.
function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) ++len;
    else if (u <= 0x7FF) len += 2;
    else if (u <= 0xFFFF) len += 3;
    else len += 4;
  }
  return len;
}

// end include: runtime_strings.js
// include: runtime_strings_extra.js


// runtime_strings_extra.js: Strings related runtime functions that are available only in regular runtime.

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAPU8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;

function UTF16ToString(ptr, maxBytesToRead) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  var maxIdx = idx + maxBytesToRead / 2;
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(idx >= maxIdx) && HEAPU16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var str = '';

    // If maxBytesToRead is not passed explicitly, it will be undefined, and the for-loop's condition
    // will always evaluate to true. The loop is then terminated on the first null char.
    for (var i = 0; !(i >= maxBytesToRead / 2); ++i) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) break;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }

    return str;
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)] = codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr, maxBytesToRead) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  // If maxBytesToRead is not passed explicitly, it will be undefined, and this
  // will always evaluate to true. This saves on code size.
  while (!(i >= maxBytesToRead / 4)) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0) break;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
  return str;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)] = codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)] = 0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated
    @param {boolean=} dontAddNull */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

/** @param {boolean=} dontAddNull */
function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)] = str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)] = 0;
}

// end include: runtime_strings_extra.js
// Memory management

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBufferAndViews(buf) {
  buffer = buf;
  Module['HEAP8'] = HEAP8 = new Int8Array(buf);
  Module['HEAP16'] = HEAP16 = new Int16Array(buf);
  Module['HEAP32'] = HEAP32 = new Int32Array(buf);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buf);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buf);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buf);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buf);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buf);
}

var TOTAL_STACK = 5242880;
if (Module['TOTAL_STACK']) assert(TOTAL_STACK === Module['TOTAL_STACK'], 'the stack size can no longer be determined at runtime')

var INITIAL_MEMORY = Module['INITIAL_MEMORY'] || 67108864;
if (!Object.getOwnPropertyDescriptor(Module, 'INITIAL_MEMORY')) {
  Object.defineProperty(Module, 'INITIAL_MEMORY', {
    configurable: true,
    get: function() {
      abort('Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)')
    }
  });
}

assert(INITIAL_MEMORY >= TOTAL_STACK, 'INITIAL_MEMORY should be larger than TOTAL_STACK, was ' + INITIAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');

// In non-standalone/normal mode, we create the memory here.
// include: runtime_init_memory.js


// Create the wasm memory. (Note: this only applies if IMPORTED_MEMORY is defined)

  if (Module['wasmMemory']) {
    wasmMemory = Module['wasmMemory'];
  } else
  {
    wasmMemory = new WebAssembly.Memory({
      'initial': INITIAL_MEMORY / 65536,
      'maximum': INITIAL_MEMORY / 65536
    });
  }

if (wasmMemory) {
  buffer = wasmMemory.buffer;
}

// If the user provides an incorrect length, just use that length instead rather than providing the user to
// specifically provide the memory length with Module['INITIAL_MEMORY'].
INITIAL_MEMORY = buffer.byteLength;
assert(INITIAL_MEMORY % 65536 === 0);
updateGlobalBufferAndViews(buffer);

// end include: runtime_init_memory.js

// include: runtime_init_table.js
// In regular non-RELOCATABLE mode the table is exported
// from the wasm module and this will be assigned once
// the exports are available.
var wasmTable;

// end include: runtime_init_table.js
// include: runtime_stack_check.js


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  var max = _emscripten_stack_get_end();
  assert((max & 3) == 0);
  // The stack grows downwards
  HEAPU32[(max >> 2)+1] = 0x2135467;
  HEAPU32[(max >> 2)+2] = 0x89BACDFE;
  // Also test the global address 0 for integrity.
  HEAP32[0] = 0x63736d65; /* 'emsc' */
}

function checkStackCookie() {
  if (ABORT) return;
  var max = _emscripten_stack_get_end();
  var cookie1 = HEAPU32[(max >> 2)+1];
  var cookie2 = HEAPU32[(max >> 2)+2];
  if (cookie1 != 0x2135467 || cookie2 != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x' + cookie2.toString(16) + ' ' + cookie1.toString(16));
  }
  // Also test the global address 0 for integrity.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) abort('Runtime error: The application has corrupted its heap memory area (address zero)!');
}

// end include: runtime_stack_check.js
// include: runtime_assertions.js


// Endianness check
(function() {
  var h16 = new Int16Array(1);
  var h8 = new Int8Array(h16.buffer);
  h16[0] = 0x6373;
  if (h8[0] !== 0x73 || h8[1] !== 0x63) throw 'Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)';
})();

// end include: runtime_assertions.js
var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the main() is called

var runtimeInitialized = false;
var runtimeExited = false;
var runtimeKeepaliveCounter = 0;

function keepRuntimeAlive() {
  return noExitRuntime || runtimeKeepaliveCounter > 0;
}

function preRun() {

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPRERUN__);
}

function initRuntime() {
  checkStackCookie();
  assert(!runtimeInitialized);
  runtimeInitialized = true;

  
if (!Module["noFSInit"] && !FS.init.initialized)
  FS.init();
FS.ignorePermissions = false;

TTY.init();
  callRuntimeCallbacks(__ATINIT__);
}

function exitRuntime() {
  checkStackCookie();
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();

  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }

  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnExit(cb) {
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// include: runtime_math.js


// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/imul
// || MIN_NODE_VERSION < 0.12
// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math.imul || Math.imul(0xffffffff, 5) !== -5) Math.imul = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/fround
if (!Math.fround) {
  var froundBuffer = new Float32Array(1);
  Math.fround = function(x) { froundBuffer[0] = x; return froundBuffer[0] };
}

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/clz32
if (!Math.clz32) Math.clz32 = function(x) {
  var n = 32;
  var y = x >> 16; if (y) { n -= 16; x = y; }
  y = x >> 8; if (y) { n -= 8; x = y; }
  y = x >> 4; if (y) { n -= 4; x = y; }
  y = x >> 2; if (y) { n -= 2; x = y; }
  y = x >> 1; if (y) return n - 2;
  return n - x;
};

// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/trunc
if (!Math.trunc) Math.trunc = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};

assert(Math.imul, 'This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.fround, 'This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.clz32, 'This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');
assert(Math.trunc, 'This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill');

// end include: runtime_math.js
// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// Module.preRun (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
}

function addRunDependency(id) {
  runDependencies++;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            err('still waiting on run dependencies:');
          }
          err('dependency: ' + dep);
        }
        if (shown) {
          err('(end of list)');
        }
      }, 10000);
    }
  } else {
    err('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;

  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }

  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    err('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

/** @param {string|number=} what */
function abort(what) {
  {
    if (Module['onAbort']) {
      Module['onAbort'](what);
    }
  }

  what += '';
  err(what);

  ABORT = true;
  EXITSTATUS = 1;

  var output = 'abort(' + what + ') at ' + stackTrace();
  what = output;

  // Use a wasm runtime error, because a JS error might be seen as a foreign
  // exception, which means we'd run destructors on it. We need the error to
  // simply make the program stop.
  var e = new WebAssembly.RuntimeError(what);

  // Throw the error whether or not MODULARIZE is set because abort is used
  // in code paths apart from instantiation where an exception is expected
  // to be thrown when abort is called.
  throw e;
}

// {{MEM_INITIALIZER}}

// include: memoryprofiler.js


// end include: memoryprofiler.js
// include: URIUtils.js


// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  // Prefix of data URIs emitted by SINGLE_FILE and related options.
  return filename.startsWith(dataURIPrefix);
}

// Indicates whether filename is delivered via file protocol (as opposed to http/https)
function isFileURI(filename) {
  return filename.startsWith('file://');
}

// end include: URIUtils.js
function createExportWrapper(name, fixedasm) {
  return function() {
    var displayName = name;
    var asm = fixedasm;
    if (!fixedasm) {
      asm = Module['asm'];
    }
    assert(runtimeInitialized, 'native function `' + displayName + '` called before runtime initialization');
    assert(!runtimeExited, 'native function `' + displayName + '` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
    if (!asm[name]) {
      assert(asm[name], 'exported native function `' + displayName + '` not found');
    }
    return asm[name].apply(null, arguments);
  };
}

var wasmBinaryFile;
  wasmBinaryFile = '<<< WASM_BINARY_FILE >>>';
  if (!isDataURI(wasmBinaryFile)) {
    wasmBinaryFile = locateFile(wasmBinaryFile);
  }

function getBinary(file) {
  try {
    if (file == wasmBinaryFile && wasmBinary) {
      return new Uint8Array(wasmBinary);
    }
    var binary = tryParseAsDataURI(file);
    if (binary) {
      return binary;
    }
    if (readBinary) {
      return readBinary(file);
    } else {
      throw "sync fetching of the wasm failed: you can preload it to Module['wasmBinary'] manually, or emcc.py will do that for you when generating HTML (but not JS)";
    }
  }
  catch (err) {
    abort(err);
  }
}

function getBinaryPromise() {
  // If we don't have the binary yet, try to to load it asynchronously.
  // Fetch has some additional restrictions over XHR, like it can't be used on a file:// url.
  // See https://github.com/github/fetch/pull/92#issuecomment-140665932
  // Cordova or Electron apps are typically loaded from a file:// url.
  // So use fetch if it is available and the url is not a file, otherwise fall back to XHR.
  if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
    if (typeof fetch === 'function'
      && !isFileURI(wasmBinaryFile)
    ) {
      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {
        if (!response['ok']) {
          throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
        }
        return response['arrayBuffer']();
      }).catch(function () {
          return getBinary(wasmBinaryFile);
      });
    }
    else {
      if (readAsync) {
        // fetch is not available or url is file => try XHR (readAsync uses XHR internally)
        return new Promise(function(resolve, reject) {
          readAsync(wasmBinaryFile, function(response) { resolve(new Uint8Array(/** @type{!ArrayBuffer} */(response))) }, reject)
        });
      }
    }
  }

  // Otherwise, getBinary should be able to get it synchronously
  return Promise.resolve().then(function() { return getBinary(wasmBinaryFile); });
}

function instantiateSync(file, info) {
  var instance;
  var module;
  var binary;
  try {
    binary = getBinary(file);
    module = new WebAssembly.Module(binary);
    instance = new WebAssembly.Instance(module, info);
  } catch (e) {
    var str = e.toString();
    err('failed to compile wasm module: ' + str);
    if (str.includes('imported Memory') ||
        str.includes('memory import')) {
      err('Memory size incompatibility issues may be due to changing INITIAL_MEMORY at runtime to something too large. Use ALLOW_MEMORY_GROWTH to allow any size memory (and also make sure not to set INITIAL_MEMORY at runtime to something smaller than it was at compile time).');
    }
    throw e;
  }
  return [instance, module];
}

// Create the wasm instance.
// Receives the wasm imports, returns the exports.
function createWasm() {
  // prepare imports
  var info = {
    'env': asmLibraryArg,
    'wasi_snapshot_preview1': asmLibraryArg,
  };
  // Load the wasm module and create an instance of using native support in the JS engine.
  // handle a generated wasm instance, receiving its exports and
  // performing other necessary setup
  /** @param {WebAssembly.Module=} module*/
  function receiveInstance(instance, module) {
    var exports = instance.exports;

    Module['asm'] = exports;

    wasmTable = Module['asm']['__indirect_function_table'];
    assert(wasmTable, "table not found in wasm exports");

    addOnInit(Module['asm']['__wasm_call_ctors']);

    removeRunDependency('wasm-instantiate');
  }
  // we can't run yet (except in a pthread, where we have a custom sync instantiator)
  addRunDependency('wasm-instantiate');

  // Prefer streaming instantiation if available.

  // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback
  // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel
  // to any other async startup actions they are performing.
  if (Module['instantiateWasm']) {
    try {
      var exports = Module['instantiateWasm'](info, receiveInstance);
      return exports;
    } catch(e) {
      err('Module.instantiateWasm callback failed with error: ' + e);
      return false;
    }
  }

  var result = instantiateSync(wasmBinaryFile, info);
  // TODO: Due to Closure regression https://github.com/google/closure-compiler/issues/3193,
  // the above line no longer optimizes out down to the following line.
  // When the regression is fixed, we can remove this if/else.
  receiveInstance(result[0]);
  return Module['asm']; // exports were assigned here
}

// Globals used by JS i64 conversions (see makeSetValue)
var tempDouble;
var tempI64;

// === Body ===

var ASM_CONSTS = {
  
};






  function callRuntimeCallbacks(callbacks) {
      while (callbacks.length > 0) {
        var callback = callbacks.shift();
        if (typeof callback == 'function') {
          callback(Module); // Pass the module as the first argument.
          continue;
        }
        var func = callback.func;
        if (typeof func === 'number') {
          if (callback.arg === undefined) {
            wasmTable.get(func)();
          } else {
            wasmTable.get(func)(callback.arg);
          }
        } else {
          func(callback.arg === undefined ? null : callback.arg);
        }
      }
    }

  function demangle(func) {
      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
      return func;
    }

  function demangleAll(text) {
      var regex =
        /\b_Z[\w\d_]+/g;
      return text.replace(regex,
        function(x) {
          var y = demangle(x);
          return x === y ? x : (y + ' [' + x + ']');
        });
    }

  function handleException(e) {
      // Certain exception types we do not treat as errors since they are used for
      // internal control flow.
      // 1. ExitStatus, which is thrown by exit()
      // 2. "unwind", which is thrown by emscripten_unwind_to_js_event_loop() and others
      //    that wish to return to JS event loop.
      if (e instanceof ExitStatus || e == 'unwind') {
        return EXITSTATUS;
      }
      // Anything else is an unexpected exception and we treat it as hard error.
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      err('exception thrown: ' + toLog);
      quit_(1, e);
    }

  function jsStackTrace() {
      var error = new Error();
      if (!error.stack) {
        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
        // so try that as a special-case.
        try {
          throw new Error();
        } catch(e) {
          error = e;
        }
        if (!error.stack) {
          return '(no stack trace available)';
        }
      }
      return error.stack.toString();
    }

  function stackTrace() {
      var js = jsStackTrace();
      if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
      return demangleAll(js);
    }

  function setErrNo(value) {
      HEAP32[((___errno_location())>>2)] = value;
      return value;
    }
  
  var PATH = {splitPath:function(filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function(parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function(path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function(path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function(path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        path = PATH.normalize(path);
        path = path.replace(/\/$/, "");
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function(path) {
        return PATH.splitPath(path)[3];
      },join:function() {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function(l, r) {
        return PATH.normalize(l + '/' + r);
      }};
  
  function getRandomDevice() {
      if (typeof crypto === 'object' && typeof crypto['getRandomValues'] === 'function') {
        // for modern web browsers
        var randomBuffer = new Uint8Array(1);
        return function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
      } else
      if (ENVIRONMENT_IS_NODE) {
        // for nodejs with or without crypto support included
        try {
          var crypto_module = require('crypto');
          // nodejs has crypto support
          return function() { return crypto_module['randomBytes'](1)[0]; };
        } catch (e) {
          // nodejs doesn't have crypto support
        }
      }
      // we couldn't find a proper implementation, as Math.random() is not suitable for /dev/random, see emscripten-core/emscripten/pull/7096
      return function() { abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };"); };
    }
  
  var PATH_FS = {resolve:function() {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function(from, to) {
        from = PATH_FS.resolve(from).substr(1);
        to = PATH_FS.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY = {ttys:[],init:function () {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function() {
        // https://github.com/emscripten-core/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function(dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function(stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(43);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function(stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function(stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function(stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(60);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(29);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(6);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function(stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(60);
          }
          try {
            for (var i = 0; i < length; i++) {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            }
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function(tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = Buffer.alloc(BUFSIZE);
              var bytesRead = 0;
  
              try {
                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().includes('EOF')) bytesRead = 0;
                else throw e;
              }
  
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
            } else
            if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function(tty, val) {
          if (val === null || val === 10) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            out(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function(tty, val) {
          if (val === null || val === 10) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function(tty) {
          if (tty.output && tty.output.length > 0) {
            err(UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  function zeroMemory(address, size) {
      if (!HEAPU8.fill) {
        for (var i = 0; i < size; i++) {
          HEAPU8[address + i] = 0;
        }
        return;
      }
      HEAPU8.fill(0, address, address + size);
    }
  
  function alignMemory(size, alignment) {
      assert(alignment, "alignment argument is required");
      return Math.ceil(size / alignment) * alignment;
    }
  function mmapAlloc(size) {
      abort('internal error: mmapAlloc called but `memalign` native symbol not exported');
    }
  var MEMFS = {ops_table:null,mount:function(mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function(parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(63);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
          parent.timestamp = node.timestamp;
        }
        return node;
      },getFileDataAsTypedArray:function(node) {
        if (!node.contents) return new Uint8Array(0);
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function(node, newCapacity) {
        var prevCapacity = node.contents ? node.contents.length : 0;
        if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
        // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
        // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
        // avoid overshooting the allocation cap by a very large margin.
        var CAPACITY_DOUBLING_MAX = 1024 * 1024;
        newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) >>> 0);
        if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
        var oldContents = node.contents;
        node.contents = new Uint8Array(newCapacity); // Allocate new storage.
        if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
      },resizeFileStorage:function(node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
        } else {
          var oldContents = node.contents;
          node.contents = new Uint8Array(newSize); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
        }
      },node_ops:{getattr:function(node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function(node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function(parent, name) {
          throw FS.genericErrors[44];
        },mknod:function(parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function(old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(55);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.parent.timestamp = Date.now()
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          new_dir.timestamp = old_node.parent.timestamp;
          old_node.parent = new_dir;
        },unlink:function(parent, name) {
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },rmdir:function(parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(55);
          }
          delete parent.contents[name];
          parent.timestamp = Date.now();
        },readdir:function(node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function(parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function(node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(28);
          }
          return node.link;
        }},stream_ops:{read:function(stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function(stream, buffer, offset, length, position, canOwn) {
          // The data buffer should be a typed array view
          assert(!(buffer instanceof ArrayBuffer));
  
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = buffer.slice(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) {
            // Use typed array write which is available.
            node.contents.set(buffer.subarray(offset, offset + length), position);
          } else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position + length);
          return length;
        },llseek:function(stream, offset, whence) {
          var position = offset;
          if (whence === 1) {
            position += stream.position;
          } else if (whence === 2) {
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(28);
          }
          return position;
        },allocate:function(stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function(stream, address, length, position, prot, flags) {
          if (address !== 0) {
            // We don't currently support location hints for the address of the mapping
            throw new FS.ErrnoError(28);
          }
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if (!(flags & 2) && contents.buffer === buffer) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = mmapAlloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(48);
            }
            HEAP8.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function(stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(43);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  function asyncLoad(url, onload, onerror, noRunDep) {
      var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';
      readAsync(url, function(arrayBuffer) {
        assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
        onload(new Uint8Array(arrayBuffer));
        if (dep) removeRunDependency(dep);
      }, function(event) {
        if (onerror) {
          onerror();
        } else {
          throw 'Loading data file "' + url + '" failed.';
        }
      });
      if (dep) addRunDependency(dep);
    }
  
  var ERRNO_MESSAGES = {0:"Success",1:"Arg list too long",2:"Permission denied",3:"Address already in use",4:"Address not available",5:"Address family not supported by protocol family",6:"No more processes",7:"Socket already connected",8:"Bad file number",9:"Trying to read unreadable message",10:"Mount device busy",11:"Operation canceled",12:"No children",13:"Connection aborted",14:"Connection refused",15:"Connection reset by peer",16:"File locking deadlock error",17:"Destination address required",18:"Math arg out of domain of func",19:"Quota exceeded",20:"File exists",21:"Bad address",22:"File too large",23:"Host is unreachable",24:"Identifier removed",25:"Illegal byte sequence",26:"Connection already in progress",27:"Interrupted system call",28:"Invalid argument",29:"I/O error",30:"Socket is already connected",31:"Is a directory",32:"Too many symbolic links",33:"Too many open files",34:"Too many links",35:"Message too long",36:"Multihop attempted",37:"File or path name too long",38:"Network interface is not configured",39:"Connection reset by network",40:"Network is unreachable",41:"Too many open files in system",42:"No buffer space available",43:"No such device",44:"No such file or directory",45:"Exec format error",46:"No record locks available",47:"The link has been severed",48:"Not enough core",49:"No message of desired type",50:"Protocol not available",51:"No space left on device",52:"Function not implemented",53:"Socket is not connected",54:"Not a directory",55:"Directory not empty",56:"State not recoverable",57:"Socket operation on non-socket",59:"Not a typewriter",60:"No such device or address",61:"Value too large for defined data type",62:"Previous owner died",63:"Not super-user",64:"Broken pipe",65:"Protocol error",66:"Unknown protocol",67:"Protocol wrong type for socket",68:"Math result not representable",69:"Read only file system",70:"Illegal seek",71:"No such process",72:"Stale file handle",73:"Connection timed out",74:"Text file busy",75:"Cross-device link",100:"Device not a stream",101:"Bad font file fmt",102:"Invalid slot",103:"Invalid request code",104:"No anode",105:"Block device required",106:"Channel number out of range",107:"Level 3 halted",108:"Level 3 reset",109:"Link number out of range",110:"Protocol driver not attached",111:"No CSI structure available",112:"Level 2 halted",113:"Invalid exchange",114:"Invalid request descriptor",115:"Exchange full",116:"No data (for no delay io)",117:"Timer expired",118:"Out of streams resources",119:"Machine is not on the network",120:"Package not installed",121:"The object is remote",122:"Advertise error",123:"Srmount error",124:"Communication error on send",125:"Cross mount point (not really error)",126:"Given log. name not unique",127:"f.d. invalid for this operation",128:"Remote address changed",129:"Can   access a needed shared lib",130:"Accessing a corrupted shared lib",131:".lib section in a.out corrupted",132:"Attempting to link in too many libs",133:"Attempting to exec a shared library",135:"Streams pipe error",136:"Too many users",137:"Socket type not supported",138:"Not supported",139:"Protocol family not supported",140:"Can't send after socket shutdown",141:"Too many references",142:"Host is down",148:"No medium (in tape drive)",156:"Level 2 not synchronized"};
  
  var ERRNO_CODES = {};
  var FS = {root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,lookupPath:function(path, opts) {
        path = PATH_FS.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(32);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(32);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function(node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function(parentid, name) {
        var hash = 0;
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function(node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function(parent, name) {
        var errCode = FS.mayLookup(parent);
        if (errCode) {
          throw new FS.ErrnoError(errCode, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function(parent, name, mode, rdev) {
        assert(typeof parent === 'object')
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function(node) {
        FS.hashRemoveNode(node);
      },isRoot:function(node) {
        return node === node.parent;
      },isMountpoint:function(node) {
        return !!node.mounted;
      },isFile:function(mode) {
        return (mode & 61440) === 32768;
      },isDir:function(mode) {
        return (mode & 61440) === 16384;
      },isLink:function(mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function(mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function(mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function(mode) {
        return (mode & 61440) === 4096;
      },isSocket:function(mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"r+":2,"w":577,"w+":578,"a":1089,"a+":1090},modeStringToFlags:function(str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function(flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function(node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.includes('r') && !(node.mode & 292)) {
          return 2;
        } else if (perms.includes('w') && !(node.mode & 146)) {
          return 2;
        } else if (perms.includes('x') && !(node.mode & 73)) {
          return 2;
        }
        return 0;
      },mayLookup:function(dir) {
        var errCode = FS.nodePermissions(dir, 'x');
        if (errCode) return errCode;
        if (!dir.node_ops.lookup) return 2;
        return 0;
      },mayCreate:function(dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return 20;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function(dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var errCode = FS.nodePermissions(dir, 'wx');
        if (errCode) {
          return errCode;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return 54;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return 10;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return 31;
          }
        }
        return 0;
      },mayOpen:function(node, flags) {
        if (!node) {
          return 44;
        }
        if (FS.isLink(node.mode)) {
          return 32;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return 31;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function(fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(33);
      },getStream:function(fd) {
        return FS.streams[fd];
      },createStream:function(stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = /** @constructor */ function(){};
          FS.FSStream.prototype = {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          };
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function(fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function(stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function() {
          throw new FS.ErrnoError(70);
        }},major:function(dev) {
        return ((dev) >> 8);
      },minor:function(dev) {
        return ((dev) & 0xff);
      },makedev:function(ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function(dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function(dev) {
        return FS.devices[dev];
      },getMounts:function(mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function(populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          err('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(errCode) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(errCode);
        }
  
        function done(errCode) {
          if (errCode) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(errCode);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function(type, opts, mountpoint) {
        if (typeof type === 'string') {
          // The filesystem was not included, and instead we have an error
          // message stored in the variable.
          throw type;
        }
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(10);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(10);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(54);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(28);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.includes(current.mount)) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function(parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function(path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.mayCreate(parent, name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function(path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function(path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function(path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != 20) throw e;
          }
        }
      },mkdev:function(path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function(oldpath, newpath) {
        if (!PATH_FS.resolve(oldpath)) {
          throw new FS.ErrnoError(44);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(44);
        }
        var newname = PATH.basename(newpath);
        var errCode = FS.mayCreate(parent, newname);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(63);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function(old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
  
        // let the errors from non existant directories percolate up
        lookup = FS.lookupPath(old_path, { parent: true });
        old_dir = lookup.node;
        lookup = FS.lookupPath(new_path, { parent: true });
        new_dir = lookup.node;
  
        if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(75);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH_FS.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(28);
        }
        // new path should not be an ancestor of the old path
        relative = PATH_FS.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(55);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var errCode = FS.mayDelete(old_dir, old_name, isdir);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        errCode = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(10);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          errCode = FS.nodePermissions(old_dir, 'w');
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, true);
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(54);
        }
        return node.node_ops.readdir(node);
      },unlink:function(path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var errCode = FS.mayDelete(parent, name, false);
        if (errCode) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(errCode);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(10);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function(path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(44);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(28);
        }
        return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function(path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(63);
        }
        return node.node_ops.getattr(node);
      },lstat:function(path) {
        return FS.stat(path, true);
      },chmod:function(path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function(path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function(fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chmod(stream.node, mode);
      },chown:function(path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function(path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function(fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function(path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(28);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(63);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(28);
        }
        var errCode = FS.nodePermissions(node, 'w');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function(fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(28);
        }
        FS.truncate(stream.node, len);
      },utime:function(path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function(path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(44);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(20);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(44);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(54);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var errCode = FS.mayOpen(node, flags);
          if (errCode) {
            throw new FS.ErrnoError(errCode);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512 | 131072);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
          }
        }
        return stream;
      },close:function(stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function(stream) {
        return stream.fd === null;
      },llseek:function(stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(70);
        }
        if (whence != 0 && whence != 1 && whence != 2) {
          throw new FS.ErrnoError(28);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function(stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(28);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function(stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(28);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(31);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(28);
        }
        if (stream.seekable && stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(70);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function(stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(8);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(28);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(8);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(43);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(138);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function(stream, address, length, position, prot, flags) {
        // User requests writing to file (prot & PROT_WRITE != 0).
        // Checking if we have permissions to write to the file unless
        // MAP_PRIVATE flag is set. According to POSIX spec it is possible
        // to write to file opened in read-only mode with MAP_PRIVATE flag,
        // as all modifications will be visible only in the memory of
        // the current process.
        if ((prot & 2) !== 0
            && (flags & 2) === 0
            && (stream.flags & 2097155) !== 2) {
          throw new FS.ErrnoError(2);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(2);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(43);
        }
        return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
      },msync:function(stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function(stream) {
        return 0;
      },ioctl:function(stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(59);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function(path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 0;
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function(path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 577;
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function() {
        return FS.currentPath;
      },chdir:function(path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(44);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(54);
        }
        var errCode = FS.nodePermissions(lookup.node, 'x');
        if (errCode) {
          throw new FS.ErrnoError(errCode);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function() {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function() {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using err() rather than out()
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device = getRandomDevice();
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function() {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the
        // name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        var proc_self = FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode(proc_self, 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function() {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 0);
        var stdout = FS.open('/dev/stdout', 1);
        var stderr = FS.open('/dev/stderr', 1);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function() {
        if (FS.ErrnoError) return;
        FS.ErrnoError = /** @this{Object} */ function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = /** @this{Object} */ function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
  
          // Try to get a maximally helpful stack trace. On Node.js, getting Error.stack
          // now ensures it shows what we want.
          if (this.stack) {
            // Define the stack property for Node.js 4, which otherwise errors on the next line.
            Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
            this.stack = demangleAll(this.stack);
          }
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [44].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function() {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
        };
      },init:function(input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function() {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function(canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },findObject:function(path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          return null;
        }
      },analyzePath:function(path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createPath:function(parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function(parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function(parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 577);
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function(parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(6);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(29);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },forceLoadFile:function(obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (read_) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(read_(obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            throw new FS.ErrnoError(29);
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
      },createLazyFile:function(parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        /** @constructor */
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = /** @this{Object} */ function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        };
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        };
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(/** @type{Array<number>} */(xhr.response || []));
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            out("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        };
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: /** @this{Object} */ function() {
                if (!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: /** @this {FSNode} */ function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            FS.forceLoadFile(node);
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          FS.forceLoadFile(node);
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function() {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function() {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          out('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function(paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },absolutePath:function() {
        abort('FS.absolutePath has been removed; use PATH_FS.resolve instead');
      },createFolder:function() {
        abort('FS.createFolder has been removed; use FS.mkdir instead');
      },createLink:function() {
        abort('FS.createLink has been removed; use FS.symlink instead');
      },joinPath:function() {
        abort('FS.joinPath has been removed; use PATH.join instead');
      },mmapAlloc:function() {
        abort('FS.mmapAlloc has been replaced by the top level function mmapAlloc');
      },standardizePath:function() {
        abort('FS.standardizePath has been removed; use PATH.normalize instead');
      }};
  var SYSCALLS = {mappings:{},DEFAULT_POLLMASK:5,umask:511,calculateAt:function(dirfd, path, allowEmpty) {
        if (path[0] === '/') {
          return path;
        }
        // relative path
        var dir;
        if (dirfd === -100) {
          dir = FS.cwd();
        } else {
          var dirstream = FS.getStream(dirfd);
          if (!dirstream) throw new FS.ErrnoError(8);
          dir = dirstream.path;
        }
        if (path.length == 0) {
          if (!allowEmpty) {
            throw new FS.ErrnoError(44);;
          }
          return dir;
        }
        return PATH.join2(dir, path);
      },doStat:function(func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -54;
          }
          throw e;
        }
        HEAP32[((buf)>>2)] = stat.dev;
        HEAP32[(((buf)+(4))>>2)] = 0;
        HEAP32[(((buf)+(8))>>2)] = stat.ino;
        HEAP32[(((buf)+(12))>>2)] = stat.mode;
        HEAP32[(((buf)+(16))>>2)] = stat.nlink;
        HEAP32[(((buf)+(20))>>2)] = stat.uid;
        HEAP32[(((buf)+(24))>>2)] = stat.gid;
        HEAP32[(((buf)+(28))>>2)] = stat.rdev;
        HEAP32[(((buf)+(32))>>2)] = 0;
        (tempI64 = [stat.size>>>0,(tempDouble=stat.size,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(40))>>2)] = tempI64[0],HEAP32[(((buf)+(44))>>2)] = tempI64[1]);
        HEAP32[(((buf)+(48))>>2)] = 4096;
        HEAP32[(((buf)+(52))>>2)] = stat.blocks;
        HEAP32[(((buf)+(56))>>2)] = (stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)] = 0;
        HEAP32[(((buf)+(64))>>2)] = (stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)] = 0;
        HEAP32[(((buf)+(72))>>2)] = (stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(76))>>2)] = 0;
        (tempI64 = [stat.ino>>>0,(tempDouble=stat.ino,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[(((buf)+(80))>>2)] = tempI64[0],HEAP32[(((buf)+(84))>>2)] = tempI64[1]);
        return 0;
      },doMsync:function(addr, stream, len, flags, offset) {
        var buffer = HEAPU8.slice(addr, addr + len);
        FS.msync(stream, buffer, offset, len, flags);
      },doMkdir:function(path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function(path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -28;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function(path, buf, bufsize) {
        if (bufsize <= 0) return -28;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function(path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -28;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        if (!node) {
          return -44;
        }
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -2;
        }
        return 0;
      },doDup:function(path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function(stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:undefined,get:function() {
        assert(SYSCALLS.varargs != undefined);
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function(ptr) {
        var ret = UTF8ToString(ptr);
        return ret;
      },getStreamFromFD:function(fd) {
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(8);
        return stream;
      },get64:function(low, high) {
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      }};
  function ___sys_fcntl64(fd, cmd, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -28;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        /* case 12: Currently in musl F_GETLK64 has same value as F_GETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */ {
          
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)] = 2;
          return 0;
        }
        case 13:
        case 14:
        /* case 13: Currently in musl F_SETLK64 has same value as F_SETLK, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
        /* case 14: Currently in musl F_SETLKW64 has same value as F_SETLKW, so omitted to avoid duplicate case blocks. If that changes, uncomment this */
          
          
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -28; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          setErrNo(28);
          return -1;
        default: {
          return -28;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_ioctl(fd, op, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -59;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -59;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -59;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)] = 0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -59;
          return -28; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -59;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -59;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___sys_open(path, flags, varargs) {SYSCALLS.varargs = varargs;
  try {
  
      var pathname = SYSCALLS.getStr(path);
      var mode = varargs ? SYSCALLS.get() : 0;
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  var _emscripten_memcpy_big =  Uint8Array.prototype.copyWithin
    ? function(dest, src, num) { HEAPU8.copyWithin(dest, src, src + num); }
    : function(dest, src, num) { HEAPU8.set(HEAPU8.subarray(src, src+num), dest); }
  ;

  function abortOnCannotGrowMemory(requestedSize) {
      abort('Cannot enlarge memory arrays to size ' + requestedSize + ' bytes (OOM). Either (1) compile with  -s INITIAL_MEMORY=X  with X higher than the current value ' + HEAP8.length + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
    }
  function _emscripten_resize_heap(requestedSize) {
      var oldSize = HEAPU8.length;
      requestedSize = requestedSize >>> 0;
      abortOnCannotGrowMemory(requestedSize);
    }

  function _fd_close(fd) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_read(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doReadv(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_seek(fd, offset_low, offset_high, whence, newOffset) {try {
  
      
      var stream = SYSCALLS.getStreamFromFD(fd);
      var HIGH_OFFSET = 0x100000000; // 2^32
      // use an unsigned operator on low and shift high by 32-bits
      var offset = offset_high * HIGH_OFFSET + (offset_low >>> 0);
  
      var DOUBLE_LIMIT = 0x20000000000000; // 2^53
      // we also check for equality since DOUBLE_LIMIT + 1 == DOUBLE_LIMIT
      if (offset <= -DOUBLE_LIMIT || offset >= DOUBLE_LIMIT) {
        return -61;
      }
  
      FS.llseek(stream, offset, whence);
      (tempI64 = [stream.position>>>0,(tempDouble=stream.position,(+(Math.abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math.min((+(Math.floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math.ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((newOffset)>>2)] = tempI64[0],HEAP32[(((newOffset)+(4))>>2)] = tempI64[1]);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _fd_write(fd, iov, iovcnt, pnum) {try {
  
      var stream = SYSCALLS.getStreamFromFD(fd);
      var num = SYSCALLS.doWritev(stream, iov, iovcnt);
      HEAP32[((pnum)>>2)] = num
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return e.errno;
  }
  }

  function _setTempRet0(val) {
      setTempRet0(val);
    }


  var FSNode = /** @constructor */ function(parent, name, mode, rdev) {
    if (!parent) {
      parent = this;  // root node sets parent to itself
    }
    this.parent = parent;
    this.mount = parent.mount;
    this.mounted = null;
    this.id = FS.nextInode++;
    this.name = name;
    this.mode = mode;
    this.node_ops = {};
    this.stream_ops = {};
    this.rdev = rdev;
  };
  var readMode = 292/*292*/ | 73/*73*/;
  var writeMode = 146/*146*/;
  Object.defineProperties(FSNode.prototype, {
   read: {
    get: /** @this{FSNode} */function() {
     return (this.mode & readMode) === readMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= readMode : this.mode &= ~readMode;
    }
   },
   write: {
    get: /** @this{FSNode} */function() {
     return (this.mode & writeMode) === writeMode;
    },
    set: /** @this{FSNode} */function(val) {
     val ? this.mode |= writeMode : this.mode &= ~writeMode;
    }
   },
   isFolder: {
    get: /** @this{FSNode} */function() {
     return FS.isDir(this.mode);
    }
   },
   isDevice: {
    get: /** @this{FSNode} */function() {
     return FS.isChrdev(this.mode);
    }
   }
  });
  FS.FSNode = FSNode;
  FS.staticInit();Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
ERRNO_CODES = {
      'EPERM': 63,
      'ENOENT': 44,
      'ESRCH': 71,
      'EINTR': 27,
      'EIO': 29,
      'ENXIO': 60,
      'E2BIG': 1,
      'ENOEXEC': 45,
      'EBADF': 8,
      'ECHILD': 12,
      'EAGAIN': 6,
      'EWOULDBLOCK': 6,
      'ENOMEM': 48,
      'EACCES': 2,
      'EFAULT': 21,
      'ENOTBLK': 105,
      'EBUSY': 10,
      'EEXIST': 20,
      'EXDEV': 75,
      'ENODEV': 43,
      'ENOTDIR': 54,
      'EISDIR': 31,
      'EINVAL': 28,
      'ENFILE': 41,
      'EMFILE': 33,
      'ENOTTY': 59,
      'ETXTBSY': 74,
      'EFBIG': 22,
      'ENOSPC': 51,
      'ESPIPE': 70,
      'EROFS': 69,
      'EMLINK': 34,
      'EPIPE': 64,
      'EDOM': 18,
      'ERANGE': 68,
      'ENOMSG': 49,
      'EIDRM': 24,
      'ECHRNG': 106,
      'EL2NSYNC': 156,
      'EL3HLT': 107,
      'EL3RST': 108,
      'ELNRNG': 109,
      'EUNATCH': 110,
      'ENOCSI': 111,
      'EL2HLT': 112,
      'EDEADLK': 16,
      'ENOLCK': 46,
      'EBADE': 113,
      'EBADR': 114,
      'EXFULL': 115,
      'ENOANO': 104,
      'EBADRQC': 103,
      'EBADSLT': 102,
      'EDEADLOCK': 16,
      'EBFONT': 101,
      'ENOSTR': 100,
      'ENODATA': 116,
      'ETIME': 117,
      'ENOSR': 118,
      'ENONET': 119,
      'ENOPKG': 120,
      'EREMOTE': 121,
      'ENOLINK': 47,
      'EADV': 122,
      'ESRMNT': 123,
      'ECOMM': 124,
      'EPROTO': 65,
      'EMULTIHOP': 36,
      'EDOTDOT': 125,
      'EBADMSG': 9,
      'ENOTUNIQ': 126,
      'EBADFD': 127,
      'EREMCHG': 128,
      'ELIBACC': 129,
      'ELIBBAD': 130,
      'ELIBSCN': 131,
      'ELIBMAX': 132,
      'ELIBEXEC': 133,
      'ENOSYS': 52,
      'ENOTEMPTY': 55,
      'ENAMETOOLONG': 37,
      'ELOOP': 32,
      'EOPNOTSUPP': 138,
      'EPFNOSUPPORT': 139,
      'ECONNRESET': 15,
      'ENOBUFS': 42,
      'EAFNOSUPPORT': 5,
      'EPROTOTYPE': 67,
      'ENOTSOCK': 57,
      'ENOPROTOOPT': 50,
      'ESHUTDOWN': 140,
      'ECONNREFUSED': 14,
      'EADDRINUSE': 3,
      'ECONNABORTED': 13,
      'ENETUNREACH': 40,
      'ENETDOWN': 38,
      'ETIMEDOUT': 73,
      'EHOSTDOWN': 142,
      'EHOSTUNREACH': 23,
      'EINPROGRESS': 26,
      'EALREADY': 7,
      'EDESTADDRREQ': 17,
      'EMSGSIZE': 35,
      'EPROTONOSUPPORT': 66,
      'ESOCKTNOSUPPORT': 137,
      'EADDRNOTAVAIL': 4,
      'ENETRESET': 39,
      'EISCONN': 30,
      'ENOTCONN': 53,
      'ETOOMANYREFS': 141,
      'EUSERS': 136,
      'EDQUOT': 19,
      'ESTALE': 72,
      'ENOTSUP': 138,
      'ENOMEDIUM': 148,
      'EILSEQ': 25,
      'EOVERFLOW': 61,
      'ECANCELED': 11,
      'ENOTRECOVERABLE': 56,
      'EOWNERDEAD': 62,
      'ESTRPIPE': 135,
    };;
var ASSERTIONS = true;



/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {string} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf = Buffer.from(s, 'base64');
    return new Uint8Array(buf['buffer'], buf['byteOffset'], buf['byteLength']);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}


var asmLibraryArg = {
  "__sys_fcntl64": ___sys_fcntl64,
  "__sys_ioctl": ___sys_ioctl,
  "__sys_open": ___sys_open,
  "emscripten_memcpy_big": _emscripten_memcpy_big,
  "emscripten_resize_heap": _emscripten_resize_heap,
  "fd_close": _fd_close,
  "fd_read": _fd_read,
  "fd_seek": _fd_seek,
  "fd_write": _fd_write,
  "getTempRet0": getTempRet0,
  "memory": wasmMemory,
  "setTempRet0": setTempRet0
};
var asm = createWasm();
/** @type {function(...*):?} */
var ___wasm_call_ctors = Module["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors", asm);

/** @type {function(...*):?} */
var _malloc = Module["_malloc"] = createExportWrapper("malloc", asm);

/** @type {function(...*):?} */
var _free = Module["_free"] = createExportWrapper("free", asm);

/** @type {function(...*):?} */
var _mid_song_get_num_missing_instruments = Module["_mid_song_get_num_missing_instruments"] = createExportWrapper("mid_song_get_num_missing_instruments", asm);

/** @type {function(...*):?} */
var _mid_song_get_missing_instrument = Module["_mid_song_get_missing_instrument"] = createExportWrapper("mid_song_get_missing_instrument", asm);

/** @type {function(...*):?} */
var _mid_song_note_on = Module["_mid_song_note_on"] = createExportWrapper("mid_song_note_on", asm);

/** @type {function(...*):?} */
var _mid_song_midi_message = Module["_mid_song_midi_message"] = createExportWrapper("mid_song_midi_message", asm);

/** @type {function(...*):?} */
var _mid_song_start = Module["_mid_song_start"] = createExportWrapper("mid_song_start", asm);

/** @type {function(...*):?} */
var _mid_song_get_total_time = Module["_mid_song_get_total_time"] = createExportWrapper("mid_song_get_total_time", asm);

/** @type {function(...*):?} */
var _mid_song_read_wave = Module["_mid_song_read_wave"] = createExportWrapper("mid_song_read_wave", asm);

/** @type {function(...*):?} */
var _mid_set_master_pitch = Module["_mid_set_master_pitch"] = createExportWrapper("mid_set_master_pitch", asm);

/** @type {function(...*):?} */
var _mid_get_freq_table = Module["_mid_get_freq_table"] = createExportWrapper("mid_get_freq_table", asm);

/** @type {function(...*):?} */
var _mid_reset_freq_table = Module["_mid_reset_freq_table"] = createExportWrapper("mid_reset_freq_table", asm);

/** @type {function(...*):?} */
var _mid_istream_open_mem = Module["_mid_istream_open_mem"] = createExportWrapper("mid_istream_open_mem", asm);

/** @type {function(...*):?} */
var _mid_istream_close = Module["_mid_istream_close"] = createExportWrapper("mid_istream_close", asm);

/** @type {function(...*):?} */
var _mid_init = Module["_mid_init"] = createExportWrapper("mid_init", asm);

/** @type {function(...*):?} */
var _mid_create_options = Module["_mid_create_options"] = createExportWrapper("mid_create_options", asm);

/** @type {function(...*):?} */
var _mid_song_load = Module["_mid_song_load"] = createExportWrapper("mid_song_load", asm);

/** @type {function(...*):?} */
var _mid_song_free = Module["_mid_song_free"] = createExportWrapper("mid_song_free", asm);

/** @type {function(...*):?} */
var _mid_exit = Module["_mid_exit"] = createExportWrapper("mid_exit", asm);

/** @type {function(...*):?} */
var ___errno_location = Module["___errno_location"] = createExportWrapper("__errno_location", asm);

/** @type {function(...*):?} */
var _fflush = Module["_fflush"] = createExportWrapper("fflush", asm);

/** @type {function(...*):?} */
var _emscripten_stack_get_end = Module["_emscripten_stack_get_end"] = asm["emscripten_stack_get_end"]

/** @type {function(...*):?} */
var stackSave = Module["stackSave"] = createExportWrapper("stackSave", asm);

/** @type {function(...*):?} */
var stackRestore = Module["stackRestore"] = createExportWrapper("stackRestore", asm);

/** @type {function(...*):?} */
var stackAlloc = Module["stackAlloc"] = createExportWrapper("stackAlloc", asm);

/** @type {function(...*):?} */
var _emscripten_stack_init = Module["_emscripten_stack_init"] = asm["emscripten_stack_init"]

/** @type {function(...*):?} */
var _emscripten_stack_get_free = Module["_emscripten_stack_get_free"] = asm["emscripten_stack_get_free"]

/** @type {function(...*):?} */
var dynCall_jiji = Module["dynCall_jiji"] = createExportWrapper("dynCall_jiji", asm);





// === Auto-generated postamble setup entry stuff ===

if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromString")) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "intArrayToString")) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["ccall"] = ccall;
if (!Object.getOwnPropertyDescriptor(Module, "cwrap")) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["setValue"] = setValue;
Module["getValue"] = getValue;
if (!Object.getOwnPropertyDescriptor(Module, "allocate")) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ArrayToString")) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF8ToString")) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8Array")) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF8")) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF8")) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreRun")) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnInit")) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPreMain")) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnExit")) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addOnPostRun")) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeStringToMemory")) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeArrayToMemory"] = writeArrayToMemory;
if (!Object.getOwnPropertyDescriptor(Module, "writeAsciiToMemory")) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["addRunDependency"] = addRunDependency;
Module["removeRunDependency"] = removeRunDependency;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createFolder")) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createPath"] = FS.createPath;
Module["FS_createDataFile"] = FS.createDataFile;
Module["FS_createPreloadedFile"] = FS.createPreloadedFile;
Module["FS_createLazyFile"] = FS.createLazyFile;
if (!Object.getOwnPropertyDescriptor(Module, "FS_createLink")) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["FS_createDevice"] = FS.createDevice;
Module["FS_unlink"] = FS.unlink;
if (!Object.getOwnPropertyDescriptor(Module, "getLEB")) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFunctionTables")) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignFunctionTables")) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFunctions")) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "addFunction")) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "removeFunction")) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "prettyPrint")) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCompilerSetting")) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "print")) Module["print"] = function() { abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "printErr")) Module["printErr"] = function() { abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getTempRet0")) Module["getTempRet0"] = function() { abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setTempRet0")) Module["setTempRet0"] = function() { abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callMain")) Module["callMain"] = function() { abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abort")) Module["abort"] = function() { abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "keepRuntimeAlive")) Module["keepRuntimeAlive"] = function() { abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "zeroMemory")) Module["zeroMemory"] = function() { abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToNewUTF8")) Module["stringToNewUTF8"] = function() { abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setFileTime")) Module["setFileTime"] = function() { abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "abortOnCannotGrowMemory")) Module["abortOnCannotGrowMemory"] = function() { abort("'abortOnCannotGrowMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscripten_realloc_buffer")) Module["emscripten_realloc_buffer"] = function() { abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ENV")) Module["ENV"] = function() { abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_CODES")) Module["ERRNO_CODES"] = function() { abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ERRNO_MESSAGES")) Module["ERRNO_MESSAGES"] = function() { abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setErrNo")) Module["setErrNo"] = function() { abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton4")) Module["inetPton4"] = function() { abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop4")) Module["inetNtop4"] = function() { abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetPton6")) Module["inetPton6"] = function() { abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "inetNtop6")) Module["inetNtop6"] = function() { abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readSockaddr")) Module["readSockaddr"] = function() { abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeSockaddr")) Module["writeSockaddr"] = function() { abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "DNS")) Module["DNS"] = function() { abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getHostByName")) Module["getHostByName"] = function() { abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GAI_ERRNO_MESSAGES")) Module["GAI_ERRNO_MESSAGES"] = function() { abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Protocols")) Module["Protocols"] = function() { abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Sockets")) Module["Sockets"] = function() { abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getRandomDevice")) Module["getRandomDevice"] = function() { abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "traverseStack")) Module["traverseStack"] = function() { abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UNWIND_CACHE")) Module["UNWIND_CACHE"] = function() { abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "withBuiltinMalloc")) Module["withBuiltinMalloc"] = function() { abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgsArray")) Module["readAsmConstArgsArray"] = function() { abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readAsmConstArgs")) Module["readAsmConstArgs"] = function() { abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mainThreadEM_ASM")) Module["mainThreadEM_ASM"] = function() { abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_q")) Module["jstoi_q"] = function() { abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jstoi_s")) Module["jstoi_s"] = function() { abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getExecutableName")) Module["getExecutableName"] = function() { abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "listenOnce")) Module["listenOnce"] = function() { abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "autoResumeAudioContext")) Module["autoResumeAudioContext"] = function() { abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCallLegacy")) Module["dynCallLegacy"] = function() { abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getDynCaller")) Module["getDynCaller"] = function() { abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "dynCall")) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callRuntimeCallbacks")) Module["callRuntimeCallbacks"] = function() { abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "handleException")) Module["handleException"] = function() { abort("'handleException' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePush")) Module["runtimeKeepalivePush"] = function() { abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runtimeKeepalivePop")) Module["runtimeKeepalivePop"] = function() { abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "callUserCallback")) Module["callUserCallback"] = function() { abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeExit")) Module["maybeExit"] = function() { abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "safeSetTimeout")) Module["safeSetTimeout"] = function() { abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asmjsMangle")) Module["asmjsMangle"] = function() { abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "asyncLoad")) Module["asyncLoad"] = function() { abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "alignMemory")) Module["alignMemory"] = function() { abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "mmapAlloc")) Module["mmapAlloc"] = function() { abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reallyNegative")) Module["reallyNegative"] = function() { abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "unSign")) Module["unSign"] = function() { abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "reSign")) Module["reSign"] = function() { abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "formatString")) Module["formatString"] = function() { abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH")) Module["PATH"] = function() { abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PATH_FS")) Module["PATH_FS"] = function() { abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SYSCALLS")) Module["SYSCALLS"] = function() { abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMmap2")) Module["syscallMmap2"] = function() { abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "syscallMunmap")) Module["syscallMunmap"] = function() { abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketFromFD")) Module["getSocketFromFD"] = function() { abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getSocketAddress")) Module["getSocketAddress"] = function() { abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "JSEvents")) Module["JSEvents"] = function() { abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerKeyEventCallback")) Module["registerKeyEventCallback"] = function() { abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "specialHTMLTargets")) Module["specialHTMLTargets"] = function() { abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "maybeCStringToJsString")) Module["maybeCStringToJsString"] = function() { abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findEventTarget")) Module["findEventTarget"] = function() { abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "findCanvasEventTarget")) Module["findCanvasEventTarget"] = function() { abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getBoundingClientRect")) Module["getBoundingClientRect"] = function() { abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillMouseEventData")) Module["fillMouseEventData"] = function() { abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerMouseEventCallback")) Module["registerMouseEventCallback"] = function() { abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerWheelEventCallback")) Module["registerWheelEventCallback"] = function() { abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerUiEventCallback")) Module["registerUiEventCallback"] = function() { abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFocusEventCallback")) Module["registerFocusEventCallback"] = function() { abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceOrientationEventData")) Module["fillDeviceOrientationEventData"] = function() { abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceOrientationEventCallback")) Module["registerDeviceOrientationEventCallback"] = function() { abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillDeviceMotionEventData")) Module["fillDeviceMotionEventData"] = function() { abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerDeviceMotionEventCallback")) Module["registerDeviceMotionEventCallback"] = function() { abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "screenOrientation")) Module["screenOrientation"] = function() { abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillOrientationChangeEventData")) Module["fillOrientationChangeEventData"] = function() { abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerOrientationChangeEventCallback")) Module["registerOrientationChangeEventCallback"] = function() { abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillFullscreenChangeEventData")) Module["fillFullscreenChangeEventData"] = function() { abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerFullscreenChangeEventCallback")) Module["registerFullscreenChangeEventCallback"] = function() { abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerRestoreOldStyle")) Module["registerRestoreOldStyle"] = function() { abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "hideEverythingExceptGivenElement")) Module["hideEverythingExceptGivenElement"] = function() { abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreHiddenElements")) Module["restoreHiddenElements"] = function() { abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setLetterbox")) Module["setLetterbox"] = function() { abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "currentFullscreenStrategy")) Module["currentFullscreenStrategy"] = function() { abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "restoreOldWindowedStyle")) Module["restoreOldWindowedStyle"] = function() { abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "softFullscreenResizeWebGLRenderTarget")) Module["softFullscreenResizeWebGLRenderTarget"] = function() { abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "doRequestFullscreen")) Module["doRequestFullscreen"] = function() { abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillPointerlockChangeEventData")) Module["fillPointerlockChangeEventData"] = function() { abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockChangeEventCallback")) Module["registerPointerlockChangeEventCallback"] = function() { abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerPointerlockErrorEventCallback")) Module["registerPointerlockErrorEventCallback"] = function() { abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "requestPointerLock")) Module["requestPointerLock"] = function() { abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillVisibilityChangeEventData")) Module["fillVisibilityChangeEventData"] = function() { abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerVisibilityChangeEventCallback")) Module["registerVisibilityChangeEventCallback"] = function() { abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerTouchEventCallback")) Module["registerTouchEventCallback"] = function() { abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillGamepadEventData")) Module["fillGamepadEventData"] = function() { abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerGamepadEventCallback")) Module["registerGamepadEventCallback"] = function() { abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBeforeUnloadEventCallback")) Module["registerBeforeUnloadEventCallback"] = function() { abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "fillBatteryEventData")) Module["fillBatteryEventData"] = function() { abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "battery")) Module["battery"] = function() { abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "registerBatteryEventCallback")) Module["registerBatteryEventCallback"] = function() { abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setCanvasElementSize")) Module["setCanvasElementSize"] = function() { abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getCanvasElementSize")) Module["getCanvasElementSize"] = function() { abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "polyfillSetImmediate")) Module["polyfillSetImmediate"] = function() { abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangle")) Module["demangle"] = function() { abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "demangleAll")) Module["demangleAll"] = function() { abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "jsStackTrace")) Module["jsStackTrace"] = function() { abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackTrace")) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getEnvStrings")) Module["getEnvStrings"] = function() { abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "checkWasiClock")) Module["checkWasiClock"] = function() { abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64")) Module["writeI53ToI64"] = function() { abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Clamped")) Module["writeI53ToI64Clamped"] = function() { abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToI64Signaling")) Module["writeI53ToI64Signaling"] = function() { abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Clamped")) Module["writeI53ToU64Clamped"] = function() { abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeI53ToU64Signaling")) Module["writeI53ToU64Signaling"] = function() { abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromI64")) Module["readI53FromI64"] = function() { abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "readI53FromU64")) Module["readI53FromU64"] = function() { abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertI32PairToI53")) Module["convertI32PairToI53"] = function() { abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "convertU32PairToI53")) Module["convertU32PairToI53"] = function() { abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "uncaughtExceptionCount")) Module["uncaughtExceptionCount"] = function() { abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionLast")) Module["exceptionLast"] = function() { abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exceptionCaught")) Module["exceptionCaught"] = function() { abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ExceptionInfo")) Module["ExceptionInfo"] = function() { abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "CatchInfo")) Module["CatchInfo"] = function() { abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_addRef")) Module["exception_addRef"] = function() { abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "exception_decRef")) Module["exception_decRef"] = function() { abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "Browser")) Module["Browser"] = function() { abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "funcWrappers")) Module["funcWrappers"] = function() { abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "getFuncWrapper")) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "setMainLoop")) Module["setMainLoop"] = function() { abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "wget")) Module["wget"] = function() { abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "FS")) Module["FS"] = function() { abort("'FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "MEMFS")) Module["MEMFS"] = function() { abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "TTY")) Module["TTY"] = function() { abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "PIPEFS")) Module["PIPEFS"] = function() { abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SOCKFS")) Module["SOCKFS"] = function() { abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "_setNetworkCallback")) Module["_setNetworkCallback"] = function() { abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tempFixedLengthArray")) Module["tempFixedLengthArray"] = function() { abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "miniTempWebGLFloatBuffers")) Module["miniTempWebGLFloatBuffers"] = function() { abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapObjectForWebGLType")) Module["heapObjectForWebGLType"] = function() { abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "heapAccessShiftForWebGLHeap")) Module["heapAccessShiftForWebGLHeap"] = function() { abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GL")) Module["GL"] = function() { abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGet")) Module["emscriptenWebGLGet"] = function() { abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "computeUnpackAlignedImageSize")) Module["computeUnpackAlignedImageSize"] = function() { abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetTexPixelData")) Module["emscriptenWebGLGetTexPixelData"] = function() { abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetUniform")) Module["emscriptenWebGLGetUniform"] = function() { abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetUniformLocation")) Module["webglGetUniformLocation"] = function() { abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglPrepareUniformLocationsBeforeFirstUse")) Module["webglPrepareUniformLocationsBeforeFirstUse"] = function() { abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "webglGetLeftBracePos")) Module["webglGetLeftBracePos"] = function() { abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "emscriptenWebGLGetVertexAttrib")) Module["emscriptenWebGLGetVertexAttrib"] = function() { abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "writeGLArray")) Module["writeGLArray"] = function() { abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AL")) Module["AL"] = function() { abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_unicode")) Module["SDL_unicode"] = function() { abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_ttfContext")) Module["SDL_ttfContext"] = function() { abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_audio")) Module["SDL_audio"] = function() { abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL")) Module["SDL"] = function() { abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "SDL_gfx")) Module["SDL_gfx"] = function() { abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLUT")) Module["GLUT"] = function() { abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "EGL")) Module["EGL"] = function() { abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW_Window")) Module["GLFW_Window"] = function() { abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLFW")) Module["GLFW"] = function() { abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "GLEW")) Module["GLEW"] = function() { abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "IDBStore")) Module["IDBStore"] = function() { abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "runAndAbortIfError")) Module["runAndAbortIfError"] = function() { abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "warnOnce")) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackSave")) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackRestore")) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stackAlloc")) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "AsciiToString")) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToAscii")) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF16ToString")) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF16")) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF16")) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "UTF32ToString")) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "stringToUTF32")) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "lengthBytesUTF32")) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8")) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "allocateUTF8OnStack")) Module["allocateUTF8OnStack"] = function() { abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
Module["writeStackCookie"] = writeStackCookie;
Module["checkStackCookie"] = checkStackCookie;
if (!Object.getOwnPropertyDescriptor(Module, "intArrayFromBase64")) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "tryParseAsDataURI")) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_NORMAL")) Object.defineProperty(Module, "ALLOC_NORMAL", { configurable: true, get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Object.getOwnPropertyDescriptor(Module, "ALLOC_STACK")) Object.defineProperty(Module, "ALLOC_STACK", { configurable: true, get: function() { abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

var calledRun;

/**
 * @constructor
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
}

var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!calledRun) run();
  if (!calledRun) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
};

function stackCheckInit() {
  // This is normally called automatically during __wasm_call_ctors but need to
  // get these values before even running any of the ctors so we call it redundantly
  // here.
  // TODO(sbc): Move writeStackCookie to native to to avoid this.
  _emscripten_stack_init();
  writeStackCookie();
}

/** @type {function(Array=)} */
function run(args) {
  args = args || arguments_;

  if (runDependencies > 0) {
    return;
  }

  stackCheckInit();

  preRun();

  // a preRun added a dependency, run will be called later
  if (runDependencies > 0) {
    return;
  }

  function doRun() {
    // run may have just been called through dependencies being fulfilled just in this very frame,
    // or while the async setStatus time below was happening
    if (calledRun) return;
    calledRun = true;
    Module['calledRun'] = true;

    if (ABORT) return;

    initRuntime();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    assert(!Module['_main'], 'compiled without a main, but one is present. if you added it from JS, use Module["onRuntimeInitialized"]');

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else
  {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in SYSCALLS_REQUIRE_FILESYSTEM=0
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var oldOut = out;
  var oldErr = err;
  var has = false;
  out = err = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    ['stdout', 'stderr'].forEach(function(name) {
      var info = FS.analyzePath('/dev/' + name);
      if (!info) return;
      var stream = info.object;
      var rdev = stream.rdev;
      var tty = TTY.ttys[rdev];
      if (tty && tty.output && tty.output.length) {
        has = true;
      }
    });
  } catch(e) {}
  out = oldOut;
  err = oldErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

/** @param {boolean|number=} implicit */
function exit(status, implicit) {
  EXITSTATUS = status;

  checkUnflushedContent();

  if (keepRuntimeAlive()) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      var msg = 'program exited (with status: ' + status + '), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)';
      err(msg);
    }
  } else {
    exitRuntime();
  }

  procExit(status);
}

function procExit(code) {
  EXITSTATUS = code;
  if (!keepRuntimeAlive()) {
    if (Module['onExit']) Module['onExit'](code);
    ABORT = true;
  }
  quit_(code, new ExitStatus(code));
}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

run();





